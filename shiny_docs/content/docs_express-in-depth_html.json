{
  "metadata": {
    "title": "Express in depth – Shiny for Python",
    "description": "",
    "url": "docs/express-in-depth.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "📝 Syntax modes",
        "Express in depth"
      ]
    },
    {
      "type": "h1",
      "text": "Express in depth"
    },
    {
      "type": "p",
      "text": "Shiny Express has a simple syntax that makes it easy to get started. But achieving this outer simplicity requires some inner complexity. As your usage of Shiny Express becomes more advanced, you may start to encounter some of this complexity."
    },
    {
      "type": "p",
      "text": "(In comparison, Shiny Core requires slightly more effort to learn and to write, but is more predictable and easier to reason about.)"
    },
    {
      "type": "p",
      "text": "This article peels back the curtain on Shiny Express, and reveals some of the hurdles you may run into as your apps grow. Where possible, we’ve added utilities and techniques to deal with these issues."
    },
    {
      "type": "p",
      "text": "It’s our hope that after reading this article, you’ll have a far more complete mental model of how Shiny Express works, and be able to write more advanced apps with less friction. That being said, if you spend a lot of time using these advanced Express features, you may want to consider switching to Shiny Core."
    },
    {
      "type": "p",
      "text": "The following information is organized into two broad topics: Programming UI and Shared objects."
    },
    {
      "type": "h2",
      "text": "Programming UI"
    },
    {
      "type": "p",
      "text": "Let’s start with an unremarkable bit of Shiny Express UI code: one card container, with a heading tag and a string inside."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Socrates\")\n    \"470-399 BC\""
    },
    {
      "type": "p",
      "text": "Now let’s say we want to add a second card."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Immanuel Kant\")\n    \"1724-1804\""
    },
    {
      "type": "p",
      "text": "That works. But as good programmers, we don’t like to repeat ourselves. So we’ll follow programming best practices and refactor that UI logic into a function:"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(name)\n        years\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")"
    },
    {
      "type": "p",
      "text": "Uh oh, that doesn’t look right. Such a simple and obviously correct refactor, yet the cards are now empty!"
    },
    {
      "type": "h3",
      "text": "Interactive mode vs script mode"
    },
    {
      "type": "p",
      "text": "To understand why, you first need to know that the Python interpreter has two different ways of executing code: interactive mode and script mode."
    },
    {
      "type": "p",
      "text": "If you’ve been using Python for a while, you intuitively understand these modes, even if you’ve never stopped to think about it. If you run python and type \"hello\" into the prompt, you’ll see hello printed back to you. But if you create a script.py file containing \"hello\" and run python script.py, you won’t see anything printed."
    },
    {
      "type": "p",
      "text": "In interactive mode, the Python interpreter automatically prints the result of each expression; in script mode, print() must be called explicitly."
    },
    {
      "type": "p",
      "text": "Shiny Express executes your app.py file in interactive mode, not script mode. Even though you’re not at an interactive prompt, it still “prints” the result of each expression. Now, it doesn’t literally use the print() function—that would just print text to the console—but a lower-level function in Python called sys.displayhook that is designed to be overridden by frameworks like Shiny (and Jupyter, incidentally)."
    },
    {
      "type": "p",
      "text": "This is so important that we’ll repeat it: Shiny Express executes your app.py file in interactive mode, which automatically calls sys.displayhook() on each expression."
    },
    {
      "type": "p",
      "text": "That’s why, in our simple examples above, a bare string like \"470-399 BC\" gets printed to the screen. If Shiny Express was executed in script mode (like Shiny Core is, by the way), you’d have to rewrite it as:"
    },
    {
      "type": "code",
      "text": "sys.displayhook(\"470-399 BC\")"
    },
    {
      "type": "p",
      "text": "to get the string to appear in the UI. Gross."
    },
    {
      "type": "h3",
      "text": "Functions in interactive mode"
    },
    {
      "type": "p",
      "text": "One important aspect of interactive mode is that only top-level expressions are printed. If you define a function in interactive mode, the expressions that make it up are not automatically printed."
    },
    {
      "type": "code",
      "text": ">>> def foo():\n...     \"470-399 BC\"\n...\n>>> foo()\n>>>"
    },
    {
      "type": "p",
      "text": "Now that you understand that Shiny Express executes in interactive mode, you can see why our person() function doesn’t work. The UI code in the body of the person() function isn’t automatically printed because it’s not at the top level."
    },
    {
      "type": "p",
      "text": "You could fix this by calling sys.displayhook on each UI element."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nimport sys\nfrom shiny.express import ui\n\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        sys.displayhook(ui.h3(name))\n        sys.displayhook(years)\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")"
    },
    {
      "type": "p",
      "text": "OK, it works, but that’s pretty gross. Is there a better way to fix this problem?"
    },
    {
      "type": "p",
      "text": "The answer is yes, but before we get to that, let’s take a step back and restate what we’ve learned so far."
    },
    {
      "type": "ul",
      "items": [
        "You can call sys.displayhook() to tell Shiny Express to display something.",
        "Shiny Express executes app.py in interactive mode, not script mode.",
        "In interactive mode, only top-level expressions are displayed, not expressions in function bodies."
      ]
    },
    {
      "type": "p",
      "text": "Now let’s see where this approach causes problems, and how we can solve them. We’ll start with the person() function we just tried to write."
    },
    {
      "type": "h3",
      "text": "Problem: Writing UI generating functions"
    },
    {
      "type": "p",
      "text": "We want to write functions that generate UI, and we don’t want to have to call sys.displayhook() by hand."
    },
    {
      "type": "h4",
      "text": "Solution: @expressify decorator"
    },
    {
      "type": "p",
      "text": "Apply the @expressify decorator to a function to tell Shiny Express that the function body should be executed in interactive mode. Think of it as rewriting the function body so that sys.displayhook() wraps every expression."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\n@expressify\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(name)\n        years\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")"
    },
    {
      "type": "p",
      "text": "Shiny Core doesn’t need an @expressify decorator because it does not rely on interactive mode and never calls sys.displayhook anyway. Instead, UI functions are just normal functions that happen to return UI objects."
    },
    {
      "type": "h3",
      "text": "Problem: Collect UI code into a variable"
    },
    {
      "type": "p",
      "text": "Sometimes we have a need to generate UI for some purpose other than directly displaying it. For example, we might want to save it to be displayed later, or multiple times."
    },
    {
      "type": "p",
      "text": "This works OK for simple objects like strings (naturally) and even non-container UI elements—you can simply store them as variables, and that works. But in the examples above, we’re using with ui.card():, and you can’t store a with statement in a variable."
    },
    {
      "type": "code",
      "text": ">>> x = with ui.card():\n  File \"<stdin>\", line 1\n    x = with ui.card():\n        ^^^^\nSyntaxError: invalid syntax"
    },
    {
      "type": "p",
      "text": "You also cannot use with ui.card() as x: syntax, because UI context managers like ui.card() don’t yield anything, for reasons we’ll get to in a moment."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\nwith ui.card(class_=\"mt-3\") as x:\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"\n\nx\nx\nx"
    },
    {
      "type": "p",
      "text": "It looks for a moment like it worked, but no, it didn’t; instead of displaying the card three times, it displayed it once. That’s because leaving the with ui.card(): context immediately displays the entire card, and then the x is just assigned a None value, which doesn’t display anything."
    },
    {
      "type": "h4",
      "text": "Solution: ui.hold() context manager"
    },
    {
      "type": "p",
      "text": "The ui.hold() context manager allows you to collect UI code into a variable."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\nwith ui.hold() as x:\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(\"Socrates\")\n        \"470-399 BC\"\n\nx\nx\nx"
    },
    {
      "type": "p",
      "text": "In this case, it’s just a single card, but there’s no limit to how much or how little UI you can nest under ui.hold()."
    },
    {
      "type": "p",
      "text": "In Shiny Core, UI objects are just normal objects, so you can assign them to variables no differently than you would an integer or a list."
    },
    {
      "type": "h3",
      "text": "Problem: Reactively rendering UI"
    },
    {
      "type": "p",
      "text": "So far, all of the UI we’ve generated has been “static”—it’s generated once, when the page loads, and never changes. It’s pretty common in Shiny to want to generate UI in response to user input or server events."
    },
    {
      "type": "p",
      "text": "We can do this in Shiny Express by using the @render.ui decorator, which expects a function that returns a UI object. We can combine @expressify and ui.hold() to make this work. (Spoiler alert: we’re just setting up a strawman solution here, we’ll get to the “right” way in a moment.)"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, input, render, ui\n\nui.input_text(\"name\", \"Name\", \"Socrates\")\nui.input_text(\"years\", \"Years\", \"470-399 BC\")\n\n@render.ui\n@expressify\ndef person():\n    with ui.hold() as result:\n        with ui.card(class_=\"mt-3\"):\n            ui.h3(input.name())\n            input.years()\n    return result"
    },
    {
      "type": "p",
      "text": "That does work; change the name or year inputs, and the card updates. But it’s way more boilerplate than we’d like."
    },
    {
      "type": "h4",
      "text": "Solution: @render.express decorator"
    },
    {
      "type": "p",
      "text": "The @render.express decorator is a shorthand for that combination of @render.ui + @expressify + ui.hold. You can just think of it as “reactively render a chunk of Express code”."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, input, render, ui\n\nui.input_text(\"name\", \"Name\", \"Socrates\")\nui.input_text(\"years\", \"Years\", \"470-399 BC\")\n\n@render.express\ndef person():\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(input.name())\n        input.years()"
    },
    {
      "type": "p",
      "text": "It’s almost anticlimactically simple to use, considering how much explaining we had to do to get here."
    },
    {
      "type": "p",
      "text": "In Shiny Core, you should use @render.ui and skip @expressify or ui.hold()—they’re not needed. Instead, your render function would return a UI object directly."
    },
    {
      "type": "h3",
      "text": "Problem: Display causes a TypeError"
    },
    {
      "type": "p",
      "text": "When Express currently raises an error when attempting to display an object that is not a valid UI object. This can surface in suprising ways, for example, when calling a function to perform a side-effect (like logging) which returns an unknown class of object."
    },
    {
      "type": "code",
      "text": "from shiny.express import session\n\nsession.on_ended(lambda: \"Session ended!\")"
    },
    {
      "type": "code",
      "text": "TypeError: Invalid tag item type: <class 'function'>. Consider calling str() on this value before treating it as a tag item."
    },
    {
      "type": "h3",
      "text": "Solution: Assign to a variable"
    },
    {
      "type": "p",
      "text": "In Express, you can assign the result of a function call to a variable to prevent displaying it, so you can use it to work around this issue."
    },
    {
      "type": "code",
      "text": "from shiny.express import session\n\n_ = session.on_ended(lambda: \"Session ended!\")"
    },
    {
      "type": "h3",
      "text": "Summary"
    },
    {
      "type": "ul",
      "items": [
        "When writing a function that contains Shiny Express UI code, always decorate it with @expressify. This tells Python to execute the function body in interactive mode, which is necessary for the UI to be displayed.",
        "If you want to collect UI into a variable instead of displaying it, wrap it in a with ui.hold() as var_name: block.",
        "If you want to reactively render UI, decorate the function with @render.express."
      ]
    },
    {
      "type": "h2",
      "text": "Shared objects"
    },
    {
      "type": "p",
      "text": "For better performance, it’s often useful to have some code run once when the app initializes, not every time a new connection (i.e., session) is made. All of the code in a Shiny Express app.py file is re-executed every time a new connection is made, so it’s not a good place to do expensive work that only needs to be done once."
    },
    {
      "type": "p",
      "text": "Fortunately, if you move expensive code to a separate module, it will only be executed once (and objects can then be shared across sessions)."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 120\n\nfrom shiny.express import render\nimport shared\n# Runs once per session\n@render.data_frame\ndef df():\n    return shared.df\n\n## file: shared.py\n# Runs once per startup\nimport pandas as pd\nfrom pathlib import Path\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\")\n## file: data.csv\ncol1,col2\n1,2\n3,4"
    },
    {
      "type": "p",
      "text": "In Shiny Core, code outside of the server function scope runs once per startup (not per user session). See the code below for the equivalent Shiny Core app."
    },
    {
      "type": "code",
      "text": "from shiny import App, render, ui\nimport pandas as pd\nfrom pathlib import Path\n\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\") # Read in once\n\napp_ui = ui.page_fixed(ui.output_data_frame(\"dat\"))\n\ndef server(input, output, session):\n    @render.data_frame\n    def dat():\n        # Returned to each session\n        return df\n\napp = App(app_ui, server)"
    },
    {
      "type": "p",
      "text": "It’s also possible to share reactive objects across sessions. This can be potentially dangerous since one users activity could impact another’s, but also quite useful in combination reactive.file_reader and reactive.poll to create a reactive data source that’s only polled once, no matter how many users are connected."
    },
    {
      "type": "h3",
      "text": "Sessions"
    },
    {
      "type": "p",
      "text": "Shiny apps have an object that represent a particular user’s session. This object is useful for a variety of more advanced tasks like sending messages to the client and serving up session-specific data. In Express, you’ll need to import session from shiny.express and only use it inside a reactive function, like a @reactive.effect:"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 75\nfrom shiny import reactive\nfrom shiny.express import session, ui\n\n@reactive.effect\nasync def _():\n    x = {\"message\": \"Hello from Python!\"}\n    await session.send_custom_message(\"send_alert\", x)\n\nui.tags.script(\n    \"\"\"\n    Shiny.addCustomMessageHandler(\"send_alert\", function(x) {\n        document.body.innerHTML = x.message;\n    });\n    \"\"\"\n)"
    },
    {
      "type": "p",
      "text": "In Shiny Core, the session object is available through server function, and can be used anywhere in the server function scope."
    }
  ],
  "code_examples": [
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Immanuel Kant\")\n    \"1724-1804\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(name)\n        years\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")",
    "sys.displayhook(\"470-399 BC\")",
    "sys.displayhook(\"470-399 BC\")",
    ">>> def foo():\n...     \"470-399 BC\"\n...\n>>> foo()\n>>>",
    ">>> def foo():\n...     \"470-399 BC\"\n...\n>>> foo()\n>>>",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nimport sys\nfrom shiny.express import ui\n\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        sys.displayhook(ui.h3(name))\n        sys.displayhook(years)\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\n@expressify\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(name)\n        years\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")",
    ">>> x = with ui.card():\n  File \"<stdin>\", line 1\n    x = with ui.card():\n        ^^^^\nSyntaxError: invalid syntax",
    ">>> x = with ui.card():\n  File \"<stdin>\", line 1\n    x = with ui.card():\n        ^^^^\nSyntaxError: invalid syntax",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\nwith ui.card(class_=\"mt-3\") as x:\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"\n\nx\nx\nx",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\nwith ui.hold() as x:\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(\"Socrates\")\n        \"470-399 BC\"\n\nx\nx\nx",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, input, render, ui\n\nui.input_text(\"name\", \"Name\", \"Socrates\")\nui.input_text(\"years\", \"Years\", \"470-399 BC\")\n\n@render.ui\n@expressify\ndef person():\n    with ui.hold() as result:\n        with ui.card(class_=\"mt-3\"):\n            ui.h3(input.name())\n            input.years()\n    return result",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, input, render, ui\n\nui.input_text(\"name\", \"Name\", \"Socrates\")\nui.input_text(\"years\", \"Years\", \"470-399 BC\")\n\n@render.express\ndef person():\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(input.name())\n        input.years()",
    "from shiny.express import session\n\nsession.on_ended(lambda: \"Session ended!\")",
    "from shiny.express import session\n\nsession.on_ended(lambda: \"Session ended!\")",
    "TypeError: Invalid tag item type: <class 'function'>. Consider calling str() on this value before treating it as a tag item.",
    "TypeError: Invalid tag item type: <class 'function'>. Consider calling str() on this value before treating it as a tag item.",
    "from shiny.express import session\n\n_ = session.on_ended(lambda: \"Session ended!\")",
    "from shiny.express import session\n\n_ = session.on_ended(lambda: \"Session ended!\")",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 120\n\nfrom shiny.express import render\nimport shared\n# Runs once per session\n@render.data_frame\ndef df():\n    return shared.df\n\n## file: shared.py\n# Runs once per startup\nimport pandas as pd\nfrom pathlib import Path\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\")\n## file: data.csv\ncol1,col2\n1,2\n3,4",
    "from shiny import App, render, ui\nimport pandas as pd\nfrom pathlib import Path\n\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\") # Read in once\n\napp_ui = ui.page_fixed(ui.output_data_frame(\"dat\"))\n\ndef server(input, output, session):\n    @render.data_frame\n    def dat():\n        # Returned to each session\n        return df\n\napp = App(app_ui, server)",
    "from shiny import App, render, ui\nimport pandas as pd\nfrom pathlib import Path\n\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\") # Read in once\n\napp_ui = ui.page_fixed(ui.output_data_frame(\"dat\"))\n\ndef server(input, output, session):\n    @render.data_frame\n    def dat():\n        # Returned to each session\n        return df\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 75\nfrom shiny import reactive\nfrom shiny.express import session, ui\n\n@reactive.effect\nasync def _():\n    x = {\"message\": \"Hello from Python!\"}\n    await session.send_custom_message(\"send_alert\", x)\n\nui.tags.script(\n    \"\"\"\n    Shiny.addCustomMessageHandler(\"send_alert\", function(x) {\n        document.body.innerHTML = x.message;\n    });\n    \"\"\"\n)"
  ],
  "toc": [
    {
      "title": "Programming UI",
      "url": "docs/#programming-ui"
    },
    {
      "title": "Interactive mode vs script mode",
      "url": "docs/#interactive-mode-vs-script-mode"
    },
    {
      "title": "Functions in interactive mode",
      "url": "docs/#functions-in-interactive-mode"
    },
    {
      "title": "Problem: Writing UI generating functions",
      "url": "docs/#problem-writing-ui-generating-functions"
    },
    {
      "title": "Problem: Collect UI code into a variable",
      "url": "docs/#problem-collect-ui-code-into-a-variable"
    },
    {
      "title": "Problem: Reactively rendering UI",
      "url": "docs/#problem-reactively-rendering-ui"
    },
    {
      "title": "Problem: Display causes a TypeError",
      "url": "docs/#problem-display-causes-a-typeerror"
    },
    {
      "title": "Solution: Assign to a variable",
      "url": "docs/#solution-assign-to-a-variable"
    },
    {
      "title": "Summary",
      "url": "docs/#summary"
    },
    {
      "title": "Shared objects",
      "url": "docs/#shared-objects"
    },
    {
      "title": "Sessions",
      "url": "docs/#sessions"
    },
    {
      "title": "📌 Essentials"
    },
    {
      "title": "Overview",
      "url": "docs/overview.html"
    },
    {
      "title": "User interfaces",
      "url": "docs/user-interfaces.html"
    },
    {
      "title": "🤖 Generative AI"
    },
    {
      "title": "Get inspired",
      "url": "docs/genai-inspiration.html"
    },
    {
      "title": "Chatbots",
      "url": "docs/genai-chatbots.html"
    },
    {
      "title": "Streaming",
      "url": "docs/genai-stream.html"
    },
    {
      "title": "Tool calling",
      "url": "docs/genai-tools.html"
    },
    {
      "title": "Structured data",
      "url": "docs/genai-structured-data.html"
    },
    {
      "title": "RAG",
      "url": "docs/genai-rag.html"
    },
    {
      "title": "🎨 User interfaces"
    },
    {
      "title": "Overview",
      "url": "docs/ui-overview.html"
    },
    {
      "title": "Jupyter Widgets",
      "url": "docs/jupyter-widgets.html"
    },
    {
      "title": "Dynamic UI",
      "url": "docs/ui-dynamic.html"
    },
    {
      "title": "UI as HTML",
      "url": "docs/ui-html.html"
    },
    {
      "title": "Customizing UI",
      "url": "docs/ui-customize.html"
    },
    {
      "title": "⚡ Reactivity"
    },
    {
      "title": "Foundations",
      "url": "docs/reactive-foundations.html"
    },
    {
      "title": "Patterns",
      "url": "docs/reactive-patterns.html"
    },
    {
      "title": "Mutable objects",
      "url": "docs/reactive-mutable.html"
    },
    {
      "title": "📝 Syntax modes"
    },
    {
      "title": "Express vs. Core",
      "url": "docs/express-vs-core.html"
    },
    {
      "title": "Choosing a syntax",
      "url": "docs/express-or-core.html"
    },
    {
      "title": "Express in depth",
      "url": "docs/express-in-depth.html"
    },
    {
      "title": "Transition to Core",
      "url": "docs/express-to-core.html"
    },
    {
      "title": "📦 Modules"
    },
    {
      "title": "Shiny Modules",
      "url": "docs/modules.html"
    },
    {
      "title": "Module Communication",
      "url": "docs/module-communication.html"
    },
    {
      "title": "🧪 Testing"
    },
    {
      "title": "Unit testing",
      "url": "docs/unit-testing.html"
    },
    {
      "title": "End-to-End Testing Your App",
      "url": "docs/end-to-end-testing.html"
    },
    {
      "title": "🏗️ Extending"
    },
    {
      "title": "Custom JavaScript component",
      "url": "docs/custom-component-one-off.html"
    },
    {
      "title": "Custom components package",
      "url": "docs/custom-components-pkg.html"
    },
    {
      "title": "📊 Comparisons"
    },
    {
      "title": "Streamlit",
      "url": "docs/comp-streamlit.html"
    },
    {
      "title": "Shiny for R",
      "url": "docs/comp-r-shiny.html"
    },
    {
      "title": "🧩 Miscellaneous"
    },
    {
      "title": "Non-blocking operations",
      "url": "docs/nonblocking.html"
    },
    {
      "title": "Routing",
      "url": "docs/routing.html"
    }
  ]
}