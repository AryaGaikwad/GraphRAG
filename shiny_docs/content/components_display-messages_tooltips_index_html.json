{
  "metadata": {
    "title": "Tooltips – Shiny for Python",
    "description": "",
    "url": "components/display-messages/tooltips/index.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Display Messages",
        "Tooltips"
      ]
    },
    {
      "type": "h1",
      "text": "Tooltips"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)"
    },
    {
      "type": "ul",
      "items": [
        "Express",
        "Core"
      ]
    },
    {
      "type": "code",
      "text": "from shiny.express import input, render, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):  \n    ui.input_action_button(\"btn\", \"A button with a tooltip\")  \n    \"The tooltip message\"  \n\n@render.text\ndef btn_tooltip_state():\n    return f\"Tooltip state: {input.btn_tooltip()}\"  "
    },
    {
      "type": "code",
      "text": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)"
    },
    {
      "type": "h2",
      "text": "Relevant Functions"
    },
    {
      "type": "ul",
      "items": [
        "ui.tooltip ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)",
        "ui.update_tooltip ui.update_tooltip(id, *args, show=None, session=None)"
      ]
    },
    {
      "type": "p",
      "text": "ui.tooltip ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)"
    },
    {
      "type": "p",
      "text": "ui.update_tooltip ui.update_tooltip(id, *args, show=None, session=None)"
    },
    {
      "type": "h2",
      "text": "Details"
    },
    {
      "type": "p",
      "text": "A tooltip is a box that appears next to an element when a user hovers over the element. To add a tooltip to a UI component, wrap the component in ui.tooltip(). Then pass ui.tooltip() one or more elements to display, such as a simple string that contains a message."
    },
    {
      "type": "p",
      "text": "Optionally assign the tooltip an id to trigger reactions when the tooltip becomes visible or to programmatically update the contents of the tooltip as your user navigates the app. A boolean that describes whether or not the tooltip is visible will be accessible as a reactive variable within the server function as input.<id>()."
    },
    {
      "type": "p",
      "text": "Control the placement of the tooltip relative to the item it highlights with the placement argument. placement defaults to 'auto', but can be set to one of 'top', 'bottom', 'left', or 'right'."
    },
    {
      "type": "h3",
      "text": "Accessibility of Tooltip Triggers"
    },
    {
      "type": "p",
      "text": "Because the user needs to interact with the trigger element to see the tooltip, it’s best practice to use an element that is typically accessible via keyboard interactions, like a button or a link."
    },
    {
      "type": "p",
      "text": "If you use a non-interactive element, like a <span> or text, tooltip() will automatically add the tabindex=\"0\" attribute to the trigger element to make sure that users can reach the element with the keyboard. This means that in most cases you can use any element you want as the trigger."
    },
    {
      "type": "p",
      "text": "One place where it’s important to consider the accessibility of the trigger is when using an icon without any accompanying text. In these cases, many icon elements are created with the assumption that the icon is decorative, which will make it inaccessible to users of assistive technologies."
    },
    {
      "type": "p",
      "text": "When using an icon as the primary trigger, ensure that the icon does not have aria-hidden=\"true\" or role=\"presentation\" attributes. Icon packages typically provide a way to specify a title for the icon, as well as a way to specify that the icon is not decorative. The title should be a short description of the purpose of the trigger, rather than a description of the icon itself."
    },
    {
      "type": "p",
      "text": "For example:"
    },
    {
      "type": "code",
      "text": "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(&quot;info-circle&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)"
    },
    {
      "type": "code",
      "text": "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(&quot;info-circle&quot;, a11y = &quot;sem&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\n\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)"
    },
    {
      "type": "p",
      "text": "Compare tooltips to popovers, which are a similar device for organizing the layout of a Shiny app."
    },
    {
      "type": "p",
      "text": "See Also: Modal messages and notications provide a similar, but alternative way to display information to the user."
    },
    {
      "type": "h2",
      "text": "Variations"
    },
    {
      "type": "h3",
      "text": "Update a tooltip message"
    },
    {
      "type": "p",
      "text": "Call ui.update_tooltip() to update the message of a tooltip with a given id."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)"
    },
    {
      "type": "ul",
      "items": [
        "Express",
        "Core"
      ]
    },
    {
      "type": "code",
      "text": "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):\n    ui.input_action_button(\"btn\", \"A button with a tooltip\")\n    \"The tooltip message\"\n\nui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\")\n\n@reactive.effect()\n@reactive.event(input.tooltip_msg)\ndef update_tooltip_msg():\n    ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)"
    },
    {
      "type": "code",
      "text": "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)"
    }
  ],
  "code_examples": [
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
    "from shiny.express import input, render, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):  \n    ui.input_action_button(\"btn\", \"A button with a tooltip\")  \n    \"The tooltip message\"  \n\n@render.text\ndef btn_tooltip_state():\n    return f\"Tooltip state: {input.btn_tooltip()}\"  ",
    "from shiny.express import input, render, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):  \n    ui.input_action_button(\"btn\", \"A button with a tooltip\")  \n    \"The tooltip message\"  \n\n@render.text\ndef btn_tooltip_state():\n    return f\"Tooltip state: {input.btn_tooltip()}\"  ",
    "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
    "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
    "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(&quot;info-circle&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
    "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(&quot;info-circle&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
    "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(&quot;info-circle&quot;, a11y = &quot;sem&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\n\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
    "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(&quot;info-circle&quot;, a11y = &quot;sem&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\n\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)",
    "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):\n    ui.input_action_button(\"btn\", \"A button with a tooltip\")\n    \"The tooltip message\"\n\nui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\")\n\n@reactive.effect()\n@reactive.event(input.tooltip_msg)\ndef update_tooltip_msg():\n    ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)",
    "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):\n    ui.input_action_button(\"btn\", \"A button with a tooltip\")\n    \"The tooltip message\"\n\nui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\")\n\n@reactive.effect()\n@reactive.event(input.tooltip_msg)\ndef update_tooltip_msg():\n    ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)",
    "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)",
    "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)"
  ],
  "toc": [
    {
      "title": "COMPONENTS",
      "url": "components/"
    },
    {
      "title": "Inputs"
    },
    {
      "title": "Action Button",
      "url": "components/inputs/action-button/index.html"
    },
    {
      "title": "Action Link",
      "url": "components/inputs/action-link/index.html"
    },
    {
      "title": "Checkbox",
      "url": "components/inputs/checkbox/index.html"
    },
    {
      "title": "Checkbox Group",
      "url": "components/inputs/checkbox-group/index.html"
    },
    {
      "title": "Date Range Selector",
      "url": "components/inputs/date-range-selector/index.html"
    },
    {
      "title": "Date Selector",
      "url": "components/inputs/date-selector/index.html"
    },
    {
      "title": "File Input",
      "url": "components/inputs/file/index.html"
    },
    {
      "title": "Numeric Input",
      "url": "components/inputs/numeric-input/index.html"
    },
    {
      "title": "Password Field",
      "url": "components/inputs/password-field/index.html"
    },
    {
      "title": "Radio Buttons",
      "url": "components/inputs/radio-buttons/index.html"
    },
    {
      "title": "Select (Single)",
      "url": "components/inputs/select-single/index.html"
    },
    {
      "title": "Select (Multiple)",
      "url": "components/inputs/select-multiple/index.html"
    },
    {
      "title": "Selectize (Single)",
      "url": "components/inputs/selectize-single/index.html"
    },
    {
      "title": "Selectize (Multiple)",
      "url": "components/inputs/selectize-multiple/index.html"
    },
    {
      "title": "Slider",
      "url": "components/inputs/slider/index.html"
    },
    {
      "title": "Slider Range",
      "url": "components/inputs/slider-range/index.html"
    },
    {
      "title": "Switch",
      "url": "components/inputs/switch/index.html"
    },
    {
      "title": "Text Area",
      "url": "components/inputs/text-area/index.html"
    },
    {
      "title": "Text Box",
      "url": "components/inputs/text-box/index.html"
    },
    {
      "title": "Outputs"
    },
    {
      "title": "Data Grid",
      "url": "components/outputs/data-grid/index.html"
    },
    {
      "title": "Data Table",
      "url": "components/outputs/data-table/index.html"
    },
    {
      "title": "Image",
      "url": "components/outputs/image/index.html"
    },
    {
      "title": "Map (ipyleaflet)",
      "url": "components/outputs/map-ipyleaflet/index.html"
    },
    {
      "title": "Plot (Matplotlib)",
      "url": "components/outputs/plot-matplotlib/index.html"
    },
    {
      "title": "Plot (Plotly)",
      "url": "components/outputs/plot-plotly/index.html"
    },
    {
      "title": "Plot (Seaborn)",
      "url": "components/outputs/plot-seaborn/index.html"
    },
    {
      "title": "Text",
      "url": "components/outputs/text/index.html"
    },
    {
      "title": "UI",
      "url": "components/outputs/ui/index.html"
    },
    {
      "title": "Value Box",
      "url": "components/outputs/value-box/index.html"
    },
    {
      "title": "Verbatim Text",
      "url": "components/outputs/verbatim-text/index.html"
    },
    {
      "title": "Display Messages"
    },
    {
      "title": "Chat",
      "url": "components/display-messages/chat/index.html"
    },
    {
      "title": "Modal",
      "url": "components/display-messages/modal/index.html"
    },
    {
      "title": "Notifications",
      "url": "components/display-messages/notifications/index.html"
    },
    {
      "title": "Progress Bar",
      "url": "components/display-messages/progress-bar/index.html"
    },
    {
      "title": "Tooltips",
      "url": "components/display-messages/tooltips/index.html"
    }
  ]
}