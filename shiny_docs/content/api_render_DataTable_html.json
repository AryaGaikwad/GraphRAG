{
  "metadata": {
    "title": "render.datatable – Shiny for Python",
    "description": "",
    "url": "api/render.DataTable.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Rendering outputs",
        "render.DataTable"
      ]
    },
    {
      "type": "h1",
      "text": "render.DataTable"
    },
    {
      "type": "code",
      "text": "render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)"
    },
    {
      "type": "p",
      "text": "Holds the data and options for a data_frame output, for a spreadsheet-like view."
    },
    {
      "type": "p",
      "text": "This class is used to wrap the returned data frame from a @render.data_frame render function. It allows you to specify options for the data table, such as the width and height of the table, whether to show a summary message, whether to show filter inputs, whether the cells are editable, and how the cells are selected."
    },
    {
      "type": "p",
      "text": "While there are currently no execution or parameter differences between DataGrid and DataTable other than CSS styling in the browser, the two classes are kept separate to allow for future extensibility."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A pandas, polars, or eager narwhals compatible DataFrame object."
    },
    {
      "type": "p",
      "text": "A maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. The default is fit-content, which sets the table’s width according to its contents. Set this to 100% to use the maximum available horizontal space."
    },
    {
      "type": "p",
      "text": "A maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the table body will scroll. Set the height to None to allow the table to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser)."
    },
    {
      "type": "p",
      "text": "If True (the default), shows a message like “Viewing rows 1 through 10 of 20” below the grid when not all of the rows are being shown. If False, the message is not displayed. You can also specify a string template to customize the message, containing {start}, {end}, and {total} tokens. For example: \"Viendo filas {start} a {end} de {total}\"."
    },
    {
      "type": "p",
      "text": "If True, shows a row of filter inputs below the headers, one for each column."
    },
    {
      "type": "p",
      "text": "If True, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid."
    },
    {
      "type": "p",
      "text": "Single string or a set/list/tuple of string values to define possible ways to select data within the data frame. Supported values: * Use \"none\" to disable any cell selections or editing. * Use \"row\" to allow a single row to be selected at a time. * Use \"rows\" to allow multiple rows to be selected by clicking on them individually. Resolution rules: * If \"none\" is supplied, all other values will be ignored. * If both \"row\" and \"rows\" are supplied, \"row\" will be dropped (supporting \"rows\")."
    },
    {
      "type": "p",
      "text": "A style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If styles=None, no styling will be applied. Style info object key/value description: * location: This value \"body\" and is not required. * rows: The row numbers to which the style should be applied. If None, the style will be applied to all rows. * cols: The column numbers to which the style should be applied. If None, the style will be applied to all columns. * style: A dictionary of CSS properties and values to apply to the selected rows and columns. Traditional kebab-cased CSS property names (e.g. background-color) will work in addition to camelCased CSS property names (e.g. backgroundColor). * class: A string of CSS class names to apply to the selected rows and columns. If both style and class are missing or None, nothing will be applied. If both rows and cols are missing or None, the style will be applied to the complete data frame."
    },
    {
      "type": "p",
      "text": "Deprecated. Please use mode={row_selection_mode}_row instead."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "An object suitable for being returned from a @render.data_frame-decorated output function."
    },
    {
      "type": "h2",
      "text": "See Also"
    },
    {
      "type": "ul",
      "items": [
        "output_data_frame - The UI placeholder for a data frame output.",
        "data_frame - The render method for data frames.",
        "DataTable - A more grid view of the data."
      ]
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n    ),\n    ui.input_select(\n        \"selection_mode\",\n        \"Selection mode\",\n        {\n            \"none\": \"(None)\",\n            \"row\": \"Single row\",\n            \"rows\": \"Multiple rows\",\n        },\n        selected=\"rows\",\n    ),\n    ui.input_switch(\"filters\", \"Filters\", True),\n    ui.input_switch(\"editable\", \"Editable\", True),\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\")),\n            ui.output_data_frame(\"grid\"),\n        ),\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\")),\n            ui.output_data_frame(\"table\"),\n        ),\n        width=1 / 2,\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    df: reactive.value[pd.DataFrame] = reactive.value(\n        sns.load_dataset(\"anagrams\").iloc[:, 1:]\n    )\n\n    def update_data_with_patch(patch):\n        df_copy = df().copy()\n        fn = str if patch[\"column_index\"] == 0 else int\n        df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n        df.set(df_copy)\n\n    height = 350\n    width = \"fit-content\"\n\n    @render.data_frame\n    def grid():\n        return render.DataGrid(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @grid.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n    @render.data_frame\n    def table():\n        return render.DataTable(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @table.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\napp_ui = ui.page_fillable(\n    ui.h2(\"Data Frame with Styles applied to 4 cells\"),\n    ui.output_data_frame(\"my_df\"),\n    ui.hr(),\n    ui.tags.style(\n        ui.HTML(\n            \"\"\"\n        .posit-bg {\n            background-color: #242a26 ;\n        }\n        .posit-blue-bg {\n            background-color: #447099 ;\n        }\n        .posit-orange-bg {\n            background-color: #ED642F ;\n        }\n        \"\"\"\n        )\n    ),\n    ui.h2(\n        \"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\")\n    ),\n    ui.output_data_frame(\"hi_df\"),\n)\n\n\ndef server(input: Inputs):\n    @render.data_frame\n    def my_df():\n        return render.DataGrid(\n            df,\n            styles=green_styles,\n        )\n\n    @render.data_frame\n    def hi_df():\n        return render.DataGrid(\n            hi_pd,\n            styles=hi_styles,\n        )\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "to_payload"
    },
    {
      "type": "code",
      "text": "render.DataTable.to_payload()"
    },
    {
      "type": "p",
      "text": "Converts the DataTable object to a payload dictionary."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The payload dictionary representing the DataTable object."
    }
  ],
  "code_examples": [
    "render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
    "render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n    ),\n    ui.input_select(\n        \"selection_mode\",\n        \"Selection mode\",\n        {\n            \"none\": \"(None)\",\n            \"row\": \"Single row\",\n            \"rows\": \"Multiple rows\",\n        },\n        selected=\"rows\",\n    ),\n    ui.input_switch(\"filters\", \"Filters\", True),\n    ui.input_switch(\"editable\", \"Editable\", True),\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\")),\n            ui.output_data_frame(\"grid\"),\n        ),\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\")),\n            ui.output_data_frame(\"table\"),\n        ),\n        width=1 / 2,\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    df: reactive.value[pd.DataFrame] = reactive.value(\n        sns.load_dataset(\"anagrams\").iloc[:, 1:]\n    )\n\n    def update_data_with_patch(patch):\n        df_copy = df().copy()\n        fn = str if patch[\"column_index\"] == 0 else int\n        df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n        df.set(df_copy)\n\n    height = 350\n    width = \"fit-content\"\n\n    @render.data_frame\n    def grid():\n        return render.DataGrid(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @grid.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n    @render.data_frame\n    def table():\n        return render.DataTable(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @table.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n\napp = App(app_ui, server)\n\n",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\napp_ui = ui.page_fillable(\n    ui.h2(\"Data Frame with Styles applied to 4 cells\"),\n    ui.output_data_frame(\"my_df\"),\n    ui.hr(),\n    ui.tags.style(\n        ui.HTML(\n            \"\"\"\n        .posit-bg {\n            background-color: #242a26 ;\n        }\n        .posit-blue-bg {\n            background-color: #447099 ;\n        }\n        .posit-orange-bg {\n            background-color: #ED642F ;\n        }\n        \"\"\"\n        )\n    ),\n    ui.h2(\n        \"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\")\n    ),\n    ui.output_data_frame(\"hi_df\"),\n)\n\n\ndef server(input: Inputs):\n    @render.data_frame\n    def my_df():\n        return render.DataGrid(\n            df,\n            styles=green_styles,\n        )\n\n    @render.data_frame\n    def hi_df():\n        return render.DataGrid(\n            hi_pd,\n            styles=hi_styles,\n        )\n\n\napp = App(app_ui, server)\n\n",
    "render.DataTable.to_payload()",
    "render.DataTable.to_payload()"
  ],
  "toc": [
    {
      "title": "render.DataTable",
      "url": "api/#shiny.render.DataTable"
    },
    {
      "title": "Parameters",
      "url": "api/#parameters"
    },
    {
      "title": "Returns",
      "url": "api/#returns"
    },
    {
      "title": "See Also",
      "url": "api/#see-also"
    },
    {
      "title": "Examples",
      "url": "api/#examples"
    },
    {
      "title": "Methods",
      "url": "api/#methods"
    },
    {
      "title": "to_payload",
      "url": "api/#shiny.render.DataTable.to_payload"
    },
    {
      "title": "Shiny Core API",
      "url": "api/core/index.html"
    },
    {
      "title": "Page containers"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_navbar",
      "url": "api/core/ui.page_navbar.html"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_fillable",
      "url": "api/core/ui.page_fillable.html"
    },
    {
      "title": "ui.page_fluid",
      "url": "api/core/ui.page_fluid.html"
    },
    {
      "title": "ui.page_fixed",
      "url": "api/core/ui.page_fixed.html"
    },
    {
      "title": "ui.page_bootstrap",
      "url": "api/core/ui.page_bootstrap.html"
    },
    {
      "title": "ui.page_auto",
      "url": "api/core/ui.page_auto.html"
    },
    {
      "title": "ui.page_output",
      "url": "api/core/ui.page_output.html"
    },
    {
      "title": "UI Layouts"
    },
    {
      "title": "ui.sidebar",
      "url": "api/core/ui.sidebar.html"
    },
    {
      "title": "ui.layout_sidebar",
      "url": "api/core/ui.layout_sidebar.html"
    },
    {
      "title": "ui.layout_columns",
      "url": "api/core/ui.layout_columns.html"
    },
    {
      "title": "ui.layout_column_wrap",
      "url": "api/core/ui.layout_column_wrap.html"
    },
    {
      "title": "ui.card",
      "url": "api/core/ui.card.html"
    },
    {
      "title": "ui.card_header",
      "url": "api/core/ui.card_header.html"
    },
    {
      "title": "ui.card_footer",
      "url": "api/core/ui.card_footer.html"
    },
    {
      "title": "ui.popover",
      "url": "api/core/ui.popover.html"
    },
    {
      "title": "ui.tooltip",
      "url": "api/core/ui.tooltip.html"
    },
    {
      "title": "ui.accordion",
      "url": "api/core/ui.accordion.html"
    },
    {
      "title": "ui.accordion_panel",
      "url": "api/core/ui.accordion_panel.html"
    },
    {
      "title": "ui.column",
      "url": "api/core/ui.column.html"
    },
    {
      "title": "ui.row",
      "url": "api/core/ui.row.html"
    },
    {
      "title": "UI Inputs"
    },
    {
      "title": "ui.input_select",
      "url": "api/core/ui.input_select.html"
    },
    {
      "title": "ui.input_selectize",
      "url": "api/core/ui.input_selectize.html"
    },
    {
      "title": "ui.input_slider",
      "url": "api/core/ui.input_slider.html"
    },
    {
      "title": "ui.input_dark_mode",
      "url": "api/core/ui.input_dark_mode.html"
    },
    {
      "title": "ui.input_date",
      "url": "api/core/ui.input_date.html"
    },
    {
      "title": "ui.input_date_range",
      "url": "api/core/ui.input_date_range.html"
    },
    {
      "title": "ui.input_checkbox",
      "url": "api/core/ui.input_checkbox.html"
    },
    {
      "title": "ui.input_checkbox_group",
      "url": "api/core/ui.input_checkbox_group.html"
    },
    {
      "title": "ui.input_switch",
      "url": "api/core/ui.input_switch.html"
    },
    {
      "title": "ui.input_radio_buttons",
      "url": "api/core/ui.input_radio_buttons.html"
    },
    {
      "title": "ui.input_numeric",
      "url": "api/core/ui.input_numeric.html"
    },
    {
      "title": "ui.input_text",
      "url": "api/core/ui.input_text.html"
    },
    {
      "title": "ui.input_text_area",
      "url": "api/core/ui.input_text_area.html"
    },
    {
      "title": "ui.input_password",
      "url": "api/core/ui.input_password.html"
    },
    {
      "title": "ui.input_action_button",
      "url": "api/core/ui.input_action_button.html"
    },
    {
      "title": "ui.input_action_link",
      "url": "api/core/ui.input_action_link.html"
    },
    {
      "title": "ui.input_task_button",
      "url": "api/core/ui.input_task_button.html"
    },
    {
      "title": "Value boxes"
    },
    {
      "title": "ui.value_box",
      "url": "api/core/ui.value_box.html"
    },
    {
      "title": "ui.value_box_theme",
      "url": "api/core/ui.value_box_theme.html"
    },
    {
      "title": "ui.showcase_bottom",
      "url": "api/core/ui.showcase_bottom.html"
    },
    {
      "title": "ui.showcase_left_center",
      "url": "api/core/ui.showcase_left_center.html"
    },
    {
      "title": "ui.showcase_top_right",
      "url": "api/core/ui.showcase_top_right.html"
    },
    {
      "title": "Navigation (tab) panels"
    },
    {
      "title": "ui.nav_panel",
      "url": "api/core/ui.nav_panel.html"
    },
    {
      "title": "ui.nav_spacer",
      "url": "api/core/ui.nav_spacer.html"
    },
    {
      "title": "ui.nav_menu",
      "url": "api/core/ui.nav_menu.html"
    },
    {
      "title": "ui.nav_control",
      "url": "api/core/ui.nav_control.html"
    },
    {
      "title": "ui.navset_bar",
      "url": "api/core/ui.navset_bar.html"
    },
    {
      "title": "ui.navset_tab",
      "url": "api/core/ui.navset_tab.html"
    },
    {
      "title": "ui.navset_pill",
      "url": "api/core/ui.navset_pill.html"
    },
    {
      "title": "ui.navset_underline",
      "url": "api/core/ui.navset_underline.html"
    },
    {
      "title": "ui.navset_card_tab",
      "url": "api/core/ui.navset_card_tab.html"
    },
    {
      "title": "ui.navset_card_pill",
      "url": "api/core/ui.navset_card_pill.html"
    },
    {
      "title": "ui.navset_card_underline",
      "url": "api/core/ui.navset_card_underline.html"
    },
    {
      "title": "ui.navset_pill_list",
      "url": "api/core/ui.navset_pill_list.html"
    },
    {
      "title": "ui.navset_hidden",
      "url": "api/core/ui.navset_hidden.html"
    },
    {
      "title": "ui.navbar_options",
      "url": "api/core/ui.navbar_options.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "ui.panel_absolute",
      "url": "api/core/ui.panel_absolute.html"
    },
    {
      "title": "ui.panel_fixed",
      "url": "api/core/ui.panel_fixed.html"
    },
    {
      "title": "ui.panel_conditional",
      "url": "api/core/ui.panel_conditional.html"
    },
    {
      "title": "ui.panel_title",
      "url": "api/core/ui.panel_title.html"
    },
    {
      "title": "ui.panel_well",
      "url": "api/core/ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "ui.input_file",
      "url": "api/core/ui.input_file.html"
    },
    {
      "title": "ui.download_button",
      "url": "api/core/ui.download_button.html"
    },
    {
      "title": "ui.download_link",
      "url": "api/core/ui.download_link.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "ui.Chat",
      "url": "api/core/ui.Chat.html"
    },
    {
      "title": "ui.chat_ui",
      "url": "api/core/ui.chat_ui.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "ui.MarkdownStream",
      "url": "api/core/ui.MarkdownStream.html"
    },
    {
      "title": "ui.output_markdown_stream",
      "url": "api/core/ui.output_markdown_stream.html"
    },
    {
      "title": "Custom UI"
    },
    {
      "title": "ui.Theme",
      "url": "api/core/ui.Theme.html"
    },
    {
      "title": "ui.HTML",
      "url": "api/core/ui.HTML.html"
    },
    {
      "title": "ui.TagList",
      "url": "api/core/ui.TagList.html"
    },
    {
      "title": "ui.tags",
      "url": "api/core/ui.tags.html"
    },
    {
      "title": "ui.markdown",
      "url": "api/core/ui.markdown.html"
    },
    {
      "title": "ui.include_css",
      "url": "api/core/ui.include_css.html"
    },
    {
      "title": "ui.include_js",
      "url": "api/core/ui.include_js.html"
    },
    {
      "title": "ui.insert_ui",
      "url": "api/core/ui.insert_ui.html"
    },
    {
      "title": "ui.remove_ui",
      "url": "api/core/ui.remove_ui.html"
    },
    {
      "title": "ui.busy_indicators.use",
      "url": "api/core/ui.busy_indicators.use.html"
    },
    {
      "title": "ui.busy_indicators.options",
      "url": "api/core/ui.busy_indicators.options.html"
    },
    {
      "title": "ui.fill.as_fillable_container",
      "url": "api/core/ui.fill.as_fillable_container.html"
    },
    {
      "title": "ui.fill.as_fill_item",
      "url": "api/core/ui.fill.as_fill_item.html"
    },
    {
      "title": "ui.fill.remove_all_fill",
      "url": "api/core/ui.fill.remove_all_fill.html"
    },
    {
      "title": "ui.css.as_css_unit",
      "url": "api/core/ui.css.as_css_unit.html"
    },
    {
      "title": "ui.css.as_css_padding",
      "url": "api/core/ui.css.as_css_padding.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "ui.update_select",
      "url": "api/core/ui.update_select.html"
    },
    {
      "title": "ui.update_selectize",
      "url": "api/core/ui.update_selectize.html"
    },
    {
      "title": "ui.update_slider",
      "url": "api/core/ui.update_slider.html"
    },
    {
      "title": "ui.update_dark_mode",
      "url": "api/core/ui.update_dark_mode.html"
    },
    {
      "title": "ui.update_date",
      "url": "api/core/ui.update_date.html"
    },
    {
      "title": "ui.update_date_range",
      "url": "api/core/ui.update_date_range.html"
    },
    {
      "title": "ui.update_checkbox",
      "url": "api/core/ui.update_checkbox.html"
    },
    {
      "title": "ui.update_checkbox_group",
      "url": "api/core/ui.update_checkbox_group.html"
    },
    {
      "title": "ui.update_switch",
      "url": "api/core/ui.update_switch.html"
    },
    {
      "title": "ui.update_radio_buttons",
      "url": "api/core/ui.update_radio_buttons.html"
    },
    {
      "title": "ui.update_numeric",
      "url": "api/core/ui.update_numeric.html"
    },
    {
      "title": "ui.update_text",
      "url": "api/core/ui.update_text.html"
    },
    {
      "title": "ui.update_text_area",
      "url": "api/core/ui.update_text_area.html"
    },
    {
      "title": "ui.update_navs",
      "url": "api/core/ui.update_navs.html"
    },
    {
      "title": "ui.update_action_button",
      "url": "api/core/ui.update_action_button.html"
    },
    {
      "title": "ui.update_action_link",
      "url": "api/core/ui.update_action_link.html"
    },
    {
      "title": "ui.update_task_button",
      "url": "api/core/ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "ui.update_sidebar",
      "url": "api/core/ui.update_sidebar.html"
    },
    {
      "title": "ui.update_tooltip",
      "url": "api/core/ui.update_tooltip.html"
    },
    {
      "title": "ui.update_popover",
      "url": "api/core/ui.update_popover.html"
    },
    {
      "title": "ui.update_accordion",
      "url": "api/core/ui.update_accordion.html"
    },
    {
      "title": "ui.update_accordion_panel",
      "url": "api/core/ui.update_accordion_panel.html"
    },
    {
      "title": "ui.insert_accordion_panel",
      "url": "api/core/ui.insert_accordion_panel.html"
    },
    {
      "title": "ui.remove_accordion_panel",
      "url": "api/core/ui.remove_accordion_panel.html"
    },
    {
      "title": "Rendering outputs"
    },
    {
      "title": "ui.output_plot",
      "url": "api/core/ui.output_plot.html"
    },
    {
      "title": "ui.output_image",
      "url": "api/core/ui.output_image.html"
    },
    {
      "title": "ui.output_table",
      "url": "api/core/ui.output_table.html"
    },
    {
      "title": "ui.output_data_frame",
      "url": "api/core/ui.output_data_frame.html"
    },
    {
      "title": "ui.output_text",
      "url": "api/core/ui.output_text.html"
    },
    {
      "title": "ui.output_code",
      "url": "api/core/ui.output_code.html"
    },
    {
      "title": "ui.output_text_verbatim",
      "url": "api/core/ui.output_text_verbatim.html"
    },
    {
      "title": "ui.output_ui",
      "url": "api/core/ui.output_ui.html"
    },
    {
      "title": "render.plot",
      "url": "api/core/render.plot.html"
    },
    {
      "title": "render.image",
      "url": "api/core/render.image.html"
    },
    {
      "title": "render.table",
      "url": "api/core/render.table.html"
    },
    {
      "title": "render.text",
      "url": "api/core/render.text.html"
    },
    {
      "title": "render.code",
      "url": "api/core/render.code.html"
    },
    {
      "title": "render.ui",
      "url": "api/core/render.ui.html"
    },
    {
      "title": "render.express",
      "url": "api/core/render.express.html"
    },
    {
      "title": "render.download",
      "url": "api/core/render.download.html"
    },
    {
      "title": "render.data_frame",
      "url": "api/core/render.data_frame.html"
    },
    {
      "title": "render.DataGrid",
      "url": "api/core/render.DataGrid.html"
    },
    {
      "title": "render.DataTable",
      "url": "api/core/render.DataTable.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/core/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/core/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/core/reactive.value.html"
    },
    {
      "title": "reactive.Calc",
      "url": "api/core/reactive.Calc.html"
    },
    {
      "title": "reactive.Effect",
      "url": "api/core/reactive.Effect.html"
    },
    {
      "title": "reactive.Value",
      "url": "api/core/reactive.Value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/core/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/core/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/core/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/core/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/core/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/core/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/core/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/core/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/core/req.html"
    },
    {
      "title": "Create and run applications"
    },
    {
      "title": "run_app",
      "url": "api/core/run_app.html"
    },
    {
      "title": "App",
      "url": "api/core/App.html"
    },
    {
      "title": "Inputs",
      "url": "api/core/Inputs.html"
    },
    {
      "title": "Outputs",
      "url": "api/core/Outputs.html"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "ui.help_text",
      "url": "api/core/ui.help_text.html"
    },
    {
      "title": "ui.notification_show",
      "url": "api/core/ui.notification_show.html"
    },
    {
      "title": "ui.notification_remove",
      "url": "api/core/ui.notification_remove.html"
    },
    {
      "title": "ui.modal",
      "url": "api/core/ui.modal.html"
    },
    {
      "title": "ui.modal_show",
      "url": "api/core/ui.modal_show.html"
    },
    {
      "title": "ui.modal_remove",
      "url": "api/core/ui.modal_remove.html"
    },
    {
      "title": "ui.modal_button",
      "url": "api/core/ui.modal_button.html"
    },
    {
      "title": "ui.Progress",
      "url": "api/core/ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "module.ui",
      "url": "api/core/module.ui.html"
    },
    {
      "title": "module.server",
      "url": "api/core/module.server.html"
    },
    {
      "title": "Developer facing tools"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Create output renderers",
      "url": "api/core/Renderer.html"
    },
    {
      "title": "htmltools methods",
      "url": "api/core/Htmltools.html"
    },
    {
      "title": "ExtendedTask",
      "url": "api/core/ExtendedTask.html"
    },
    {
      "title": "Types"
    },
    {
      "title": "Miscellaneous types",
      "url": "api/core/MiscTypes.html"
    },
    {
      "title": "Tag types",
      "url": "api/core/TagTypes.html"
    },
    {
      "title": "Exception types",
      "url": "api/core/ExceptionTypes.html"
    },
    {
      "title": "Deprecated"
    },
    {
      "title": "render.transformer.output_transformer",
      "url": "api/core/render.transformer.output_transformer.html"
    },
    {
      "title": "render.transformer.resolve_value_fn",
      "url": "api/core/render.transformer.resolve_value_fn.html"
    },
    {
      "title": "Experimental"
    },
    {
      "title": "Card",
      "url": "api/core/ExCard.html"
    }
  ]
}