{
  "metadata": {
    "title": "render.transformer.output_transformer – Shiny for Python",
    "description": "",
    "url": "api/core/render.transformer.output_transformer.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Deprecated",
        "render.transformer.output_transformer"
      ]
    },
    {
      "type": "h1",
      "text": "render.transformer.output_transformer"
    },
    {
      "type": "code",
      "text": "render.transformer.output_transformer(\n    transform_fn=None,\n    *,\n    default_ui=None,\n    default_ui_passthrough_args=None,\n)"
    },
    {
      "type": "p",
      "text": "Deprecated. Please use Renderer instead."
    },
    {
      "type": "p",
      "text": "Output transformer decorator."
    },
    {
      "type": "p",
      "text": "This decorator method is a convenience method to generate the appropriate types and internal implementation for an overloaded renderer method. This method will provide you with all the necessary types to define two different overloads: one for when the decorator is called without parentheses and another for when it is called with parentheses where app authors can pass in parameters to the renderer."
    },
    {
      "type": "h2",
      "text": "Transform function"
    },
    {
      "type": "p",
      "text": "The output renderer’s transform function (transform_fn) is the key building block for output_transformer. It is a package author function that calls the app-defined output value function (value_fn) transforms the result of type IT into type OT."
    },
    {
      "type": "p",
      "text": "The transform function is supplied meta output information, the (app-supplied) value function, and any keyword arguments supplied to the output tranformer decorator:"
    },
    {
      "type": "ul",
      "items": [
        "The first parameter to the handler function has the class TransformerMetadata and is typically called _meta. This information gives context to the handler while trying to resolve the app-supplied value function (typically called _fn).",
        "The second parameter is the app-defined output value function (e.g. _fn). It’s return type (IT) determines what types can be returned by the app-supplied output value function. For example, if _fn has the type ValueFnAsync[str | None], both the str and None types are allowed to be returned from the app-supplied output value function.",
        "The remaining parameters are the keyword arguments (e.g. alt:Optional[str] = None or **kwargs: object) that app authors may supply to the renderer (when the renderer decorator is called with parentheses). Variadic positional parameters (e.g. *args) are not allowed. All keyword arguments should have a type and default value. No default value is needed for keyword arguments that are passed through (e.g. **kwargs: Any)."
      ]
    },
    {
      "type": "p",
      "text": "The transform function’s return type (OT) determines the output type of the OutputRenderer. Note that in many cases (but not all!) IT and OT will be the same. The None type should typically be defined in both IT and OT. If IT allows for None values, it (typically) signals that nothing should be rendered. If OT allows for None and returns a None value, shiny will not render the output."
    },
    {
      "type": "h2",
      "text": "Notes"
    },
    {
      "type": "ul",
      "items": [
        "When defining the renderer decorator overloads, if you have extra parameters of **kwargs: object, you may get a type error about incompatible signatures. To fix this, you can use **kwargs: Any instead or add _fn: None = None as the first parameter in the overload containing the **kwargs: object.",
        "The transform_fn should be defined as an asynchronous function but should only asynchronously yield (i.e. use await syntax) when the value function (the second parameter of type ValueFn[IT]) is awaitable. If the value function is not awaitable (i.e. it is a synchronous function), then the execution of the transform function should also be synchronous."
      ]
    },
    {
      "type": "p",
      "text": "When defining the renderer decorator overloads, if you have extra parameters of **kwargs: object, you may get a type error about incompatible signatures. To fix this, you can use **kwargs: Any instead or add _fn: None = None as the first parameter in the overload containing the **kwargs: object."
    },
    {
      "type": "p",
      "text": "The transform_fn should be defined as an asynchronous function but should only asynchronously yield (i.e. use await syntax) when the value function (the second parameter of type ValueFn[IT]) is awaitable. If the value function is not awaitable (i.e. it is a synchronous function), then the execution of the transform function should also be synchronous."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "Asynchronous function used to determine the app-supplied output value function return type (IT), the transformed type (OT), and the keyword arguments (P) app authors can supply to the renderer decorator."
    },
    {
      "type": "p",
      "text": "Optional function that takes an output_id string and returns a Shiny UI object that can be used to display the output. This allows render functions to respond to _repr_html_ method calls in environments like Jupyter."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "An OutputTransformer object that can be used to define two overloads for your renderer function. One overload is for when the renderer is called without parentheses and the other is for when the renderer is called with parentheses."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom typing import Literal, overload\n\nfrom shiny import App, Inputs, Outputs, Session, ui\nfrom shiny.render.transformer import (\n    TransformerMetadata,\n    ValueFn,\n    output_transformer,\n    resolve_value_fn,\n)\n\n#######\n# DEPRECATED. Please see `shiny.render.renderer.Renderer` for the latest API.\n# This example is kept for backwards compatibility.\n#\n#\n# Package authors can create their own output transformer methods by leveraging\n# `output_transformer` decorator.\n#\n# The transformer is kept simple for demonstration purposes, but it can be much more\n# complex (e.g. shiny.render.plotly)\n#######\n\n\n# Create renderer components from the async handler function: `capitalize_components()`\n@output_transformer()\nasync def CapitalizeTransformer(\n    # Contains information about the render call: `name` and `session`\n    _meta: TransformerMetadata,\n    # The app-supplied output value function\n    _fn: ValueFn[str | None],\n    *,\n    # Extra parameters that app authors can supply to the render decorator\n    # (e.g. `@render_capitalize(to=\"upper\")`)\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> str | None:\n    # Get the value\n    value = await resolve_value_fn(_fn)\n    # Equvalent to:\n    # if shiny.render.transformer.is_async_callable(_fn):\n    #     value = await _fn()\n    # else:\n    #     value = _fn()\n\n    # Render nothing if `value` is `None`\n    if value is None:\n        return None\n\n    if to == \"upper\":\n        return value.upper()\n    if to == \"lower\":\n        return value.lower()\n    raise ValueError(f\"Invalid value for `to`: {to}\")\n\n\n# First, create an overload where users can supply the extra parameters.\n# Example of usage:\n# ```\n# @render_capitalize(to=\"upper\")\n# def value():\n#     return input.caption()\n# ```\n# Note: Return type is `OutputRendererDecorator`\n@overload\ndef render_capitalize(\n    *,\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> CapitalizeTransformer.OutputRendererDecorator: ...\n\n\n# Second, create an overload where users are not using parentheses to the method.\n# While it doesn't look necessary, it is needed for the type checker.\n# Example of usage:\n# ```\n# @render_capitalize\n# def value():\n#     return input.caption()\n# ```\n# Note: `_fn` type is the transformer's `ValueFn`\n# Note: Return type is the transformer's `OutputRenderer`\n@overload\ndef render_capitalize(\n    _fn: CapitalizeTransformer.ValueFn,\n) -> CapitalizeTransformer.OutputRenderer: ...\n\n\n# Lastly, implement the renderer.\n# Note: `_fn` type is the transformer's `ValueFn` or `None`\n# Note: Return type is the transformer's `OutputRenderer` or `OutputRendererDecorator`\ndef render_capitalize(\n    _fn: CapitalizeTransformer.ValueFn | None = None,\n    *,\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> (\n    CapitalizeTransformer.OutputRenderer | CapitalizeTransformer.OutputRendererDecorator\n):\n    return CapitalizeTransformer(\n        _fn,\n        CapitalizeTransformer.params(to=to),\n    )\n\n\n#######\n# End of package author code\n#######\n\napp_ui = ui.page_fluid(\n    ui.h1(\"Capitalization renderer\"),\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    \"Renderer called with out parentheses:\",\n    ui.output_text_verbatim(\"no_parens\"),\n    \"To upper:\",\n    ui.output_text_verbatim(\"to_upper\"),\n    \"To lower:\",\n    ui.output_text_verbatim(\"to_lower\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Without parentheses\n    @render_capitalize\n    def no_parens():\n        return input.caption()\n\n    # With parentheses. Equivalent to `@render_capitalize()`\n    @render_capitalize(to=\"upper\")\n    def to_upper():\n        return input.caption()\n\n    @render_capitalize(to=\"lower\")\n    # Works with async output value functions\n    async def to_lower():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n"
    }
  ],
  "code_examples": [
    "render.transformer.output_transformer(\n    transform_fn=None,\n    *,\n    default_ui=None,\n    default_ui_passthrough_args=None,\n)",
    "render.transformer.output_transformer(\n    transform_fn=None,\n    *,\n    default_ui=None,\n    default_ui_passthrough_args=None,\n)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom typing import Literal, overload\n\nfrom shiny import App, Inputs, Outputs, Session, ui\nfrom shiny.render.transformer import (\n    TransformerMetadata,\n    ValueFn,\n    output_transformer,\n    resolve_value_fn,\n)\n\n#######\n# DEPRECATED. Please see `shiny.render.renderer.Renderer` for the latest API.\n# This example is kept for backwards compatibility.\n#\n#\n# Package authors can create their own output transformer methods by leveraging\n# `output_transformer` decorator.\n#\n# The transformer is kept simple for demonstration purposes, but it can be much more\n# complex (e.g. shiny.render.plotly)\n#######\n\n\n# Create renderer components from the async handler function: `capitalize_components()`\n@output_transformer()\nasync def CapitalizeTransformer(\n    # Contains information about the render call: `name` and `session`\n    _meta: TransformerMetadata,\n    # The app-supplied output value function\n    _fn: ValueFn[str | None],\n    *,\n    # Extra parameters that app authors can supply to the render decorator\n    # (e.g. `@render_capitalize(to=\"upper\")`)\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> str | None:\n    # Get the value\n    value = await resolve_value_fn(_fn)\n    # Equvalent to:\n    # if shiny.render.transformer.is_async_callable(_fn):\n    #     value = await _fn()\n    # else:\n    #     value = _fn()\n\n    # Render nothing if `value` is `None`\n    if value is None:\n        return None\n\n    if to == \"upper\":\n        return value.upper()\n    if to == \"lower\":\n        return value.lower()\n    raise ValueError(f\"Invalid value for `to`: {to}\")\n\n\n# First, create an overload where users can supply the extra parameters.\n# Example of usage:\n# ```\n# @render_capitalize(to=\"upper\")\n# def value():\n#     return input.caption()\n# ```\n# Note: Return type is `OutputRendererDecorator`\n@overload\ndef render_capitalize(\n    *,\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> CapitalizeTransformer.OutputRendererDecorator: ...\n\n\n# Second, create an overload where users are not using parentheses to the method.\n# While it doesn't look necessary, it is needed for the type checker.\n# Example of usage:\n# ```\n# @render_capitalize\n# def value():\n#     return input.caption()\n# ```\n# Note: `_fn` type is the transformer's `ValueFn`\n# Note: Return type is the transformer's `OutputRenderer`\n@overload\ndef render_capitalize(\n    _fn: CapitalizeTransformer.ValueFn,\n) -> CapitalizeTransformer.OutputRenderer: ...\n\n\n# Lastly, implement the renderer.\n# Note: `_fn` type is the transformer's `ValueFn` or `None`\n# Note: Return type is the transformer's `OutputRenderer` or `OutputRendererDecorator`\ndef render_capitalize(\n    _fn: CapitalizeTransformer.ValueFn | None = None,\n    *,\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> (\n    CapitalizeTransformer.OutputRenderer | CapitalizeTransformer.OutputRendererDecorator\n):\n    return CapitalizeTransformer(\n        _fn,\n        CapitalizeTransformer.params(to=to),\n    )\n\n\n#######\n# End of package author code\n#######\n\napp_ui = ui.page_fluid(\n    ui.h1(\"Capitalization renderer\"),\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    \"Renderer called with out parentheses:\",\n    ui.output_text_verbatim(\"no_parens\"),\n    \"To upper:\",\n    ui.output_text_verbatim(\"to_upper\"),\n    \"To lower:\",\n    ui.output_text_verbatim(\"to_lower\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Without parentheses\n    @render_capitalize\n    def no_parens():\n        return input.caption()\n\n    # With parentheses. Equivalent to `@render_capitalize()`\n    @render_capitalize(to=\"upper\")\n    def to_upper():\n        return input.caption()\n\n    @render_capitalize(to=\"lower\")\n    # Works with async output value functions\n    async def to_lower():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n"
  ],
  "toc": [
    {
      "title": "render.transformer.output_transformer",
      "url": "api/core/#shiny.render.transformer.output_transformer"
    },
    {
      "title": "Transform function",
      "url": "api/core/#transform-function"
    },
    {
      "title": "Notes",
      "url": "api/core/#notes"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples"
    },
    {
      "title": "Shiny Core API",
      "url": "api/core/index.html"
    },
    {
      "title": "Page containers"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_navbar",
      "url": "api/core/ui.page_navbar.html"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_fillable",
      "url": "api/core/ui.page_fillable.html"
    },
    {
      "title": "ui.page_fluid",
      "url": "api/core/ui.page_fluid.html"
    },
    {
      "title": "ui.page_fixed",
      "url": "api/core/ui.page_fixed.html"
    },
    {
      "title": "ui.page_bootstrap",
      "url": "api/core/ui.page_bootstrap.html"
    },
    {
      "title": "ui.page_auto",
      "url": "api/core/ui.page_auto.html"
    },
    {
      "title": "ui.page_output",
      "url": "api/core/ui.page_output.html"
    },
    {
      "title": "UI Layouts"
    },
    {
      "title": "ui.sidebar",
      "url": "api/core/ui.sidebar.html"
    },
    {
      "title": "ui.layout_sidebar",
      "url": "api/core/ui.layout_sidebar.html"
    },
    {
      "title": "ui.layout_columns",
      "url": "api/core/ui.layout_columns.html"
    },
    {
      "title": "ui.layout_column_wrap",
      "url": "api/core/ui.layout_column_wrap.html"
    },
    {
      "title": "ui.card",
      "url": "api/core/ui.card.html"
    },
    {
      "title": "ui.card_header",
      "url": "api/core/ui.card_header.html"
    },
    {
      "title": "ui.card_footer",
      "url": "api/core/ui.card_footer.html"
    },
    {
      "title": "ui.popover",
      "url": "api/core/ui.popover.html"
    },
    {
      "title": "ui.tooltip",
      "url": "api/core/ui.tooltip.html"
    },
    {
      "title": "ui.accordion",
      "url": "api/core/ui.accordion.html"
    },
    {
      "title": "ui.accordion_panel",
      "url": "api/core/ui.accordion_panel.html"
    },
    {
      "title": "ui.column",
      "url": "api/core/ui.column.html"
    },
    {
      "title": "ui.row",
      "url": "api/core/ui.row.html"
    },
    {
      "title": "UI Inputs"
    },
    {
      "title": "ui.input_select",
      "url": "api/core/ui.input_select.html"
    },
    {
      "title": "ui.input_selectize",
      "url": "api/core/ui.input_selectize.html"
    },
    {
      "title": "ui.input_slider",
      "url": "api/core/ui.input_slider.html"
    },
    {
      "title": "ui.input_dark_mode",
      "url": "api/core/ui.input_dark_mode.html"
    },
    {
      "title": "ui.input_date",
      "url": "api/core/ui.input_date.html"
    },
    {
      "title": "ui.input_date_range",
      "url": "api/core/ui.input_date_range.html"
    },
    {
      "title": "ui.input_checkbox",
      "url": "api/core/ui.input_checkbox.html"
    },
    {
      "title": "ui.input_checkbox_group",
      "url": "api/core/ui.input_checkbox_group.html"
    },
    {
      "title": "ui.input_switch",
      "url": "api/core/ui.input_switch.html"
    },
    {
      "title": "ui.input_radio_buttons",
      "url": "api/core/ui.input_radio_buttons.html"
    },
    {
      "title": "ui.input_numeric",
      "url": "api/core/ui.input_numeric.html"
    },
    {
      "title": "ui.input_text",
      "url": "api/core/ui.input_text.html"
    },
    {
      "title": "ui.input_text_area",
      "url": "api/core/ui.input_text_area.html"
    },
    {
      "title": "ui.input_password",
      "url": "api/core/ui.input_password.html"
    },
    {
      "title": "ui.input_action_button",
      "url": "api/core/ui.input_action_button.html"
    },
    {
      "title": "ui.input_action_link",
      "url": "api/core/ui.input_action_link.html"
    },
    {
      "title": "ui.input_task_button",
      "url": "api/core/ui.input_task_button.html"
    },
    {
      "title": "Value boxes"
    },
    {
      "title": "ui.value_box",
      "url": "api/core/ui.value_box.html"
    },
    {
      "title": "ui.value_box_theme",
      "url": "api/core/ui.value_box_theme.html"
    },
    {
      "title": "ui.showcase_bottom",
      "url": "api/core/ui.showcase_bottom.html"
    },
    {
      "title": "ui.showcase_left_center",
      "url": "api/core/ui.showcase_left_center.html"
    },
    {
      "title": "ui.showcase_top_right",
      "url": "api/core/ui.showcase_top_right.html"
    },
    {
      "title": "Navigation (tab) panels"
    },
    {
      "title": "ui.nav_panel",
      "url": "api/core/ui.nav_panel.html"
    },
    {
      "title": "ui.nav_spacer",
      "url": "api/core/ui.nav_spacer.html"
    },
    {
      "title": "ui.nav_menu",
      "url": "api/core/ui.nav_menu.html"
    },
    {
      "title": "ui.nav_control",
      "url": "api/core/ui.nav_control.html"
    },
    {
      "title": "ui.navset_bar",
      "url": "api/core/ui.navset_bar.html"
    },
    {
      "title": "ui.navset_tab",
      "url": "api/core/ui.navset_tab.html"
    },
    {
      "title": "ui.navset_pill",
      "url": "api/core/ui.navset_pill.html"
    },
    {
      "title": "ui.navset_underline",
      "url": "api/core/ui.navset_underline.html"
    },
    {
      "title": "ui.navset_card_tab",
      "url": "api/core/ui.navset_card_tab.html"
    },
    {
      "title": "ui.navset_card_pill",
      "url": "api/core/ui.navset_card_pill.html"
    },
    {
      "title": "ui.navset_card_underline",
      "url": "api/core/ui.navset_card_underline.html"
    },
    {
      "title": "ui.navset_pill_list",
      "url": "api/core/ui.navset_pill_list.html"
    },
    {
      "title": "ui.navset_hidden",
      "url": "api/core/ui.navset_hidden.html"
    },
    {
      "title": "ui.navbar_options",
      "url": "api/core/ui.navbar_options.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "ui.panel_absolute",
      "url": "api/core/ui.panel_absolute.html"
    },
    {
      "title": "ui.panel_fixed",
      "url": "api/core/ui.panel_fixed.html"
    },
    {
      "title": "ui.panel_conditional",
      "url": "api/core/ui.panel_conditional.html"
    },
    {
      "title": "ui.panel_title",
      "url": "api/core/ui.panel_title.html"
    },
    {
      "title": "ui.panel_well",
      "url": "api/core/ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "ui.input_file",
      "url": "api/core/ui.input_file.html"
    },
    {
      "title": "ui.download_button",
      "url": "api/core/ui.download_button.html"
    },
    {
      "title": "ui.download_link",
      "url": "api/core/ui.download_link.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "ui.Chat",
      "url": "api/core/ui.Chat.html"
    },
    {
      "title": "ui.chat_ui",
      "url": "api/core/ui.chat_ui.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "ui.MarkdownStream",
      "url": "api/core/ui.MarkdownStream.html"
    },
    {
      "title": "ui.output_markdown_stream",
      "url": "api/core/ui.output_markdown_stream.html"
    },
    {
      "title": "Custom UI"
    },
    {
      "title": "ui.Theme",
      "url": "api/core/ui.Theme.html"
    },
    {
      "title": "ui.HTML",
      "url": "api/core/ui.HTML.html"
    },
    {
      "title": "ui.TagList",
      "url": "api/core/ui.TagList.html"
    },
    {
      "title": "ui.tags",
      "url": "api/core/ui.tags.html"
    },
    {
      "title": "ui.markdown",
      "url": "api/core/ui.markdown.html"
    },
    {
      "title": "ui.include_css",
      "url": "api/core/ui.include_css.html"
    },
    {
      "title": "ui.include_js",
      "url": "api/core/ui.include_js.html"
    },
    {
      "title": "ui.insert_ui",
      "url": "api/core/ui.insert_ui.html"
    },
    {
      "title": "ui.remove_ui",
      "url": "api/core/ui.remove_ui.html"
    },
    {
      "title": "ui.busy_indicators.use",
      "url": "api/core/ui.busy_indicators.use.html"
    },
    {
      "title": "ui.busy_indicators.options",
      "url": "api/core/ui.busy_indicators.options.html"
    },
    {
      "title": "ui.fill.as_fillable_container",
      "url": "api/core/ui.fill.as_fillable_container.html"
    },
    {
      "title": "ui.fill.as_fill_item",
      "url": "api/core/ui.fill.as_fill_item.html"
    },
    {
      "title": "ui.fill.remove_all_fill",
      "url": "api/core/ui.fill.remove_all_fill.html"
    },
    {
      "title": "ui.css.as_css_unit",
      "url": "api/core/ui.css.as_css_unit.html"
    },
    {
      "title": "ui.css.as_css_padding",
      "url": "api/core/ui.css.as_css_padding.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "ui.update_select",
      "url": "api/core/ui.update_select.html"
    },
    {
      "title": "ui.update_selectize",
      "url": "api/core/ui.update_selectize.html"
    },
    {
      "title": "ui.update_slider",
      "url": "api/core/ui.update_slider.html"
    },
    {
      "title": "ui.update_dark_mode",
      "url": "api/core/ui.update_dark_mode.html"
    },
    {
      "title": "ui.update_date",
      "url": "api/core/ui.update_date.html"
    },
    {
      "title": "ui.update_date_range",
      "url": "api/core/ui.update_date_range.html"
    },
    {
      "title": "ui.update_checkbox",
      "url": "api/core/ui.update_checkbox.html"
    },
    {
      "title": "ui.update_checkbox_group",
      "url": "api/core/ui.update_checkbox_group.html"
    },
    {
      "title": "ui.update_switch",
      "url": "api/core/ui.update_switch.html"
    },
    {
      "title": "ui.update_radio_buttons",
      "url": "api/core/ui.update_radio_buttons.html"
    },
    {
      "title": "ui.update_numeric",
      "url": "api/core/ui.update_numeric.html"
    },
    {
      "title": "ui.update_text",
      "url": "api/core/ui.update_text.html"
    },
    {
      "title": "ui.update_text_area",
      "url": "api/core/ui.update_text_area.html"
    },
    {
      "title": "ui.update_navs",
      "url": "api/core/ui.update_navs.html"
    },
    {
      "title": "ui.update_action_button",
      "url": "api/core/ui.update_action_button.html"
    },
    {
      "title": "ui.update_action_link",
      "url": "api/core/ui.update_action_link.html"
    },
    {
      "title": "ui.update_task_button",
      "url": "api/core/ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "ui.update_sidebar",
      "url": "api/core/ui.update_sidebar.html"
    },
    {
      "title": "ui.update_tooltip",
      "url": "api/core/ui.update_tooltip.html"
    },
    {
      "title": "ui.update_popover",
      "url": "api/core/ui.update_popover.html"
    },
    {
      "title": "ui.update_accordion",
      "url": "api/core/ui.update_accordion.html"
    },
    {
      "title": "ui.update_accordion_panel",
      "url": "api/core/ui.update_accordion_panel.html"
    },
    {
      "title": "ui.insert_accordion_panel",
      "url": "api/core/ui.insert_accordion_panel.html"
    },
    {
      "title": "ui.remove_accordion_panel",
      "url": "api/core/ui.remove_accordion_panel.html"
    },
    {
      "title": "Rendering outputs"
    },
    {
      "title": "ui.output_plot",
      "url": "api/core/ui.output_plot.html"
    },
    {
      "title": "ui.output_image",
      "url": "api/core/ui.output_image.html"
    },
    {
      "title": "ui.output_table",
      "url": "api/core/ui.output_table.html"
    },
    {
      "title": "ui.output_data_frame",
      "url": "api/core/ui.output_data_frame.html"
    },
    {
      "title": "ui.output_text",
      "url": "api/core/ui.output_text.html"
    },
    {
      "title": "ui.output_code",
      "url": "api/core/ui.output_code.html"
    },
    {
      "title": "ui.output_text_verbatim",
      "url": "api/core/ui.output_text_verbatim.html"
    },
    {
      "title": "ui.output_ui",
      "url": "api/core/ui.output_ui.html"
    },
    {
      "title": "render.plot",
      "url": "api/core/render.plot.html"
    },
    {
      "title": "render.image",
      "url": "api/core/render.image.html"
    },
    {
      "title": "render.table",
      "url": "api/core/render.table.html"
    },
    {
      "title": "render.text",
      "url": "api/core/render.text.html"
    },
    {
      "title": "render.code",
      "url": "api/core/render.code.html"
    },
    {
      "title": "render.ui",
      "url": "api/core/render.ui.html"
    },
    {
      "title": "render.express",
      "url": "api/core/render.express.html"
    },
    {
      "title": "render.download",
      "url": "api/core/render.download.html"
    },
    {
      "title": "render.data_frame",
      "url": "api/core/render.data_frame.html"
    },
    {
      "title": "render.DataGrid",
      "url": "api/core/render.DataGrid.html"
    },
    {
      "title": "render.DataTable",
      "url": "api/core/render.DataTable.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/core/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/core/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/core/reactive.value.html"
    },
    {
      "title": "reactive.Calc",
      "url": "api/core/reactive.Calc.html"
    },
    {
      "title": "reactive.Effect",
      "url": "api/core/reactive.Effect.html"
    },
    {
      "title": "reactive.Value",
      "url": "api/core/reactive.Value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/core/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/core/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/core/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/core/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/core/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/core/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/core/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/core/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/core/req.html"
    },
    {
      "title": "Create and run applications"
    },
    {
      "title": "run_app",
      "url": "api/core/run_app.html"
    },
    {
      "title": "App",
      "url": "api/core/App.html"
    },
    {
      "title": "Inputs",
      "url": "api/core/Inputs.html"
    },
    {
      "title": "Outputs",
      "url": "api/core/Outputs.html"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "ui.help_text",
      "url": "api/core/ui.help_text.html"
    },
    {
      "title": "ui.notification_show",
      "url": "api/core/ui.notification_show.html"
    },
    {
      "title": "ui.notification_remove",
      "url": "api/core/ui.notification_remove.html"
    },
    {
      "title": "ui.modal",
      "url": "api/core/ui.modal.html"
    },
    {
      "title": "ui.modal_show",
      "url": "api/core/ui.modal_show.html"
    },
    {
      "title": "ui.modal_remove",
      "url": "api/core/ui.modal_remove.html"
    },
    {
      "title": "ui.modal_button",
      "url": "api/core/ui.modal_button.html"
    },
    {
      "title": "ui.Progress",
      "url": "api/core/ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "module.ui",
      "url": "api/core/module.ui.html"
    },
    {
      "title": "module.server",
      "url": "api/core/module.server.html"
    },
    {
      "title": "Developer facing tools"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Create output renderers",
      "url": "api/core/Renderer.html"
    },
    {
      "title": "htmltools methods",
      "url": "api/core/Htmltools.html"
    },
    {
      "title": "ExtendedTask",
      "url": "api/core/ExtendedTask.html"
    },
    {
      "title": "Types"
    },
    {
      "title": "Miscellaneous types",
      "url": "api/core/MiscTypes.html"
    },
    {
      "title": "Tag types",
      "url": "api/core/TagTypes.html"
    },
    {
      "title": "Exception types",
      "url": "api/core/ExceptionTypes.html"
    },
    {
      "title": "Deprecated"
    },
    {
      "title": "render.transformer.output_transformer",
      "url": "api/core/render.transformer.output_transformer.html"
    },
    {
      "title": "render.transformer.resolve_value_fn",
      "url": "api/core/render.transformer.resolve_value_fn.html"
    },
    {
      "title": "Experimental"
    },
    {
      "title": "Card",
      "url": "api/core/ExCard.html"
    }
  ]
}