{
  "metadata": {
    "title": "renderer â€“ Shiny for Python",
    "description": "",
    "url": "api/core/Renderer.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Developer facing tools",
        "Create output renderers"
      ]
    },
    {
      "type": "h1",
      "text": "Create output renderers"
    },
    {
      "type": "p",
      "text": "Package author methods for creating new output renderers."
    },
    {
      "type": "h1",
      "text": "render.renderer.Renderer"
    },
    {
      "type": "code",
      "text": "render.renderer.Renderer(self, _fn=None)"
    },
    {
      "type": "p",
      "text": "Output renderer class"
    },
    {
      "type": "p",
      "text": "An output renderer is a class that will take in a callable function (value function), transform the returned value into a JSON-serializable object, and send the result to the browser."
    },
    {
      "type": "p",
      "text": "When the value function is received, the renderer will be auto registered with the current session's Output class, hooking it into Shiny's reactive graph. By auto registering as an Output, it allows for App authors to skip adding @output above the renderer. (If programmatic id is needed, @output(id=\"foo\") can still be used!)"
    },
    {
      "type": "p",
      "text": "There are two methods that must be implemented by the subclasses: .auto_output_ui(self) and either .transform(self, value: IT) or .render(self)."
    },
    {
      "type": "ul",
      "items": [
        "In Express mode, the output renderer will automatically render its UI via .auto_output_ui(self). This helper method allows App authors to skip adding a ui.output_* function to their UI, making Express mode even more concise. If more control is needed over the UI, @ui.hold can be used to suppress the auto rendering of the UI. When using @ui.hold on a renderer, the renderer's UI will need to be added to the app to connect the rendered output to Shiny's reactive graph.",
        "The render method is responsible for executing the value function and performing any transformations for the output value to be JSON-serializable (None is a valid value!). To avoid the boilerplate of resolving the value function and returning early if None is received, package authors may implement the .transform(self, value: IT) method. The transform method's sole job is to transform non-None values into an object that is JSON-serializable."
      ]
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\n# Import the custom renderer implementations\nfrom renderers import render_capitalize, render_upper\n\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    ui.h1(\"Capitalization renderer\"),\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    \"@render_upper: \",\n    ui.output_text_verbatim(\"upper\", placeholder=True),\n    \"@render_upper(): \",\n    ui.output_text_verbatim(\"upper_with_paren\", placeholder=True),\n    \"@render_capitalize: \",\n    ui.output_text_verbatim(\"cap_upper\", placeholder=True),\n    \"@render_capitalize(to='lower'): \",\n    ui.output_text_verbatim(\"cap_lower\", placeholder=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Hovering over `@render_upper` will display the class documentation\n    @render_upper\n    def upper():\n        return input.caption()\n\n    # Hovering over `@render_upper` will display the class documentation as there is no\n    # `__init__()` documentation\n    @render_upper()\n    def upper_with_paren():\n        return input.caption()\n\n    # Hovering over `@render_capitalize` will display the class documentation\n    @render_capitalize\n    def cap_upper():\n        return input.caption()\n\n    # Hovering over `@render_capitalize` will display the `__init__()` documentation\n    @render_capitalize(to_case=\"lower\")\n    def cap_lower():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n\n## file: renderers.py\nfrom __future__ import annotations\n\nfrom typing import Literal, Optional\n\nfrom shiny.render.renderer import Renderer, ValueFn\nfrom shiny.ui import output_text_verbatim\n\n\nclass render_capitalize(Renderer[str]):\n    # The documentation for the class will be displayed when the user hovers over the\n    # decorator when **no** parenthesis are used. Ex: `@render_capitalize`\n    # If no documentation is supplied to the `__init__()` method, then this\n    # documentation will be displayed when parenthesis are used on the decorator.\n    \"\"\"\n    Render capitalize class documentation goes here.\n    \"\"\"\n\n    to_case: Literal[\"upper\", \"lower\", \"ignore\"]\n    \"\"\"\n    The case to render the value in.\n    \"\"\"\n    placeholder: bool\n    \"\"\"\n    Whether to render a placeholder value. (Defaults to `True`)\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the renderer\n        \"\"\"\n        return output_text_verbatim(self.output_id, placeholder=True)\n\n    def __init__(\n        self,\n        _fn: Optional[ValueFn[str]] = None,\n        *,\n        to_case: Literal[\"upper\", \"lower\", \"ignore\"] = \"upper\",\n        placeholder: bool = True,\n    ) -> None:\n        # If a different set of documentation is supplied to the `__init__` method,\n        # then this documentation will be displayed when parenthesis are used on the decorator.\n        # Ex: `@render_capitalize()`\n        \"\"\"\n        Render capitalize documentation goes here.\n\n        It is a good idea to talk about parameters here!\n\n##         Parameters {.doc-section .doc-section---------parameters}\n\n        to_case\n            The case to render the value. (`\"upper\"`)\n\n            Options:\n            - `\"upper\"`: Render the value in upper case.\n            - `\"lower\"`: Render the value in lower case.\n            - `\"ignore\"`: Do not alter the case of the value.\n\n        placeholder\n            Whether to render a placeholder value. (`True`)\n        \"\"\"\n        # Do not pass params\n        super().__init__(_fn)\n        self.to_case = to_case\n        self.placeholder = placeholder\n\n    async def render(self) -> str | None:\n        value = await self.fn()\n        if value is None:\n            # If `None` is returned, then do not render anything.\n            return None\n\n        ret = str(value)\n        if self.to_case == \"upper\":\n            return ret.upper()\n        if self.to_case == \"lower\":\n            return ret.lower()\n        if self.to_case == \"ignore\":\n            return ret\n        raise ValueError(f\"Invalid value for `to_case`: {self.to_case}\")\n\n\nclass render_upper(Renderer[str]):\n    \"\"\"\n    Minimal capitalize string transformation renderer.\n\n    No parameters are supplied to this renderer. This allows us to skip the `__init__()`\n    method and `__init__()` documentation. If you hover over this decorator with and\n    without parenthesis, you will see this documentation in both situations.\n\n    Note: This renderer is equivalent to `render_capitalize(to=\"upper\")`.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the renderer\n        \"\"\"\n        return output_text_verbatim(self.output_id, placeholder=True)\n\n    async def transform(self, value: str) -> str:\n        \"\"\"\n        Transform the value to upper case.\n\n        This method is shorthand for the default `render()` method. It is useful to\n        transform non-`None` values. (Any `None` value returned by the app author will\n        be forwarded to the browser.)\n\n##         Parameters {.doc-section .doc-section---------parameters}\n\n        value\n            The a non-`None` value to transform.\n\n##         Returns {.doc-section .doc-section---------returns}\n\n        str\n            The transformed value. (Must be a subset of `Jsonifiable`.)\n        \"\"\"\n\n        return str(value).upper()\n\n"
    },
    {
      "type": "h2",
      "text": "Attributes"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "auto_output_ui"
    },
    {
      "type": "code",
      "text": "render.renderer.Renderer.auto_output_ui()"
    },
    {
      "type": "p",
      "text": "Express mode method that automatically generates the output's UI."
    },
    {
      "type": "h3",
      "text": "render"
    },
    {
      "type": "code",
      "text": "render.renderer.Renderer.render()"
    },
    {
      "type": "p",
      "text": "Renders the output value function."
    },
    {
      "type": "p",
      "text": "This method is called when the renderer is requested to render its output."
    },
    {
      "type": "p",
      "text": "The Renderer's render() implementation goes as follows:"
    },
    {
      "type": "ul",
      "items": [
        "Execute the value function supplied to the renderer.",
        "If the output value is None, None will be returned.",
        "If the output value is not None, the .transform() method will be called to transform the value into a JSON-serializable object."
      ]
    },
    {
      "type": "p",
      "text": "When overwriting this method in a subclass, the implementation should execute the value function .fn and return the transformed value (which is JSON-serializable)."
    },
    {
      "type": "h3",
      "text": "transform"
    },
    {
      "type": "code",
      "text": "render.renderer.Renderer.transform(value)"
    },
    {
      "type": "p",
      "text": "Transform an output value into a JSON-serializable object."
    },
    {
      "type": "p",
      "text": "When subclassing Renderer, this method can be implemented to transform non-None values into a JSON-serializable object."
    },
    {
      "type": "p",
      "text": "If a .render() method is not implemented, this method must be implemented. When the output is requested, the Renderer's .render() method will execute the output value function, return None if the value is None, and call this method to transform the value into a JSON-serializable object."
    },
    {
      "type": "p",
      "text": "Note, only one of .transform() or .render() should be implemented."
    },
    {
      "type": "h1",
      "text": "render.renderer.Jsonifiable"
    },
    {
      "type": "p",
      "text": "render.renderer.Jsonifiable"
    },
    {
      "type": "h1",
      "text": "render.renderer.ValueFn"
    },
    {
      "type": "p",
      "text": "render.renderer.ValueFn"
    },
    {
      "type": "p",
      "text": "App-supplied output value function which returns type IT or None. This function can be synchronous or asynchronous."
    },
    {
      "type": "h1",
      "text": "render.renderer.AsyncValueFn"
    },
    {
      "type": "code",
      "text": "render.renderer.AsyncValueFn(self, fn)"
    },
    {
      "type": "p",
      "text": "App-supplied output value function which returns type IT. asynchronous."
    },
    {
      "type": "p",
      "text": "Type definition: Callable[[], Awaitable[IT]]"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "get_async_fn"
    },
    {
      "type": "code",
      "text": "render.renderer.AsyncValueFn.get_async_fn()"
    },
    {
      "type": "p",
      "text": "Return the async value function."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "Async wrapped value function supplied to the AsyncValueFn constructor."
    },
    {
      "type": "h3",
      "text": "get_sync_fn"
    },
    {
      "type": "code",
      "text": "render.renderer.AsyncValueFn.get_sync_fn()"
    },
    {
      "type": "p",
      "text": "Retrieve the original, synchronous value function function."
    },
    {
      "type": "p",
      "text": "If the original function was asynchronous, a runtime error will be thrown."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "Original, synchronous function supplied to the AsyncValueFn constructor."
    },
    {
      "type": "h3",
      "text": "is_async"
    },
    {
      "type": "code",
      "text": "render.renderer.AsyncValueFn.is_async()"
    },
    {
      "type": "p",
      "text": "Was the original function asynchronous?"
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "Whether the original function is asynchronous."
    },
    {
      "type": "h1",
      "text": "render.renderer.RendererT"
    },
    {
      "type": "p",
      "text": "render.renderer.RendererT"
    },
    {
      "type": "p",
      "text": "Generic output renderer class to pass the original Renderer subclass through a decorator function."
    },
    {
      "type": "p",
      "text": "When accepting and returning a Renderer class, utilize this TypeVar as to not reduce the variable type to Renderer[Any]"
    }
  ],
  "code_examples": [
    "render.renderer.Renderer(self, _fn=None)",
    "render.renderer.Renderer(self, _fn=None)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\n# Import the custom renderer implementations\nfrom renderers import render_capitalize, render_upper\n\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    ui.h1(\"Capitalization renderer\"),\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    \"@render_upper: \",\n    ui.output_text_verbatim(\"upper\", placeholder=True),\n    \"@render_upper(): \",\n    ui.output_text_verbatim(\"upper_with_paren\", placeholder=True),\n    \"@render_capitalize: \",\n    ui.output_text_verbatim(\"cap_upper\", placeholder=True),\n    \"@render_capitalize(to='lower'): \",\n    ui.output_text_verbatim(\"cap_lower\", placeholder=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Hovering over `@render_upper` will display the class documentation\n    @render_upper\n    def upper():\n        return input.caption()\n\n    # Hovering over `@render_upper` will display the class documentation as there is no\n    # `__init__()` documentation\n    @render_upper()\n    def upper_with_paren():\n        return input.caption()\n\n    # Hovering over `@render_capitalize` will display the class documentation\n    @render_capitalize\n    def cap_upper():\n        return input.caption()\n\n    # Hovering over `@render_capitalize` will display the `__init__()` documentation\n    @render_capitalize(to_case=\"lower\")\n    def cap_lower():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n\n## file: renderers.py\nfrom __future__ import annotations\n\nfrom typing import Literal, Optional\n\nfrom shiny.render.renderer import Renderer, ValueFn\nfrom shiny.ui import output_text_verbatim\n\n\nclass render_capitalize(Renderer[str]):\n    # The documentation for the class will be displayed when the user hovers over the\n    # decorator when **no** parenthesis are used. Ex: `@render_capitalize`\n    # If no documentation is supplied to the `__init__()` method, then this\n    # documentation will be displayed when parenthesis are used on the decorator.\n    \"\"\"\n    Render capitalize class documentation goes here.\n    \"\"\"\n\n    to_case: Literal[\"upper\", \"lower\", \"ignore\"]\n    \"\"\"\n    The case to render the value in.\n    \"\"\"\n    placeholder: bool\n    \"\"\"\n    Whether to render a placeholder value. (Defaults to `True`)\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the renderer\n        \"\"\"\n        return output_text_verbatim(self.output_id, placeholder=True)\n\n    def __init__(\n        self,\n        _fn: Optional[ValueFn[str]] = None,\n        *,\n        to_case: Literal[\"upper\", \"lower\", \"ignore\"] = \"upper\",\n        placeholder: bool = True,\n    ) -> None:\n        # If a different set of documentation is supplied to the `__init__` method,\n        # then this documentation will be displayed when parenthesis are used on the decorator.\n        # Ex: `@render_capitalize()`\n        \"\"\"\n        Render capitalize documentation goes here.\n\n        It is a good idea to talk about parameters here!\n\n##         Parameters {.doc-section .doc-section---------parameters}\n\n        to_case\n            The case to render the value. (`\"upper\"`)\n\n            Options:\n            - `\"upper\"`: Render the value in upper case.\n            - `\"lower\"`: Render the value in lower case.\n            - `\"ignore\"`: Do not alter the case of the value.\n\n        placeholder\n            Whether to render a placeholder value. (`True`)\n        \"\"\"\n        # Do not pass params\n        super().__init__(_fn)\n        self.to_case = to_case\n        self.placeholder = placeholder\n\n    async def render(self) -> str | None:\n        value = await self.fn()\n        if value is None:\n            # If `None` is returned, then do not render anything.\n            return None\n\n        ret = str(value)\n        if self.to_case == \"upper\":\n            return ret.upper()\n        if self.to_case == \"lower\":\n            return ret.lower()\n        if self.to_case == \"ignore\":\n            return ret\n        raise ValueError(f\"Invalid value for `to_case`: {self.to_case}\")\n\n\nclass render_upper(Renderer[str]):\n    \"\"\"\n    Minimal capitalize string transformation renderer.\n\n    No parameters are supplied to this renderer. This allows us to skip the `__init__()`\n    method and `__init__()` documentation. If you hover over this decorator with and\n    without parenthesis, you will see this documentation in both situations.\n\n    Note: This renderer is equivalent to `render_capitalize(to=\"upper\")`.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the renderer\n        \"\"\"\n        return output_text_verbatim(self.output_id, placeholder=True)\n\n    async def transform(self, value: str) -> str:\n        \"\"\"\n        Transform the value to upper case.\n\n        This method is shorthand for the default `render()` method. It is useful to\n        transform non-`None` values. (Any `None` value returned by the app author will\n        be forwarded to the browser.)\n\n##         Parameters {.doc-section .doc-section---------parameters}\n\n        value\n            The a non-`None` value to transform.\n\n##         Returns {.doc-section .doc-section---------returns}\n\n        str\n            The transformed value. (Must be a subset of `Jsonifiable`.)\n        \"\"\"\n\n        return str(value).upper()\n\n",
    "render.renderer.Renderer.auto_output_ui()",
    "render.renderer.Renderer.auto_output_ui()",
    "render.renderer.Renderer.render()",
    "render.renderer.Renderer.render()",
    "render.renderer.Renderer.transform(value)",
    "render.renderer.Renderer.transform(value)",
    "render.renderer.AsyncValueFn(self, fn)",
    "render.renderer.AsyncValueFn(self, fn)",
    "render.renderer.AsyncValueFn.get_async_fn()",
    "render.renderer.AsyncValueFn.get_async_fn()",
    "render.renderer.AsyncValueFn.get_sync_fn()",
    "render.renderer.AsyncValueFn.get_sync_fn()",
    "render.renderer.AsyncValueFn.is_async()",
    "render.renderer.AsyncValueFn.is_async()"
  ],
  "toc": [
    {
      "title": "Create output renderers",
      "url": "api/core/#create-output-renderers"
    },
    {
      "title": "render.renderer.Renderer",
      "url": "api/core/#shiny.render.renderer.Renderer"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples"
    },
    {
      "title": "Attributes",
      "url": "api/core/#attributes"
    },
    {
      "title": "Methods",
      "url": "api/core/#methods"
    },
    {
      "title": "auto_output_ui",
      "url": "api/core/#shiny.render.renderer.Renderer.auto_output_ui"
    },
    {
      "title": "render",
      "url": "api/core/#shiny.render.renderer.Renderer.render"
    },
    {
      "title": "transform",
      "url": "api/core/#shiny.render.renderer.Renderer.transform"
    },
    {
      "title": "render.renderer.Jsonifiable",
      "url": "api/core/#shiny.render.renderer.Jsonifiable"
    },
    {
      "title": "render.renderer.ValueFn",
      "url": "api/core/#shiny.render.renderer.ValueFn"
    },
    {
      "title": "render.renderer.AsyncValueFn",
      "url": "api/core/#shiny.render.renderer.AsyncValueFn"
    },
    {
      "title": "Methods",
      "url": "api/core/#methods-1"
    },
    {
      "title": "get_async_fn",
      "url": "api/core/#shiny.render.renderer.AsyncValueFn.get_async_fn"
    },
    {
      "title": "get_sync_fn",
      "url": "api/core/#shiny.render.renderer.AsyncValueFn.get_sync_fn"
    },
    {
      "title": "is_async",
      "url": "api/core/#shiny.render.renderer.AsyncValueFn.is_async"
    },
    {
      "title": "render.renderer.RendererT",
      "url": "api/core/#shiny.render.renderer.RendererT"
    },
    {
      "title": "Shiny Core API",
      "url": "api/core/index.html"
    },
    {
      "title": "Page containers"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_navbar",
      "url": "api/core/ui.page_navbar.html"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_fillable",
      "url": "api/core/ui.page_fillable.html"
    },
    {
      "title": "ui.page_fluid",
      "url": "api/core/ui.page_fluid.html"
    },
    {
      "title": "ui.page_fixed",
      "url": "api/core/ui.page_fixed.html"
    },
    {
      "title": "ui.page_bootstrap",
      "url": "api/core/ui.page_bootstrap.html"
    },
    {
      "title": "ui.page_auto",
      "url": "api/core/ui.page_auto.html"
    },
    {
      "title": "ui.page_output",
      "url": "api/core/ui.page_output.html"
    },
    {
      "title": "UI Layouts"
    },
    {
      "title": "ui.sidebar",
      "url": "api/core/ui.sidebar.html"
    },
    {
      "title": "ui.layout_sidebar",
      "url": "api/core/ui.layout_sidebar.html"
    },
    {
      "title": "ui.layout_columns",
      "url": "api/core/ui.layout_columns.html"
    },
    {
      "title": "ui.layout_column_wrap",
      "url": "api/core/ui.layout_column_wrap.html"
    },
    {
      "title": "ui.card",
      "url": "api/core/ui.card.html"
    },
    {
      "title": "ui.card_header",
      "url": "api/core/ui.card_header.html"
    },
    {
      "title": "ui.card_footer",
      "url": "api/core/ui.card_footer.html"
    },
    {
      "title": "ui.popover",
      "url": "api/core/ui.popover.html"
    },
    {
      "title": "ui.tooltip",
      "url": "api/core/ui.tooltip.html"
    },
    {
      "title": "ui.accordion",
      "url": "api/core/ui.accordion.html"
    },
    {
      "title": "ui.accordion_panel",
      "url": "api/core/ui.accordion_panel.html"
    },
    {
      "title": "ui.column",
      "url": "api/core/ui.column.html"
    },
    {
      "title": "ui.row",
      "url": "api/core/ui.row.html"
    },
    {
      "title": "UI Inputs"
    },
    {
      "title": "ui.input_select",
      "url": "api/core/ui.input_select.html"
    },
    {
      "title": "ui.input_selectize",
      "url": "api/core/ui.input_selectize.html"
    },
    {
      "title": "ui.input_slider",
      "url": "api/core/ui.input_slider.html"
    },
    {
      "title": "ui.input_dark_mode",
      "url": "api/core/ui.input_dark_mode.html"
    },
    {
      "title": "ui.input_date",
      "url": "api/core/ui.input_date.html"
    },
    {
      "title": "ui.input_date_range",
      "url": "api/core/ui.input_date_range.html"
    },
    {
      "title": "ui.input_checkbox",
      "url": "api/core/ui.input_checkbox.html"
    },
    {
      "title": "ui.input_checkbox_group",
      "url": "api/core/ui.input_checkbox_group.html"
    },
    {
      "title": "ui.input_switch",
      "url": "api/core/ui.input_switch.html"
    },
    {
      "title": "ui.input_radio_buttons",
      "url": "api/core/ui.input_radio_buttons.html"
    },
    {
      "title": "ui.input_numeric",
      "url": "api/core/ui.input_numeric.html"
    },
    {
      "title": "ui.input_text",
      "url": "api/core/ui.input_text.html"
    },
    {
      "title": "ui.input_text_area",
      "url": "api/core/ui.input_text_area.html"
    },
    {
      "title": "ui.input_password",
      "url": "api/core/ui.input_password.html"
    },
    {
      "title": "ui.input_action_button",
      "url": "api/core/ui.input_action_button.html"
    },
    {
      "title": "ui.input_action_link",
      "url": "api/core/ui.input_action_link.html"
    },
    {
      "title": "ui.input_task_button",
      "url": "api/core/ui.input_task_button.html"
    },
    {
      "title": "Value boxes"
    },
    {
      "title": "ui.value_box",
      "url": "api/core/ui.value_box.html"
    },
    {
      "title": "ui.value_box_theme",
      "url": "api/core/ui.value_box_theme.html"
    },
    {
      "title": "ui.showcase_bottom",
      "url": "api/core/ui.showcase_bottom.html"
    },
    {
      "title": "ui.showcase_left_center",
      "url": "api/core/ui.showcase_left_center.html"
    },
    {
      "title": "ui.showcase_top_right",
      "url": "api/core/ui.showcase_top_right.html"
    },
    {
      "title": "Navigation (tab) panels"
    },
    {
      "title": "ui.nav_panel",
      "url": "api/core/ui.nav_panel.html"
    },
    {
      "title": "ui.nav_spacer",
      "url": "api/core/ui.nav_spacer.html"
    },
    {
      "title": "ui.nav_menu",
      "url": "api/core/ui.nav_menu.html"
    },
    {
      "title": "ui.nav_control",
      "url": "api/core/ui.nav_control.html"
    },
    {
      "title": "ui.navset_bar",
      "url": "api/core/ui.navset_bar.html"
    },
    {
      "title": "ui.navset_tab",
      "url": "api/core/ui.navset_tab.html"
    },
    {
      "title": "ui.navset_pill",
      "url": "api/core/ui.navset_pill.html"
    },
    {
      "title": "ui.navset_underline",
      "url": "api/core/ui.navset_underline.html"
    },
    {
      "title": "ui.navset_card_tab",
      "url": "api/core/ui.navset_card_tab.html"
    },
    {
      "title": "ui.navset_card_pill",
      "url": "api/core/ui.navset_card_pill.html"
    },
    {
      "title": "ui.navset_card_underline",
      "url": "api/core/ui.navset_card_underline.html"
    },
    {
      "title": "ui.navset_pill_list",
      "url": "api/core/ui.navset_pill_list.html"
    },
    {
      "title": "ui.navset_hidden",
      "url": "api/core/ui.navset_hidden.html"
    },
    {
      "title": "ui.navbar_options",
      "url": "api/core/ui.navbar_options.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "ui.panel_absolute",
      "url": "api/core/ui.panel_absolute.html"
    },
    {
      "title": "ui.panel_fixed",
      "url": "api/core/ui.panel_fixed.html"
    },
    {
      "title": "ui.panel_conditional",
      "url": "api/core/ui.panel_conditional.html"
    },
    {
      "title": "ui.panel_title",
      "url": "api/core/ui.panel_title.html"
    },
    {
      "title": "ui.panel_well",
      "url": "api/core/ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "ui.input_file",
      "url": "api/core/ui.input_file.html"
    },
    {
      "title": "ui.download_button",
      "url": "api/core/ui.download_button.html"
    },
    {
      "title": "ui.download_link",
      "url": "api/core/ui.download_link.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "ui.Chat",
      "url": "api/core/ui.Chat.html"
    },
    {
      "title": "ui.chat_ui",
      "url": "api/core/ui.chat_ui.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "ui.MarkdownStream",
      "url": "api/core/ui.MarkdownStream.html"
    },
    {
      "title": "ui.output_markdown_stream",
      "url": "api/core/ui.output_markdown_stream.html"
    },
    {
      "title": "Custom UI"
    },
    {
      "title": "ui.Theme",
      "url": "api/core/ui.Theme.html"
    },
    {
      "title": "ui.HTML",
      "url": "api/core/ui.HTML.html"
    },
    {
      "title": "ui.TagList",
      "url": "api/core/ui.TagList.html"
    },
    {
      "title": "ui.tags",
      "url": "api/core/ui.tags.html"
    },
    {
      "title": "ui.markdown",
      "url": "api/core/ui.markdown.html"
    },
    {
      "title": "ui.include_css",
      "url": "api/core/ui.include_css.html"
    },
    {
      "title": "ui.include_js",
      "url": "api/core/ui.include_js.html"
    },
    {
      "title": "ui.insert_ui",
      "url": "api/core/ui.insert_ui.html"
    },
    {
      "title": "ui.remove_ui",
      "url": "api/core/ui.remove_ui.html"
    },
    {
      "title": "ui.busy_indicators.use",
      "url": "api/core/ui.busy_indicators.use.html"
    },
    {
      "title": "ui.busy_indicators.options",
      "url": "api/core/ui.busy_indicators.options.html"
    },
    {
      "title": "ui.fill.as_fillable_container",
      "url": "api/core/ui.fill.as_fillable_container.html"
    },
    {
      "title": "ui.fill.as_fill_item",
      "url": "api/core/ui.fill.as_fill_item.html"
    },
    {
      "title": "ui.fill.remove_all_fill",
      "url": "api/core/ui.fill.remove_all_fill.html"
    },
    {
      "title": "ui.css.as_css_unit",
      "url": "api/core/ui.css.as_css_unit.html"
    },
    {
      "title": "ui.css.as_css_padding",
      "url": "api/core/ui.css.as_css_padding.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "ui.update_select",
      "url": "api/core/ui.update_select.html"
    },
    {
      "title": "ui.update_selectize",
      "url": "api/core/ui.update_selectize.html"
    },
    {
      "title": "ui.update_slider",
      "url": "api/core/ui.update_slider.html"
    },
    {
      "title": "ui.update_dark_mode",
      "url": "api/core/ui.update_dark_mode.html"
    },
    {
      "title": "ui.update_date",
      "url": "api/core/ui.update_date.html"
    },
    {
      "title": "ui.update_date_range",
      "url": "api/core/ui.update_date_range.html"
    },
    {
      "title": "ui.update_checkbox",
      "url": "api/core/ui.update_checkbox.html"
    },
    {
      "title": "ui.update_checkbox_group",
      "url": "api/core/ui.update_checkbox_group.html"
    },
    {
      "title": "ui.update_switch",
      "url": "api/core/ui.update_switch.html"
    },
    {
      "title": "ui.update_radio_buttons",
      "url": "api/core/ui.update_radio_buttons.html"
    },
    {
      "title": "ui.update_numeric",
      "url": "api/core/ui.update_numeric.html"
    },
    {
      "title": "ui.update_text",
      "url": "api/core/ui.update_text.html"
    },
    {
      "title": "ui.update_text_area",
      "url": "api/core/ui.update_text_area.html"
    },
    {
      "title": "ui.update_navs",
      "url": "api/core/ui.update_navs.html"
    },
    {
      "title": "ui.update_action_button",
      "url": "api/core/ui.update_action_button.html"
    },
    {
      "title": "ui.update_action_link",
      "url": "api/core/ui.update_action_link.html"
    },
    {
      "title": "ui.update_task_button",
      "url": "api/core/ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "ui.update_sidebar",
      "url": "api/core/ui.update_sidebar.html"
    },
    {
      "title": "ui.update_tooltip",
      "url": "api/core/ui.update_tooltip.html"
    },
    {
      "title": "ui.update_popover",
      "url": "api/core/ui.update_popover.html"
    },
    {
      "title": "ui.update_accordion",
      "url": "api/core/ui.update_accordion.html"
    },
    {
      "title": "ui.update_accordion_panel",
      "url": "api/core/ui.update_accordion_panel.html"
    },
    {
      "title": "ui.insert_accordion_panel",
      "url": "api/core/ui.insert_accordion_panel.html"
    },
    {
      "title": "ui.remove_accordion_panel",
      "url": "api/core/ui.remove_accordion_panel.html"
    },
    {
      "title": "Rendering outputs"
    },
    {
      "title": "ui.output_plot",
      "url": "api/core/ui.output_plot.html"
    },
    {
      "title": "ui.output_image",
      "url": "api/core/ui.output_image.html"
    },
    {
      "title": "ui.output_table",
      "url": "api/core/ui.output_table.html"
    },
    {
      "title": "ui.output_data_frame",
      "url": "api/core/ui.output_data_frame.html"
    },
    {
      "title": "ui.output_text",
      "url": "api/core/ui.output_text.html"
    },
    {
      "title": "ui.output_code",
      "url": "api/core/ui.output_code.html"
    },
    {
      "title": "ui.output_text_verbatim",
      "url": "api/core/ui.output_text_verbatim.html"
    },
    {
      "title": "ui.output_ui",
      "url": "api/core/ui.output_ui.html"
    },
    {
      "title": "render.plot",
      "url": "api/core/render.plot.html"
    },
    {
      "title": "render.image",
      "url": "api/core/render.image.html"
    },
    {
      "title": "render.table",
      "url": "api/core/render.table.html"
    },
    {
      "title": "render.text",
      "url": "api/core/render.text.html"
    },
    {
      "title": "render.code",
      "url": "api/core/render.code.html"
    },
    {
      "title": "render.ui",
      "url": "api/core/render.ui.html"
    },
    {
      "title": "render.express",
      "url": "api/core/render.express.html"
    },
    {
      "title": "render.download",
      "url": "api/core/render.download.html"
    },
    {
      "title": "render.data_frame",
      "url": "api/core/render.data_frame.html"
    },
    {
      "title": "render.DataGrid",
      "url": "api/core/render.DataGrid.html"
    },
    {
      "title": "render.DataTable",
      "url": "api/core/render.DataTable.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/core/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/core/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/core/reactive.value.html"
    },
    {
      "title": "reactive.Calc",
      "url": "api/core/reactive.Calc.html"
    },
    {
      "title": "reactive.Effect",
      "url": "api/core/reactive.Effect.html"
    },
    {
      "title": "reactive.Value",
      "url": "api/core/reactive.Value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/core/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/core/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/core/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/core/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/core/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/core/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/core/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/core/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/core/req.html"
    },
    {
      "title": "Create and run applications"
    },
    {
      "title": "run_app",
      "url": "api/core/run_app.html"
    },
    {
      "title": "App",
      "url": "api/core/App.html"
    },
    {
      "title": "Inputs",
      "url": "api/core/Inputs.html"
    },
    {
      "title": "Outputs",
      "url": "api/core/Outputs.html"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "ui.help_text",
      "url": "api/core/ui.help_text.html"
    },
    {
      "title": "ui.notification_show",
      "url": "api/core/ui.notification_show.html"
    },
    {
      "title": "ui.notification_remove",
      "url": "api/core/ui.notification_remove.html"
    },
    {
      "title": "ui.modal",
      "url": "api/core/ui.modal.html"
    },
    {
      "title": "ui.modal_show",
      "url": "api/core/ui.modal_show.html"
    },
    {
      "title": "ui.modal_remove",
      "url": "api/core/ui.modal_remove.html"
    },
    {
      "title": "ui.modal_button",
      "url": "api/core/ui.modal_button.html"
    },
    {
      "title": "ui.Progress",
      "url": "api/core/ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "module.ui",
      "url": "api/core/module.ui.html"
    },
    {
      "title": "module.server",
      "url": "api/core/module.server.html"
    },
    {
      "title": "Developer facing tools"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Create output renderers",
      "url": "api/core/Renderer.html"
    },
    {
      "title": "htmltools methods",
      "url": "api/core/Htmltools.html"
    },
    {
      "title": "ExtendedTask",
      "url": "api/core/ExtendedTask.html"
    },
    {
      "title": "Types"
    },
    {
      "title": "Miscellaneous types",
      "url": "api/core/MiscTypes.html"
    },
    {
      "title": "Tag types",
      "url": "api/core/TagTypes.html"
    },
    {
      "title": "Exception types",
      "url": "api/core/ExceptionTypes.html"
    },
    {
      "title": "Deprecated"
    },
    {
      "title": "render.transformer.output_transformer",
      "url": "api/core/render.transformer.output_transformer.html"
    },
    {
      "title": "render.transformer.resolve_value_fn",
      "url": "api/core/render.transformer.resolve_value_fn.html"
    },
    {
      "title": "Experimental"
    },
    {
      "title": "Card",
      "url": "api/core/ExCard.html"
    }
  ]
}