{
  "metadata": {
    "title": "session.session â€“ Shiny for Python",
    "description": "",
    "url": "api/express/session.Session.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "User Session",
        "session.Session"
      ]
    },
    {
      "type": "h1",
      "text": "session.Session"
    },
    {
      "type": "code",
      "text": "session.Session()"
    },
    {
      "type": "p",
      "text": "Interface definition for Session-like classes, like AppSession, SessionProxy, and ExpressStubSession."
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "close"
    },
    {
      "type": "code",
      "text": "session.Session.close(code=1001)"
    },
    {
      "type": "p",
      "text": "Close the session."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"close\", \"Close the session\")\nui.p(\n    \"\"\"If this example is running on the browser (i.e., via shinylive),\n    closing the session will log a message to the JavaScript console\n    (open the browser's developer tools to see it).\n    \"\"\"\n)\n\n\ndef log():\n    print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n\n_ = session.on_ended(log)\n\n\n@reactive.effect\n@reactive.event(input.close)\nasync def _():\n    await session.close()\n\n"
    },
    {
      "type": "h3",
      "text": "download"
    },
    {
      "type": "code",
      "text": "session.Session.download(\n    id=None,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n)"
    },
    {
      "type": "p",
      "text": "Deprecated. Please use download instead."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The name of the download."
    },
    {
      "type": "p",
      "text": "The filename of the download."
    },
    {
      "type": "p",
      "text": "The media type of the download."
    },
    {
      "type": "p",
      "text": "The encoding of the download."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The decorated function."
    },
    {
      "type": "h3",
      "text": "dynamic_route"
    },
    {
      "type": "code",
      "text": "session.Session.dynamic_route(name, handler)"
    },
    {
      "type": "p",
      "text": "Register a function to call when a dynamically generated, session-specific, route is requested."
    },
    {
      "type": "p",
      "text": "Provides a convenient way to serve-up session-dependent values for other clients/applications to consume."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A name for the route (used to determine part of the URL path)."
    },
    {
      "type": "p",
      "text": "The function to call when a request is made to the route. This function should take a single argument (a starlette.requests.Request object) and return a starlette.types.ASGIApp object."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The URL path for the route."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"serve\", \"Click to serve\")\n\nui.div(id=\"messages\")\n\n\n@reactive.effect\n@reactive.event(input.serve)\ndef _():\n    async def my_handler(request: Request) -> JSONResponse:\n        return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n    path = session.dynamic_route(\"my_handler\", my_handler)\n\n    print(\"Serving at: \", path)\n\n    ui.insert_ui(\n        ui.tags.script(\n            f\"\"\"\n            fetch('{path}')\n                .then(r => r.json())\n                .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n            \"\"\"\n        ),\n        selector=\"body\",\n    )\n\n"
    },
    {
      "type": "h3",
      "text": "is_stub_session"
    },
    {
      "type": "code",
      "text": "session.Session.is_stub_session()"
    },
    {
      "type": "p",
      "text": "Returns whether this is a stub session."
    },
    {
      "type": "p",
      "text": "In the UI-rendering phase of Shiny Express apps, the session context has a stub session. This stub session is not a real session; it is there only so that code which expects a session can run without raising errors."
    },
    {
      "type": "h3",
      "text": "on_ended"
    },
    {
      "type": "code",
      "text": "session.Session.on_ended(fn)"
    },
    {
      "type": "p",
      "text": "Registers a function to be called after the client has disconnected."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The function to call."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A function that can be used to cancel the registration."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"close\", \"Close the session\")\n\n\ndef log():\n    print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n\n_ = session.on_ended(log)\n\n\n@reactive.effect\n@reactive.event(input.close)\nasync def _():\n    await session.close()\n\n"
    },
    {
      "type": "h3",
      "text": "on_flush"
    },
    {
      "type": "code",
      "text": "session.Session.on_flush(fn, once=True)"
    },
    {
      "type": "p",
      "text": "Register a function to call before the next reactive flush."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The function to call."
    },
    {
      "type": "p",
      "text": "Whether to call the function only once or on every flush."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A function that can be used to cancel the registration."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny.express import input, render, session, ui\n\nui.input_action_button(\"flush\", \"Trigger flush\")\n\n\n@render.ui\ndef n_clicks():\n    return \"Number of clicks: \" + str(input.flush())\n\n\nui.div(id=\"flush_time\")\n\n\ndef log():\n    msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n    print(msg)\n    ui.insert_ui(\n        ui.p(msg),\n        selector=\"#flush_time\",\n    )\n\n\nif hasattr(session, \"on_flush\"):\n    _ = session.on_flush(log, once=False)\n\n"
    },
    {
      "type": "h3",
      "text": "on_flushed"
    },
    {
      "type": "code",
      "text": "session.Session.on_flushed(fn, once=True)"
    },
    {
      "type": "p",
      "text": "Register a function to call after the next reactive flush."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The function to call."
    },
    {
      "type": "p",
      "text": "Whether to call the function only once or on every flush."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A function that can be used to cancel the registration."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny.express import input, render, session, ui\n\nui.input_action_button(\"flush\", \"Trigger flush\")\n\n\n@render.ui\ndef n_clicks():\n    return \"Number of clicks: \" + str(input.flush())\n\n\nui.div(id=\"flush_time\")\n\n\ndef log():\n    msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n    print(msg)\n    ui.insert_ui(\n        ui.p(msg),\n        selector=\"#flush_time\",\n    )\n\n\nif hasattr(session, \"on_flushed\"):\n    _ = session.on_flushed(log, once=False)\n\n"
    },
    {
      "type": "h3",
      "text": "send_custom_message"
    },
    {
      "type": "code",
      "text": "session.Session.send_custom_message(type, message)"
    },
    {
      "type": "p",
      "text": "Send a message to the client."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The type of message to send."
    },
    {
      "type": "p",
      "text": "The message to send."
    },
    {
      "type": "h4",
      "text": "Note"
    },
    {
      "type": "p",
      "text": "Sends messages to the client which can be handled in JavaScript with Shiny.addCustomMessageHandler(type, function(message){...}). Once the message handler is added, it will be invoked each time send_custom_message() is called on the server."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_text(\"msg\", \"Enter a message\")\nui.input_action_button(\"submit\", \"Submit the message\")\n# It'd be better to use ui.insert_ui() in order to implement this kind of\n# functionality...this is just a basic demo of how custom message handling works.\nui.tags.div(id=\"messages\")\nui.tags.script(\n    \"\"\"\n    $(function() {\n        Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n            $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n        });\n    });\n    \"\"\"\n)\n\n\n@reactive.effect\n@reactive.event(input.submit)\nasync def _():\n    await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n"
    },
    {
      "type": "h3",
      "text": "send_input_message"
    },
    {
      "type": "code",
      "text": "session.Session.send_input_message(id, message)"
    },
    {
      "type": "p",
      "text": "Send an input message to the session."
    },
    {
      "type": "p",
      "text": "Sends a message to an input on the session's client web page; if the input is present and bound on the page at the time the message is received, then the input binding object's receiveMessage(el, message) method will be called. This method should generally not be called directly from Shiny apps, but through friendlier wrapper functions like ui.update_text()."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "An id matching the id of an input to update."
    },
    {
      "type": "p",
      "text": "The message to send."
    },
    {
      "type": "h3",
      "text": "set_message_handler"
    },
    {
      "type": "code",
      "text": "session.Session.set_message_handler(name, handler, *, _handler_session=None)"
    },
    {
      "type": "p",
      "text": "Set a client message handler."
    },
    {
      "type": "p",
      "text": "Sets a method that can be called by the client via Shiny.shinyapp.makeRequest(). Shiny.shinyapp.makeRequest() makes a request to the server and waits for a response. By using makeRequest() (JS) and set_message_handler() (python), you can have a much richer communication interaction than just using Input values and re-rendering outputs."
    },
    {
      "type": "p",
      "text": "For example, @render.data_frame can have many cells edited. While it is possible to set many input values, if makeRequest() did not exist, the data frame would be updated on the first cell update. This would cause the data frame to be re-rendered, cancelling any pending cell updates. makeRequest() allows for individual cell updates to be sent to the server, processed, and handled by the existing data frame output."
    },
    {
      "type": "p",
      "text": "When the message handler is executed, it will be executed within an isolated reactive context and the session context that set the message handler."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The name of the message handler."
    },
    {
      "type": "p",
      "text": "The handler function to be called when the client makes a message for the given name. The handler function should take any number of arguments that are provided by the client and return a JSON-serializable object. If the value is None, then the handler at name will be removed."
    },
    {
      "type": "p",
      "text": "For internal use. This is the session which will be used as the session context when calling the handler."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The key under which the handler is stored (or removed). This value will be namespaced when used with a session proxy."
    }
  ],
  "code_examples": [
    "session.Session()",
    "session.Session()",
    "session.Session.close(code=1001)",
    "session.Session.close(code=1001)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"close\", \"Close the session\")\nui.p(\n    \"\"\"If this example is running on the browser (i.e., via shinylive),\n    closing the session will log a message to the JavaScript console\n    (open the browser's developer tools to see it).\n    \"\"\"\n)\n\n\ndef log():\n    print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n\n_ = session.on_ended(log)\n\n\n@reactive.effect\n@reactive.event(input.close)\nasync def _():\n    await session.close()\n\n",
    "session.Session.download(\n    id=None,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n)",
    "session.Session.download(\n    id=None,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n)",
    "session.Session.dynamic_route(name, handler)",
    "session.Session.dynamic_route(name, handler)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"serve\", \"Click to serve\")\n\nui.div(id=\"messages\")\n\n\n@reactive.effect\n@reactive.event(input.serve)\ndef _():\n    async def my_handler(request: Request) -> JSONResponse:\n        return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n    path = session.dynamic_route(\"my_handler\", my_handler)\n\n    print(\"Serving at: \", path)\n\n    ui.insert_ui(\n        ui.tags.script(\n            f\"\"\"\n            fetch('{path}')\n                .then(r => r.json())\n                .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n            \"\"\"\n        ),\n        selector=\"body\",\n    )\n\n",
    "session.Session.is_stub_session()",
    "session.Session.is_stub_session()",
    "session.Session.on_ended(fn)",
    "session.Session.on_ended(fn)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"close\", \"Close the session\")\n\n\ndef log():\n    print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n\n_ = session.on_ended(log)\n\n\n@reactive.effect\n@reactive.event(input.close)\nasync def _():\n    await session.close()\n\n",
    "session.Session.on_flush(fn, once=True)",
    "session.Session.on_flush(fn, once=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny.express import input, render, session, ui\n\nui.input_action_button(\"flush\", \"Trigger flush\")\n\n\n@render.ui\ndef n_clicks():\n    return \"Number of clicks: \" + str(input.flush())\n\n\nui.div(id=\"flush_time\")\n\n\ndef log():\n    msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n    print(msg)\n    ui.insert_ui(\n        ui.p(msg),\n        selector=\"#flush_time\",\n    )\n\n\nif hasattr(session, \"on_flush\"):\n    _ = session.on_flush(log, once=False)\n\n",
    "session.Session.on_flushed(fn, once=True)",
    "session.Session.on_flushed(fn, once=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny.express import input, render, session, ui\n\nui.input_action_button(\"flush\", \"Trigger flush\")\n\n\n@render.ui\ndef n_clicks():\n    return \"Number of clicks: \" + str(input.flush())\n\n\nui.div(id=\"flush_time\")\n\n\ndef log():\n    msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n    print(msg)\n    ui.insert_ui(\n        ui.p(msg),\n        selector=\"#flush_time\",\n    )\n\n\nif hasattr(session, \"on_flushed\"):\n    _ = session.on_flushed(log, once=False)\n\n",
    "session.Session.send_custom_message(type, message)",
    "session.Session.send_custom_message(type, message)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_text(\"msg\", \"Enter a message\")\nui.input_action_button(\"submit\", \"Submit the message\")\n# It'd be better to use ui.insert_ui() in order to implement this kind of\n# functionality...this is just a basic demo of how custom message handling works.\nui.tags.div(id=\"messages\")\nui.tags.script(\n    \"\"\"\n    $(function() {\n        Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n            $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n        });\n    });\n    \"\"\"\n)\n\n\n@reactive.effect\n@reactive.event(input.submit)\nasync def _():\n    await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n",
    "session.Session.send_input_message(id, message)",
    "session.Session.send_input_message(id, message)",
    "session.Session.set_message_handler(name, handler, *, _handler_session=None)",
    "session.Session.set_message_handler(name, handler, *, _handler_session=None)"
  ],
  "toc": [
    {
      "title": "session.Session",
      "url": "api/express/#shiny.session.Session"
    },
    {
      "title": "Methods",
      "url": "api/express/#methods"
    },
    {
      "title": "close",
      "url": "api/express/#shiny.session.Session.close"
    },
    {
      "title": "download",
      "url": "api/express/#shiny.session.Session.download"
    },
    {
      "title": "dynamic_route",
      "url": "api/express/#shiny.session.Session.dynamic_route"
    },
    {
      "title": "is_stub_session",
      "url": "api/express/#shiny.session.Session.is_stub_session"
    },
    {
      "title": "on_ended",
      "url": "api/express/#shiny.session.Session.on_ended"
    },
    {
      "title": "on_flush",
      "url": "api/express/#shiny.session.Session.on_flush"
    },
    {
      "title": "on_flushed",
      "url": "api/express/#shiny.session.Session.on_flushed"
    },
    {
      "title": "send_custom_message",
      "url": "api/express/#shiny.session.Session.send_custom_message"
    },
    {
      "title": "send_input_message",
      "url": "api/express/#shiny.session.Session.send_input_message"
    },
    {
      "title": "set_message_handler",
      "url": "api/express/#shiny.session.Session.set_message_handler"
    },
    {
      "title": "Shiny Express API",
      "url": "api/express/index.html"
    },
    {
      "title": "Input components"
    },
    {
      "title": "express.ui.input_select",
      "url": "api/express/express.ui.input_select.html"
    },
    {
      "title": "express.ui.input_selectize",
      "url": "api/express/express.ui.input_selectize.html"
    },
    {
      "title": "express.ui.input_slider",
      "url": "api/express/express.ui.input_slider.html"
    },
    {
      "title": "express.ui.input_dark_mode",
      "url": "api/express/express.ui.input_dark_mode.html"
    },
    {
      "title": "express.ui.input_date",
      "url": "api/express/express.ui.input_date.html"
    },
    {
      "title": "express.ui.input_date_range",
      "url": "api/express/express.ui.input_date_range.html"
    },
    {
      "title": "express.ui.input_checkbox",
      "url": "api/express/express.ui.input_checkbox.html"
    },
    {
      "title": "express.ui.input_checkbox_group",
      "url": "api/express/express.ui.input_checkbox_group.html"
    },
    {
      "title": "express.ui.input_switch",
      "url": "api/express/express.ui.input_switch.html"
    },
    {
      "title": "express.ui.input_radio_buttons",
      "url": "api/express/express.ui.input_radio_buttons.html"
    },
    {
      "title": "express.ui.input_numeric",
      "url": "api/express/express.ui.input_numeric.html"
    },
    {
      "title": "express.ui.input_text",
      "url": "api/express/express.ui.input_text.html"
    },
    {
      "title": "express.ui.input_text_area",
      "url": "api/express/express.ui.input_text_area.html"
    },
    {
      "title": "express.ui.input_password",
      "url": "api/express/express.ui.input_password.html"
    },
    {
      "title": "express.ui.input_action_button",
      "url": "api/express/express.ui.input_action_button.html"
    },
    {
      "title": "express.ui.input_action_link",
      "url": "api/express/express.ui.input_action_link.html"
    },
    {
      "title": "express.ui.input_task_button",
      "url": "api/express/express.ui.input_task_button.html"
    },
    {
      "title": "Output components"
    },
    {
      "title": "express.render.plot",
      "url": "api/express/express.render.plot.html"
    },
    {
      "title": "express.render.table",
      "url": "api/express/express.render.table.html"
    },
    {
      "title": "express.render.DataTable",
      "url": "api/express/express.render.DataTable.html"
    },
    {
      "title": "express.render.data_frame",
      "url": "api/express/express.render.data_frame.html"
    },
    {
      "title": "express.render.DataGrid",
      "url": "api/express/express.render.DataGrid.html"
    },
    {
      "title": "express.render.text",
      "url": "api/express/express.render.text.html"
    },
    {
      "title": "express.render.ui",
      "url": "api/express/express.render.ui.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "express.render.image",
      "url": "api/express/express.render.image.html"
    },
    {
      "title": "express.render.express",
      "url": "api/express/express.render.express.html"
    },
    {
      "title": "Layouts and other UI tools"
    },
    {
      "title": "express.ui.page_opts",
      "url": "api/express/express.ui.page_opts.html"
    },
    {
      "title": "express.ui.sidebar",
      "url": "api/express/express.ui.sidebar.html"
    },
    {
      "title": "express.ui.layout_columns",
      "url": "api/express/express.ui.layout_columns.html"
    },
    {
      "title": "express.ui.layout_column_wrap",
      "url": "api/express/express.ui.layout_column_wrap.html"
    },
    {
      "title": "express.ui.card",
      "url": "api/express/express.ui.card.html"
    },
    {
      "title": "express.ui.card_header",
      "url": "api/express/express.ui.card_header.html"
    },
    {
      "title": "express.ui.card_footer",
      "url": "api/express/express.ui.card_footer.html"
    },
    {
      "title": "express.ui.value_box",
      "url": "api/express/express.ui.value_box.html"
    },
    {
      "title": "express.ui.value_box_theme",
      "url": "api/express/express.ui.value_box_theme.html"
    },
    {
      "title": "express.ui.popover",
      "url": "api/express/express.ui.popover.html"
    },
    {
      "title": "express.ui.tooltip",
      "url": "api/express/express.ui.tooltip.html"
    },
    {
      "title": "express.ui.accordion",
      "url": "api/express/express.ui.accordion.html"
    },
    {
      "title": "express.ui.accordion_panel",
      "url": "api/express/express.ui.accordion_panel.html"
    },
    {
      "title": "express.ui.layout_sidebar",
      "url": "api/express/express.ui.layout_sidebar.html"
    },
    {
      "title": "Navigate multiple panels"
    },
    {
      "title": "express.ui.nav_panel",
      "url": "api/express/express.ui.nav_panel.html"
    },
    {
      "title": "express.ui.navset_card_underline",
      "url": "api/express/express.ui.navset_card_underline.html"
    },
    {
      "title": "express.ui.navset_card_tab",
      "url": "api/express/express.ui.navset_card_tab.html"
    },
    {
      "title": "express.ui.navset_card_pill",
      "url": "api/express/express.ui.navset_card_pill.html"
    },
    {
      "title": "express.ui.nav_spacer",
      "url": "api/express/express.ui.nav_spacer.html"
    },
    {
      "title": "express.ui.nav_menu",
      "url": "api/express/express.ui.nav_menu.html"
    },
    {
      "title": "express.ui.nav_control",
      "url": "api/express/express.ui.nav_control.html"
    },
    {
      "title": "express.ui.navset_bar",
      "url": "api/express/express.ui.navset_bar.html"
    },
    {
      "title": "express.ui.navset_tab",
      "url": "api/express/express.ui.navset_tab.html"
    },
    {
      "title": "express.ui.navset_pill",
      "url": "api/express/express.ui.navset_pill.html"
    },
    {
      "title": "express.ui.navset_underline",
      "url": "api/express/express.ui.navset_underline.html"
    },
    {
      "title": "express.ui.navset_pill_list",
      "url": "api/express/express.ui.navset_pill_list.html"
    },
    {
      "title": "express.ui.navset_hidden",
      "url": "api/express/express.ui.navset_hidden.html"
    },
    {
      "title": "express.ui.navbar_options",
      "url": "api/express/express.ui.navbar_options.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "express.ui.Chat",
      "url": "api/express/express.ui.Chat.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "express.ui.MarkdownStream",
      "url": "api/express/express.ui.MarkdownStream.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/express/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/express/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/express/reactive.value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/express/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/express/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/express/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/express/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/express/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/express/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/express/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/express/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/express/req.html"
    },
    {
      "title": "Reusable Express code"
    },
    {
      "title": "express.ui.hold",
      "url": "api/express/express.ui.hold.html"
    },
    {
      "title": "express.expressify",
      "url": "api/express/express.expressify.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "express.ui.update_select",
      "url": "api/express/express.ui.update_select.html"
    },
    {
      "title": "express.ui.update_selectize",
      "url": "api/express/express.ui.update_selectize.html"
    },
    {
      "title": "express.ui.update_slider",
      "url": "api/express/express.ui.update_slider.html"
    },
    {
      "title": "express.ui.update_dark_mode",
      "url": "api/express/express.ui.update_dark_mode.html"
    },
    {
      "title": "express.ui.update_date",
      "url": "api/express/express.ui.update_date.html"
    },
    {
      "title": "express.ui.update_date_range",
      "url": "api/express/express.ui.update_date_range.html"
    },
    {
      "title": "express.ui.update_checkbox",
      "url": "api/express/express.ui.update_checkbox.html"
    },
    {
      "title": "express.ui.update_checkbox_group",
      "url": "api/express/express.ui.update_checkbox_group.html"
    },
    {
      "title": "express.ui.update_switch",
      "url": "api/express/express.ui.update_switch.html"
    },
    {
      "title": "express.ui.update_radio_buttons",
      "url": "api/express/express.ui.update_radio_buttons.html"
    },
    {
      "title": "express.ui.update_numeric",
      "url": "api/express/express.ui.update_numeric.html"
    },
    {
      "title": "express.ui.update_text",
      "url": "api/express/express.ui.update_text.html"
    },
    {
      "title": "express.ui.update_text_area",
      "url": "api/express/express.ui.update_text_area.html"
    },
    {
      "title": "express.ui.update_navs",
      "url": "api/express/express.ui.update_navs.html"
    },
    {
      "title": "express.ui.update_action_button",
      "url": "api/express/express.ui.update_action_button.html"
    },
    {
      "title": "express.ui.update_action_link",
      "url": "api/express/express.ui.update_action_link.html"
    },
    {
      "title": "express.ui.update_task_button",
      "url": "api/express/express.ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "express.ui.update_sidebar",
      "url": "api/express/express.ui.update_sidebar.html"
    },
    {
      "title": "express.ui.update_tooltip",
      "url": "api/express/express.ui.update_tooltip.html"
    },
    {
      "title": "express.ui.update_popover",
      "url": "api/express/express.ui.update_popover.html"
    },
    {
      "title": "express.ui.update_accordion",
      "url": "api/express/express.ui.update_accordion.html"
    },
    {
      "title": "express.ui.update_accordion_panel",
      "url": "api/express/express.ui.update_accordion_panel.html"
    },
    {
      "title": "express.ui.insert_accordion_panel",
      "url": "api/express/express.ui.insert_accordion_panel.html"
    },
    {
      "title": "express.ui.remove_accordion_panel",
      "url": "api/express/express.ui.remove_accordion_panel.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "express.ui.help_text",
      "url": "api/express/express.ui.help_text.html"
    },
    {
      "title": "express.ui.notification_show",
      "url": "api/express/express.ui.notification_show.html"
    },
    {
      "title": "express.ui.notification_remove",
      "url": "api/express/express.ui.notification_remove.html"
    },
    {
      "title": "express.ui.modal",
      "url": "api/express/express.ui.modal.html"
    },
    {
      "title": "express.ui.modal_show",
      "url": "api/express/express.ui.modal_show.html"
    },
    {
      "title": "express.ui.modal_remove",
      "url": "api/express/express.ui.modal_remove.html"
    },
    {
      "title": "express.ui.modal_button",
      "url": "api/express/express.ui.modal_button.html"
    },
    {
      "title": "express.ui.Progress",
      "url": "api/express/express.ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "express.module",
      "url": "api/express/express.module.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "express.ui.panel_absolute",
      "url": "api/express/express.ui.panel_absolute.html"
    },
    {
      "title": "express.ui.panel_fixed",
      "url": "api/express/express.ui.panel_fixed.html"
    },
    {
      "title": "express.ui.panel_title",
      "url": "api/express/express.ui.panel_title.html"
    },
    {
      "title": "express.ui.panel_well",
      "url": "api/express/express.ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "express.ui.input_file",
      "url": "api/express/express.ui.input_file.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "Dynamic UI"
    },
    {
      "title": "express.ui.panel_conditional",
      "url": "api/express/express.ui.panel_conditional.html"
    },
    {
      "title": "express.ui.insert_ui",
      "url": "api/express/express.ui.insert_ui.html"
    },
    {
      "title": "express.ui.remove_ui",
      "url": "api/express/express.ui.remove_ui.html"
    },
    {
      "title": "User Session"
    },
    {
      "title": "session.Session",
      "url": "api/express/session.Session.html"
    },
    {
      "title": "Client Data"
    },
    {
      "title": "session.ClientData",
      "url": "api/express/session.ClientData.html"
    },
    {
      "title": "UI as HTML"
    },
    {
      "title": "express.ui.Theme",
      "url": "api/express/express.ui.Theme.html"
    },
    {
      "title": "express.ui.markdown",
      "url": "api/express/express.ui.markdown.html"
    },
    {
      "title": "express.ui.include_css",
      "url": "api/express/express.ui.include_css.html"
    },
    {
      "title": "express.ui.include_js",
      "url": "api/express/express.ui.include_js.html"
    },
    {
      "title": "express.ui.HTML",
      "url": "api/express/express.ui.HTML.html"
    },
    {
      "title": "express.ui.tags",
      "url": "api/express/express.ui.tags.html"
    },
    {
      "title": "express.ui.TagList",
      "url": "api/express/express.ui.TagList.html"
    },
    {
      "title": "express.ui.busy_indicators.use",
      "url": "api/express/express.ui.busy_indicators.use.html"
    },
    {
      "title": "express.ui.busy_indicators.options",
      "url": "api/express/express.ui.busy_indicators.options.html"
    },
    {
      "title": "Application-level settings"
    },
    {
      "title": "express.app_opts",
      "url": "api/express/express.app_opts.html"
    },
    {
      "title": "Express developer tooling"
    },
    {
      "title": "express.is_express_app",
      "url": "api/express/express.is_express_app.html"
    },
    {
      "title": "express.wrap_express_app",
      "url": "api/express/express.wrap_express_app.html"
    }
  ]
}