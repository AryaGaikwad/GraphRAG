{
  "metadata": {
    "title": "session.clientdata â€“ Shiny for Python",
    "description": "",
    "url": "api/express/session.ClientData.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Client Data",
        "session.ClientData"
      ]
    },
    {
      "type": "h1",
      "text": "session.ClientData"
    },
    {
      "type": "code",
      "text": "session.ClientData(self, session)"
    },
    {
      "type": "p",
      "text": "Access (client-side) information from the browser."
    },
    {
      "type": "p",
      "text": "Provides access to client-side information, such as the URL components, the pixel ratio of the device, and the properties of outputs."
    },
    {
      "type": "p",
      "text": "Each method in this class reads a reactive input value, which means that the method will error if called outside of a reactive context."
    },
    {
      "type": "h2",
      "text": "Raises"
    },
    {
      "type": "p",
      "text": "If a method is called outside of a reactive context."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\n# pyright: reportUnknownMemberType=false, reportUnknownVariableType=false\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import input, render, session, ui\n\nwith ui.sidebar(open=\"closed\"):\n    ui.input_slider(\"obs\", \"Number of observations:\", min=0, max=1000, value=500)\n\nui.markdown(\n    \"\"\"\n#### `session.clientdata` values\n\nThe following methods are available from the `session.clientdata` object and allow you\nto reactively read the client data values from the browser.\n\"\"\"\n)\n\n\n@render.code\ndef clientdatatext():\n    return f\"\"\"\n    .url_hash()         -> {session.clientdata.url_hash()}\n    .url_hash_initial() -> {session.clientdata.url_hash_initial()}\n    .url_hostname()     -> {session.clientdata.url_hostname()}\n    .url_pathname()     -> {session.clientdata.url_pathname()}\n    .url_port()         -> {session.clientdata.url_port()}\n    .url_protocol()     -> {session.clientdata.url_protocol()}\n    .url_search()       -> {session.clientdata.url_search()}\n    .pixelratio()       -> {session.clientdata.pixelratio()}\n\n    .output_height(\"myplot\")       -> {session.clientdata.output_height(\"myplot\")}\n    .output_width(\"myplot\")        -> {session.clientdata.output_width(\"myplot\")}\n    .output_hidden(\"myplot\")       -> {session.clientdata.output_hidden(\"myplot\")}\n    .output_bg_color(\"myplot\")     -> {session.clientdata.output_bg_color(\"myplot\")}\n    .output_fg_color(\"myplot\")     -> {session.clientdata.output_fg_color(\"myplot\")}\n    .output_accent_color(\"myplot\") -> {session.clientdata.output_accent_color(\"myplot\")}\n    .output_font(\"myplot\")         -> {session.clientdata.output_font(\"myplot\")}\n    \"\"\"\n\n\n@render.plot\ndef myplot():\n    plt.figure()\n    plt.hist(np.random.normal(size=input.obs()))  # type: ignore\n    plt.title(\"This is myplot\")\n\n"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "output_accent_color"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_accent_color(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the accent color of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The accent color of the output, or None if the output does not exist (or does not report its accent color)."
    },
    {
      "type": "h3",
      "text": "output_bg_color"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_bg_color(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the background color of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The background color of the output, or None if the output does not exist (or does not report its bg color)."
    },
    {
      "type": "h3",
      "text": "output_fg_color"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_fg_color(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the foreground color of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The foreground color of the output, or None if the output does not exist (or does not report its fg color)."
    },
    {
      "type": "h3",
      "text": "output_font"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_font(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the font(s) of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The font family of the output, or None if the output does not exist (or does not report its font styles)."
    },
    {
      "type": "h3",
      "text": "output_height"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_height(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the height of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The height of the output, or None if the output does not exist (or does not report its height)."
    },
    {
      "type": "h3",
      "text": "output_hidden"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_hidden(id)"
    },
    {
      "type": "p",
      "text": "Reactively read whether an output is hidden."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "Whether the output is hidden, or None if the output does not exist."
    },
    {
      "type": "h3",
      "text": "output_width"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_width(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the width of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The width of the output, or None if the output does not exist (or does not report its width)."
    },
    {
      "type": "h3",
      "text": "pixelratio"
    },
    {
      "type": "code",
      "text": "session.ClientData.pixelratio()"
    },
    {
      "type": "p",
      "text": "Reactively read the pixel ratio of the device."
    },
    {
      "type": "h3",
      "text": "url_hash"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_hash()"
    },
    {
      "type": "p",
      "text": "Reactively read the hash part of the URL."
    },
    {
      "type": "h3",
      "text": "url_hash_initial"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_hash_initial()"
    },
    {
      "type": "p",
      "text": "Reactively read the initial hash part of the URL."
    },
    {
      "type": "h3",
      "text": "url_hostname"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_hostname()"
    },
    {
      "type": "p",
      "text": "Reactively read the hostname part of the URL."
    },
    {
      "type": "h3",
      "text": "url_pathname"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_pathname()"
    },
    {
      "type": "p",
      "text": "The pathname part of the URL."
    },
    {
      "type": "h3",
      "text": "url_port"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_port()"
    },
    {
      "type": "p",
      "text": "Reactively read the port part of the URL."
    },
    {
      "type": "h3",
      "text": "url_protocol"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_protocol()"
    },
    {
      "type": "p",
      "text": "Reactively read the protocol part of the URL."
    },
    {
      "type": "h3",
      "text": "url_search"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_search()"
    },
    {
      "type": "p",
      "text": "Reactively read the search part of the URL."
    }
  ],
  "code_examples": [
    "session.ClientData(self, session)",
    "session.ClientData(self, session)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\n# pyright: reportUnknownMemberType=false, reportUnknownVariableType=false\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import input, render, session, ui\n\nwith ui.sidebar(open=\"closed\"):\n    ui.input_slider(\"obs\", \"Number of observations:\", min=0, max=1000, value=500)\n\nui.markdown(\n    \"\"\"\n#### `session.clientdata` values\n\nThe following methods are available from the `session.clientdata` object and allow you\nto reactively read the client data values from the browser.\n\"\"\"\n)\n\n\n@render.code\ndef clientdatatext():\n    return f\"\"\"\n    .url_hash()         -> {session.clientdata.url_hash()}\n    .url_hash_initial() -> {session.clientdata.url_hash_initial()}\n    .url_hostname()     -> {session.clientdata.url_hostname()}\n    .url_pathname()     -> {session.clientdata.url_pathname()}\n    .url_port()         -> {session.clientdata.url_port()}\n    .url_protocol()     -> {session.clientdata.url_protocol()}\n    .url_search()       -> {session.clientdata.url_search()}\n    .pixelratio()       -> {session.clientdata.pixelratio()}\n\n    .output_height(\"myplot\")       -> {session.clientdata.output_height(\"myplot\")}\n    .output_width(\"myplot\")        -> {session.clientdata.output_width(\"myplot\")}\n    .output_hidden(\"myplot\")       -> {session.clientdata.output_hidden(\"myplot\")}\n    .output_bg_color(\"myplot\")     -> {session.clientdata.output_bg_color(\"myplot\")}\n    .output_fg_color(\"myplot\")     -> {session.clientdata.output_fg_color(\"myplot\")}\n    .output_accent_color(\"myplot\") -> {session.clientdata.output_accent_color(\"myplot\")}\n    .output_font(\"myplot\")         -> {session.clientdata.output_font(\"myplot\")}\n    \"\"\"\n\n\n@render.plot\ndef myplot():\n    plt.figure()\n    plt.hist(np.random.normal(size=input.obs()))  # type: ignore\n    plt.title(\"This is myplot\")\n\n",
    "session.ClientData.output_accent_color(id)",
    "session.ClientData.output_accent_color(id)",
    "session.ClientData.output_bg_color(id)",
    "session.ClientData.output_bg_color(id)",
    "session.ClientData.output_fg_color(id)",
    "session.ClientData.output_fg_color(id)",
    "session.ClientData.output_font(id)",
    "session.ClientData.output_font(id)",
    "session.ClientData.output_height(id)",
    "session.ClientData.output_height(id)",
    "session.ClientData.output_hidden(id)",
    "session.ClientData.output_hidden(id)",
    "session.ClientData.output_width(id)",
    "session.ClientData.output_width(id)",
    "session.ClientData.pixelratio()",
    "session.ClientData.pixelratio()",
    "session.ClientData.url_hash()",
    "session.ClientData.url_hash()",
    "session.ClientData.url_hash_initial()",
    "session.ClientData.url_hash_initial()",
    "session.ClientData.url_hostname()",
    "session.ClientData.url_hostname()",
    "session.ClientData.url_pathname()",
    "session.ClientData.url_pathname()",
    "session.ClientData.url_port()",
    "session.ClientData.url_port()",
    "session.ClientData.url_protocol()",
    "session.ClientData.url_protocol()",
    "session.ClientData.url_search()",
    "session.ClientData.url_search()"
  ],
  "toc": [
    {
      "title": "session.ClientData",
      "url": "api/express/#shiny.session.ClientData"
    },
    {
      "title": "Raises",
      "url": "api/express/#raises"
    },
    {
      "title": "Examples",
      "url": "api/express/#examples"
    },
    {
      "title": "Methods",
      "url": "api/express/#methods"
    },
    {
      "title": "output_accent_color",
      "url": "api/express/#shiny.session.ClientData.output_accent_color"
    },
    {
      "title": "output_bg_color",
      "url": "api/express/#shiny.session.ClientData.output_bg_color"
    },
    {
      "title": "output_fg_color",
      "url": "api/express/#shiny.session.ClientData.output_fg_color"
    },
    {
      "title": "output_font",
      "url": "api/express/#shiny.session.ClientData.output_font"
    },
    {
      "title": "output_height",
      "url": "api/express/#shiny.session.ClientData.output_height"
    },
    {
      "title": "output_hidden",
      "url": "api/express/#shiny.session.ClientData.output_hidden"
    },
    {
      "title": "output_width",
      "url": "api/express/#shiny.session.ClientData.output_width"
    },
    {
      "title": "pixelratio",
      "url": "api/express/#shiny.session.ClientData.pixelratio"
    },
    {
      "title": "url_hash",
      "url": "api/express/#shiny.session.ClientData.url_hash"
    },
    {
      "title": "url_hash_initial",
      "url": "api/express/#shiny.session.ClientData.url_hash_initial"
    },
    {
      "title": "url_hostname",
      "url": "api/express/#shiny.session.ClientData.url_hostname"
    },
    {
      "title": "url_pathname",
      "url": "api/express/#shiny.session.ClientData.url_pathname"
    },
    {
      "title": "url_port",
      "url": "api/express/#shiny.session.ClientData.url_port"
    },
    {
      "title": "url_protocol",
      "url": "api/express/#shiny.session.ClientData.url_protocol"
    },
    {
      "title": "url_search",
      "url": "api/express/#shiny.session.ClientData.url_search"
    },
    {
      "title": "Shiny Express API",
      "url": "api/express/index.html"
    },
    {
      "title": "Input components"
    },
    {
      "title": "express.ui.input_select",
      "url": "api/express/express.ui.input_select.html"
    },
    {
      "title": "express.ui.input_selectize",
      "url": "api/express/express.ui.input_selectize.html"
    },
    {
      "title": "express.ui.input_slider",
      "url": "api/express/express.ui.input_slider.html"
    },
    {
      "title": "express.ui.input_dark_mode",
      "url": "api/express/express.ui.input_dark_mode.html"
    },
    {
      "title": "express.ui.input_date",
      "url": "api/express/express.ui.input_date.html"
    },
    {
      "title": "express.ui.input_date_range",
      "url": "api/express/express.ui.input_date_range.html"
    },
    {
      "title": "express.ui.input_checkbox",
      "url": "api/express/express.ui.input_checkbox.html"
    },
    {
      "title": "express.ui.input_checkbox_group",
      "url": "api/express/express.ui.input_checkbox_group.html"
    },
    {
      "title": "express.ui.input_switch",
      "url": "api/express/express.ui.input_switch.html"
    },
    {
      "title": "express.ui.input_radio_buttons",
      "url": "api/express/express.ui.input_radio_buttons.html"
    },
    {
      "title": "express.ui.input_numeric",
      "url": "api/express/express.ui.input_numeric.html"
    },
    {
      "title": "express.ui.input_text",
      "url": "api/express/express.ui.input_text.html"
    },
    {
      "title": "express.ui.input_text_area",
      "url": "api/express/express.ui.input_text_area.html"
    },
    {
      "title": "express.ui.input_password",
      "url": "api/express/express.ui.input_password.html"
    },
    {
      "title": "express.ui.input_action_button",
      "url": "api/express/express.ui.input_action_button.html"
    },
    {
      "title": "express.ui.input_action_link",
      "url": "api/express/express.ui.input_action_link.html"
    },
    {
      "title": "express.ui.input_task_button",
      "url": "api/express/express.ui.input_task_button.html"
    },
    {
      "title": "Output components"
    },
    {
      "title": "express.render.plot",
      "url": "api/express/express.render.plot.html"
    },
    {
      "title": "express.render.table",
      "url": "api/express/express.render.table.html"
    },
    {
      "title": "express.render.DataTable",
      "url": "api/express/express.render.DataTable.html"
    },
    {
      "title": "express.render.data_frame",
      "url": "api/express/express.render.data_frame.html"
    },
    {
      "title": "express.render.DataGrid",
      "url": "api/express/express.render.DataGrid.html"
    },
    {
      "title": "express.render.text",
      "url": "api/express/express.render.text.html"
    },
    {
      "title": "express.render.ui",
      "url": "api/express/express.render.ui.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "express.render.image",
      "url": "api/express/express.render.image.html"
    },
    {
      "title": "express.render.express",
      "url": "api/express/express.render.express.html"
    },
    {
      "title": "Layouts and other UI tools"
    },
    {
      "title": "express.ui.page_opts",
      "url": "api/express/express.ui.page_opts.html"
    },
    {
      "title": "express.ui.sidebar",
      "url": "api/express/express.ui.sidebar.html"
    },
    {
      "title": "express.ui.layout_columns",
      "url": "api/express/express.ui.layout_columns.html"
    },
    {
      "title": "express.ui.layout_column_wrap",
      "url": "api/express/express.ui.layout_column_wrap.html"
    },
    {
      "title": "express.ui.card",
      "url": "api/express/express.ui.card.html"
    },
    {
      "title": "express.ui.card_header",
      "url": "api/express/express.ui.card_header.html"
    },
    {
      "title": "express.ui.card_footer",
      "url": "api/express/express.ui.card_footer.html"
    },
    {
      "title": "express.ui.value_box",
      "url": "api/express/express.ui.value_box.html"
    },
    {
      "title": "express.ui.value_box_theme",
      "url": "api/express/express.ui.value_box_theme.html"
    },
    {
      "title": "express.ui.popover",
      "url": "api/express/express.ui.popover.html"
    },
    {
      "title": "express.ui.tooltip",
      "url": "api/express/express.ui.tooltip.html"
    },
    {
      "title": "express.ui.accordion",
      "url": "api/express/express.ui.accordion.html"
    },
    {
      "title": "express.ui.accordion_panel",
      "url": "api/express/express.ui.accordion_panel.html"
    },
    {
      "title": "express.ui.layout_sidebar",
      "url": "api/express/express.ui.layout_sidebar.html"
    },
    {
      "title": "Navigate multiple panels"
    },
    {
      "title": "express.ui.nav_panel",
      "url": "api/express/express.ui.nav_panel.html"
    },
    {
      "title": "express.ui.navset_card_underline",
      "url": "api/express/express.ui.navset_card_underline.html"
    },
    {
      "title": "express.ui.navset_card_tab",
      "url": "api/express/express.ui.navset_card_tab.html"
    },
    {
      "title": "express.ui.navset_card_pill",
      "url": "api/express/express.ui.navset_card_pill.html"
    },
    {
      "title": "express.ui.nav_spacer",
      "url": "api/express/express.ui.nav_spacer.html"
    },
    {
      "title": "express.ui.nav_menu",
      "url": "api/express/express.ui.nav_menu.html"
    },
    {
      "title": "express.ui.nav_control",
      "url": "api/express/express.ui.nav_control.html"
    },
    {
      "title": "express.ui.navset_bar",
      "url": "api/express/express.ui.navset_bar.html"
    },
    {
      "title": "express.ui.navset_tab",
      "url": "api/express/express.ui.navset_tab.html"
    },
    {
      "title": "express.ui.navset_pill",
      "url": "api/express/express.ui.navset_pill.html"
    },
    {
      "title": "express.ui.navset_underline",
      "url": "api/express/express.ui.navset_underline.html"
    },
    {
      "title": "express.ui.navset_pill_list",
      "url": "api/express/express.ui.navset_pill_list.html"
    },
    {
      "title": "express.ui.navset_hidden",
      "url": "api/express/express.ui.navset_hidden.html"
    },
    {
      "title": "express.ui.navbar_options",
      "url": "api/express/express.ui.navbar_options.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "express.ui.Chat",
      "url": "api/express/express.ui.Chat.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "express.ui.MarkdownStream",
      "url": "api/express/express.ui.MarkdownStream.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/express/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/express/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/express/reactive.value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/express/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/express/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/express/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/express/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/express/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/express/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/express/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/express/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/express/req.html"
    },
    {
      "title": "Reusable Express code"
    },
    {
      "title": "express.ui.hold",
      "url": "api/express/express.ui.hold.html"
    },
    {
      "title": "express.expressify",
      "url": "api/express/express.expressify.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "express.ui.update_select",
      "url": "api/express/express.ui.update_select.html"
    },
    {
      "title": "express.ui.update_selectize",
      "url": "api/express/express.ui.update_selectize.html"
    },
    {
      "title": "express.ui.update_slider",
      "url": "api/express/express.ui.update_slider.html"
    },
    {
      "title": "express.ui.update_dark_mode",
      "url": "api/express/express.ui.update_dark_mode.html"
    },
    {
      "title": "express.ui.update_date",
      "url": "api/express/express.ui.update_date.html"
    },
    {
      "title": "express.ui.update_date_range",
      "url": "api/express/express.ui.update_date_range.html"
    },
    {
      "title": "express.ui.update_checkbox",
      "url": "api/express/express.ui.update_checkbox.html"
    },
    {
      "title": "express.ui.update_checkbox_group",
      "url": "api/express/express.ui.update_checkbox_group.html"
    },
    {
      "title": "express.ui.update_switch",
      "url": "api/express/express.ui.update_switch.html"
    },
    {
      "title": "express.ui.update_radio_buttons",
      "url": "api/express/express.ui.update_radio_buttons.html"
    },
    {
      "title": "express.ui.update_numeric",
      "url": "api/express/express.ui.update_numeric.html"
    },
    {
      "title": "express.ui.update_text",
      "url": "api/express/express.ui.update_text.html"
    },
    {
      "title": "express.ui.update_text_area",
      "url": "api/express/express.ui.update_text_area.html"
    },
    {
      "title": "express.ui.update_navs",
      "url": "api/express/express.ui.update_navs.html"
    },
    {
      "title": "express.ui.update_action_button",
      "url": "api/express/express.ui.update_action_button.html"
    },
    {
      "title": "express.ui.update_action_link",
      "url": "api/express/express.ui.update_action_link.html"
    },
    {
      "title": "express.ui.update_task_button",
      "url": "api/express/express.ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "express.ui.update_sidebar",
      "url": "api/express/express.ui.update_sidebar.html"
    },
    {
      "title": "express.ui.update_tooltip",
      "url": "api/express/express.ui.update_tooltip.html"
    },
    {
      "title": "express.ui.update_popover",
      "url": "api/express/express.ui.update_popover.html"
    },
    {
      "title": "express.ui.update_accordion",
      "url": "api/express/express.ui.update_accordion.html"
    },
    {
      "title": "express.ui.update_accordion_panel",
      "url": "api/express/express.ui.update_accordion_panel.html"
    },
    {
      "title": "express.ui.insert_accordion_panel",
      "url": "api/express/express.ui.insert_accordion_panel.html"
    },
    {
      "title": "express.ui.remove_accordion_panel",
      "url": "api/express/express.ui.remove_accordion_panel.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "express.ui.help_text",
      "url": "api/express/express.ui.help_text.html"
    },
    {
      "title": "express.ui.notification_show",
      "url": "api/express/express.ui.notification_show.html"
    },
    {
      "title": "express.ui.notification_remove",
      "url": "api/express/express.ui.notification_remove.html"
    },
    {
      "title": "express.ui.modal",
      "url": "api/express/express.ui.modal.html"
    },
    {
      "title": "express.ui.modal_show",
      "url": "api/express/express.ui.modal_show.html"
    },
    {
      "title": "express.ui.modal_remove",
      "url": "api/express/express.ui.modal_remove.html"
    },
    {
      "title": "express.ui.modal_button",
      "url": "api/express/express.ui.modal_button.html"
    },
    {
      "title": "express.ui.Progress",
      "url": "api/express/express.ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "express.module",
      "url": "api/express/express.module.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "express.ui.panel_absolute",
      "url": "api/express/express.ui.panel_absolute.html"
    },
    {
      "title": "express.ui.panel_fixed",
      "url": "api/express/express.ui.panel_fixed.html"
    },
    {
      "title": "express.ui.panel_title",
      "url": "api/express/express.ui.panel_title.html"
    },
    {
      "title": "express.ui.panel_well",
      "url": "api/express/express.ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "express.ui.input_file",
      "url": "api/express/express.ui.input_file.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "Dynamic UI"
    },
    {
      "title": "express.ui.panel_conditional",
      "url": "api/express/express.ui.panel_conditional.html"
    },
    {
      "title": "express.ui.insert_ui",
      "url": "api/express/express.ui.insert_ui.html"
    },
    {
      "title": "express.ui.remove_ui",
      "url": "api/express/express.ui.remove_ui.html"
    },
    {
      "title": "User Session"
    },
    {
      "title": "session.Session",
      "url": "api/express/session.Session.html"
    },
    {
      "title": "Client Data"
    },
    {
      "title": "session.ClientData",
      "url": "api/express/session.ClientData.html"
    },
    {
      "title": "UI as HTML"
    },
    {
      "title": "express.ui.Theme",
      "url": "api/express/express.ui.Theme.html"
    },
    {
      "title": "express.ui.markdown",
      "url": "api/express/express.ui.markdown.html"
    },
    {
      "title": "express.ui.include_css",
      "url": "api/express/express.ui.include_css.html"
    },
    {
      "title": "express.ui.include_js",
      "url": "api/express/express.ui.include_js.html"
    },
    {
      "title": "express.ui.HTML",
      "url": "api/express/express.ui.HTML.html"
    },
    {
      "title": "express.ui.tags",
      "url": "api/express/express.ui.tags.html"
    },
    {
      "title": "express.ui.TagList",
      "url": "api/express/express.ui.TagList.html"
    },
    {
      "title": "express.ui.busy_indicators.use",
      "url": "api/express/express.ui.busy_indicators.use.html"
    },
    {
      "title": "express.ui.busy_indicators.options",
      "url": "api/express/express.ui.busy_indicators.options.html"
    },
    {
      "title": "Application-level settings"
    },
    {
      "title": "express.app_opts",
      "url": "api/express/express.app_opts.html"
    },
    {
      "title": "Express developer tooling"
    },
    {
      "title": "express.is_express_app",
      "url": "api/express/express.is_express_app.html"
    },
    {
      "title": "express.wrap_express_app",
      "url": "api/express/express.wrap_express_app.html"
    }
  ]
}