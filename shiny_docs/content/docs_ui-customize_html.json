{
  "metadata": {
    "title": "Customizing UI – Shiny for Python",
    "description": "",
    "url": "docs/ui-customize.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "🎨 User interfaces",
        "Customizing UI"
      ]
    },
    {
      "type": "h1",
      "text": "Customizing UI"
    },
    {
      "type": "p",
      "text": "This article covers various levels of ways of customizing the overall look and feel of your Shiny app."
    },
    {
      "type": "p",
      "text": "The techniques covered here are intentionally generic (i.e., applies to all UI). Some components may have additional customization options (e.g., ui.sidebar() has a bg argument to change the background color)."
    },
    {
      "type": "h2",
      "text": "Shinyswatch"
    },
    {
      "type": "p",
      "text": "The shinyswatch package makes is very easy to change the look of your app, and provides over a dozen different bootswatch themes to choose from. Simply choose a theme from shinyswatch.theme.<theme_name> and pass it to the theme argument of the page function (Shiny Core) or ui.page_opts() (Shiny Express)."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\n\nfrom shinyswatch import theme\nfrom shiny.express import render, ui\n\nui.page_opts(title=\"Hello shinyswatch theme\", theme=theme.darkly)\n\nwith ui.sidebar():\n    \"Sidebar content\"\n\n\"Main content\"\n## file: requirements.txt\nshinyswatch"
    },
    {
      "type": "h2",
      "text": "Custom CSS"
    },
    {
      "type": "p",
      "text": "If you want to customize the look of your app beyond what is available in shinyswatch, a natural next step is to add custom CSS. This is pretty straightforward to do since UI components are HTML. That said, you’ll at least want to know the basics of CSS, including CSS selectors before you get started."
    },
    {
      "type": "h3",
      "text": "CSS string"
    },
    {
      "type": "p",
      "text": "If you don’t need much CSS, you can add a string of CSS directly to your UI with ui.tags.style(). This is convenient because you don’t need to create an external file, but it can be a bit cumbersome if you have a lot of CSS."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.style(\n    \".card-header { color:white; background:#2A2A2A !important; }\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\""
    },
    {
      "type": "h3",
      "text": "CSS file"
    },
    {
      "type": "p",
      "text": "If you have a lot of CSS, put it in an external file and import it with ui.include_css()."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom pathlib import Path\nfrom shiny.express import ui\n\nui.include_css(\n    Path(__file__).parent / \"my-styles.css\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n## file: my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}"
    },
    {
      "type": "h3",
      "text": "Inline styles"
    },
    {
      "type": "p",
      "text": "Most UI components provide the opportunity to add an inline style (i.e., CSS that is applied directly to the element). This approach may be preferrable to an external CSS file if you only need to apply the style to one element, or if you want to apply style(s) programatically."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nwith ui.card():\n    ui.card_header(\"Card header\", style=\"color:white; background:#2A2A2A !important;\")\n    \"Card body\""
    },
    {
      "type": "h3",
      "text": "Utility classes"
    },
    {
      "type": "p",
      "text": "Since Shiny provides Bootstrap by default, you can use Bootstrap utility classes to customize your app. For example, you can bg-primary to change the background color, and lead to change the font weight. In addition to colors and fonts, utility classes are super useful for things like spacing, alignment, and borders."
    },
    {
      "type": "p",
      "text": "Note this approach is similar to inline styles (i.e., per element styling), but has the advantage of abstracting the actual styling away from the element itself, which is especially useful when used in conjunction with CSS variables."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nwith ui.card():\n    ui.card_header(\"Card header\", class_=\"bg-primary-subtle lead\")\n    \"Card body\""
    },
    {
      "type": "h3",
      "text": "CSS Variables"
    },
    {
      "type": "p",
      "text": "Bootstrap’s CSS variables provide another nice entry point to customizing your app, especially if you want to make sweeping changes to Bootstrap’s default styles. For example, you can change the primary color by setting the --bs-primary-rgb variable."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.style(\":root { --bs-primary-rgb: 113,46,246; }\")\n\nwith ui.card():\n    ui.card_header(\"Card header\", class_=\"bg-primary lead\"),\n    \"Card body\""
    },
    {
      "type": "p",
      "text": "To learn more about Bootstrap’s CSS variables, check out the Bootstrap docs."
    },
    {
      "type": "h3",
      "text": "Fonts"
    },
    {
      "type": "p",
      "text": "When using a custom font, its good practice to import the relevant font files into your app. This is because the font may not be available on the user’s computer, and importing the font files ensures that the font will be available to the user. One way to import font files is to import them from a service like Google Fonts."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.link(\n    rel=\"stylesheet\",\n    href=\"https://fonts.googleapis.com/css?family=Roboto\"\n)\n\nui.tags.style(\n    \"body { font-family: 'Roboto', sans-serif; }\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\""
    },
    {
      "type": "p",
      "text": "That said, if you want your app to work properly offline, you’ll want to serve the font files with the app, which is covered next."
    },
    {
      "type": "h2",
      "text": "Serve local files"
    },
    {
      "type": "p",
      "text": "When customizing UI with CSS (and/or JavaScript), it’s often useful to serve local files (e.g., fonts, images, CSS, etc) to the app. This can be done by providing a value for static_assets; the syntax for doing this is slightly different for Core and Express apps."
    },
    {
      "type": "ul",
      "items": [
        "Express",
        "Core"
      ]
    },
    {
      "type": "p",
      "text": "In Shiny Express, if you have a subdirectory named www, the contents of that directory will automatically be available to the application’s UI at /."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.link(href=\"my-styles.css\", rel=\"stylesheet\")\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n\n## file: www/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n"
    },
    {
      "type": "p",
      "text": "If you want to mount other directories, you can use the app_opts() function:"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import app_opts, ui\n\n# Mount the local directory css_files at the web path /css\napp_opts(static_assets={ \"/css\" : \"css_files\" })\n\nui.tags.link(href=\"css/my-styles.css\", rel=\"stylesheet\")\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n\n## file: css_files/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n"
    },
    {
      "type": "p",
      "text": "To make static files available for the UI in Shiny Core, use the static_assets argument of shiny.App(). Unlike Shiny Express, the www subdirectory is not automatically mounted at / but you can add it manually like any other static asset directory."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom pathlib import Path\nfrom shiny import App, ui\n\napp_ui = ui.page_fixed(\n    ui.tags.link(href=\"my-styles.css\", rel=\"stylesheet\"),\n    ui.card(\n        ui.card_header(\"Card header\"),\n        \"Card body\"\n    )\n)\n\napp_dir = Path(__file__).parent\napp = App(app_ui, None, static_assets=app_dir / \"www\")\n\n## file: www/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n"
    },
    {
      "type": "h2",
      "text": "Distribute styles"
    },
    {
      "type": "p",
      "text": "The HTMLDependency class (from htmltools) provides a useful mechanism to distribute custom styles and other files, especially when the CSS/JS should be loaded only once. A useful pattern to make those assets more accessible to others is to export a function from your Python package which returns an HTMLDependency object (this is essentially what shinyswatch does). This way, after a user installs your package, they will be able to call this function anywhere in their UI code to insert the theme."
    },
    {
      "type": "code",
      "text": "from htmltools import HTMLDependency\n\ndef acme_theme():\n    return HTMLDependency(\n        name=\"acme_theme\",\n        version=\"0.01\",\n        source={\"package\": \"acme_theme\", \"subdir\": \"acme-theme\"},\n        stylesheet=[{\"href\": \"acme-theme.css\"}],\n        script=[{\"src\": \"acme-theme.js\"}],\n        # If you want other files in the acme-theme dir to be served\n        all_files=True\n    )"
    },
    {
      "type": "p",
      "text": "If you’re interested in creating custom Shiny bindings, you’ll learn more about using this mechanism to attach CSS/JS to your custom component."
    },
    {
      "type": "p",
      "text": "If your CSS/JS assets are large, you may want to minify them to improve app performance."
    }
  ],
  "code_examples": [
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\n\nfrom shinyswatch import theme\nfrom shiny.express import render, ui\n\nui.page_opts(title=\"Hello shinyswatch theme\", theme=theme.darkly)\n\nwith ui.sidebar():\n    \"Sidebar content\"\n\n\"Main content\"\n## file: requirements.txt\nshinyswatch",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.style(\n    \".card-header { color:white; background:#2A2A2A !important; }\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom pathlib import Path\nfrom shiny.express import ui\n\nui.include_css(\n    Path(__file__).parent / \"my-styles.css\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n## file: my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nwith ui.card():\n    ui.card_header(\"Card header\", style=\"color:white; background:#2A2A2A !important;\")\n    \"Card body\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nwith ui.card():\n    ui.card_header(\"Card header\", class_=\"bg-primary-subtle lead\")\n    \"Card body\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.style(\":root { --bs-primary-rgb: 113,46,246; }\")\n\nwith ui.card():\n    ui.card_header(\"Card header\", class_=\"bg-primary lead\"),\n    \"Card body\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.link(\n    rel=\"stylesheet\",\n    href=\"https://fonts.googleapis.com/css?family=Roboto\"\n)\n\nui.tags.style(\n    \"body { font-family: 'Roboto', sans-serif; }\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.link(href=\"my-styles.css\", rel=\"stylesheet\")\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n\n## file: www/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import app_opts, ui\n\n# Mount the local directory css_files at the web path /css\napp_opts(static_assets={ \"/css\" : \"css_files\" })\n\nui.tags.link(href=\"css/my-styles.css\", rel=\"stylesheet\")\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n\n## file: css_files/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom pathlib import Path\nfrom shiny import App, ui\n\napp_ui = ui.page_fixed(\n    ui.tags.link(href=\"my-styles.css\", rel=\"stylesheet\"),\n    ui.card(\n        ui.card_header(\"Card header\"),\n        \"Card body\"\n    )\n)\n\napp_dir = Path(__file__).parent\napp = App(app_ui, None, static_assets=app_dir / \"www\")\n\n## file: www/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n",
    "from htmltools import HTMLDependency\n\ndef acme_theme():\n    return HTMLDependency(\n        name=\"acme_theme\",\n        version=\"0.01\",\n        source={\"package\": \"acme_theme\", \"subdir\": \"acme-theme\"},\n        stylesheet=[{\"href\": \"acme-theme.css\"}],\n        script=[{\"src\": \"acme-theme.js\"}],\n        # If you want other files in the acme-theme dir to be served\n        all_files=True\n    )",
    "from htmltools import HTMLDependency\n\ndef acme_theme():\n    return HTMLDependency(\n        name=\"acme_theme\",\n        version=\"0.01\",\n        source={\"package\": \"acme_theme\", \"subdir\": \"acme-theme\"},\n        stylesheet=[{\"href\": \"acme-theme.css\"}],\n        script=[{\"src\": \"acme-theme.js\"}],\n        # If you want other files in the acme-theme dir to be served\n        all_files=True\n    )"
  ],
  "toc": [
    {
      "title": "Shinyswatch",
      "url": "docs/#shinyswatch"
    },
    {
      "title": "Custom CSS",
      "url": "docs/#custom-css"
    },
    {
      "title": "CSS string",
      "url": "docs/#css-string"
    },
    {
      "title": "CSS file",
      "url": "docs/#css-file"
    },
    {
      "title": "Inline styles",
      "url": "docs/#inline-styles"
    },
    {
      "title": "Utility classes",
      "url": "docs/#utility-classes"
    },
    {
      "title": "CSS Variables",
      "url": "docs/#css-variables"
    },
    {
      "title": "Fonts",
      "url": "docs/#fonts"
    },
    {
      "title": "Serve local files",
      "url": "docs/#serve-local-files"
    },
    {
      "title": "Distribute styles",
      "url": "docs/#distribute-styles"
    },
    {
      "title": "📌 Essentials"
    },
    {
      "title": "Overview",
      "url": "docs/overview.html"
    },
    {
      "title": "User interfaces",
      "url": "docs/user-interfaces.html"
    },
    {
      "title": "🤖 Generative AI"
    },
    {
      "title": "Get inspired",
      "url": "docs/genai-inspiration.html"
    },
    {
      "title": "Chatbots",
      "url": "docs/genai-chatbots.html"
    },
    {
      "title": "Streaming",
      "url": "docs/genai-stream.html"
    },
    {
      "title": "Tool calling",
      "url": "docs/genai-tools.html"
    },
    {
      "title": "Structured data",
      "url": "docs/genai-structured-data.html"
    },
    {
      "title": "RAG",
      "url": "docs/genai-rag.html"
    },
    {
      "title": "🎨 User interfaces"
    },
    {
      "title": "Overview",
      "url": "docs/ui-overview.html"
    },
    {
      "title": "Jupyter Widgets",
      "url": "docs/jupyter-widgets.html"
    },
    {
      "title": "Dynamic UI",
      "url": "docs/ui-dynamic.html"
    },
    {
      "title": "UI as HTML",
      "url": "docs/ui-html.html"
    },
    {
      "title": "Customizing UI",
      "url": "docs/ui-customize.html"
    },
    {
      "title": "⚡ Reactivity"
    },
    {
      "title": "Foundations",
      "url": "docs/reactive-foundations.html"
    },
    {
      "title": "Patterns",
      "url": "docs/reactive-patterns.html"
    },
    {
      "title": "Mutable objects",
      "url": "docs/reactive-mutable.html"
    },
    {
      "title": "📝 Syntax modes"
    },
    {
      "title": "Express vs. Core",
      "url": "docs/express-vs-core.html"
    },
    {
      "title": "Choosing a syntax",
      "url": "docs/express-or-core.html"
    },
    {
      "title": "Express in depth",
      "url": "docs/express-in-depth.html"
    },
    {
      "title": "Transition to Core",
      "url": "docs/express-to-core.html"
    },
    {
      "title": "📦 Modules"
    },
    {
      "title": "Shiny Modules",
      "url": "docs/modules.html"
    },
    {
      "title": "Module Communication",
      "url": "docs/module-communication.html"
    },
    {
      "title": "🧪 Testing"
    },
    {
      "title": "Unit testing",
      "url": "docs/unit-testing.html"
    },
    {
      "title": "End-to-End Testing Your App",
      "url": "docs/end-to-end-testing.html"
    },
    {
      "title": "🏗️ Extending"
    },
    {
      "title": "Custom JavaScript component",
      "url": "docs/custom-component-one-off.html"
    },
    {
      "title": "Custom components package",
      "url": "docs/custom-components-pkg.html"
    },
    {
      "title": "📊 Comparisons"
    },
    {
      "title": "Streamlit",
      "url": "docs/comp-streamlit.html"
    },
    {
      "title": "Shiny for R",
      "url": "docs/comp-r-shiny.html"
    },
    {
      "title": "🧩 Miscellaneous"
    },
    {
      "title": "Non-blocking operations",
      "url": "docs/nonblocking.html"
    },
    {
      "title": "Routing",
      "url": "docs/routing.html"
    }
  ]
}