{
  "metadata": {
    "title": "Chat – Shiny for Python",
    "description": "",
    "url": "components/display-messages/chat/index.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Display Messages",
        "Chat"
      ]
    },
    {
      "type": "h1",
      "text": "Chat"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it\nchat = ui.Chat(id=\"chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")"
    },
    {
      "type": "ul",
      "items": [
        "Express",
        "Core"
      ]
    },
    {
      "type": "code",
      "text": "from shiny.express import ui\n\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it \nchat = ui.Chat(id=\"chat\")  \nchat.ui()  \n\n# Define a callback to run when the user submits a message \n@chat.on_user_submit  \nasync def handle_user_input(user_input: str):  \n    # Simply echo the user's input back to them \n    await chat.append_message(f\"You said: {user_input}\")  "
    },
    {
      "type": "code",
      "text": "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),  \n    fillable_mobile=True,\n)\n\ndef server(input):\n    # Create a chat instance and display it\n    chat = ui.Chat(id=\"chat\")  \n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit  \n    async def handle_user_input(user_input: str):  \n        # Simply echo the user's input back to them\n        await chat.append_message(f\"You said: {user_input}\")  \n\napp = App(app_ui, server)"
    },
    {
      "type": "p",
      "text": "The example above is a bare-bones chat interface where the “assistant” simply echoes back the user’s input. Visit the article on chatbots to learn how to get Chat() working with an LLM provider of your choice. That article also covers features of the Chat() component in more detail."
    },
    {
      "type": "p",
      "text": "Chatbots article"
    },
    {
      "type": "h2",
      "text": "Relevant Functions"
    },
    {
      "type": "ul",
      "items": [
        "chat = ui.Chat() ui.Chat(id, on_error=\"auto\")",
        "chat.ui() chat.ui(placeholder=\"Enter a message...\", width=\"min(680px, 100%)\", height=\"auto\", fill=True)",
        "@chat.on_user_submit chat.on_user_submit(fn)",
        "chat.append_message_stream() chat.append_message_stream(message)",
        "chat.append_message() chat.append_message(message)"
      ]
    },
    {
      "type": "p",
      "text": "chat = ui.Chat() ui.Chat(id, on_error=\"auto\")"
    },
    {
      "type": "p",
      "text": "chat.ui() chat.ui(placeholder=\"Enter a message...\", width=\"min(680px, 100%)\", height=\"auto\", fill=True)"
    },
    {
      "type": "p",
      "text": "@chat.on_user_submit chat.on_user_submit(fn)"
    },
    {
      "type": "p",
      "text": "chat.append_message_stream() chat.append_message_stream(message)"
    },
    {
      "type": "p",
      "text": "chat.append_message() chat.append_message(message)"
    }
  ],
  "code_examples": [
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it\nchat = ui.Chat(id=\"chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it\nchat = ui.Chat(id=\"chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
    "from shiny.express import ui\n\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it \nchat = ui.Chat(id=\"chat\")  \nchat.ui()  \n\n# Define a callback to run when the user submits a message \n@chat.on_user_submit  \nasync def handle_user_input(user_input: str):  \n    # Simply echo the user's input back to them \n    await chat.append_message(f\"You said: {user_input}\")  ",
    "from shiny.express import ui\n\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it \nchat = ui.Chat(id=\"chat\")  \nchat.ui()  \n\n# Define a callback to run when the user submits a message \n@chat.on_user_submit  \nasync def handle_user_input(user_input: str):  \n    # Simply echo the user's input back to them \n    await chat.append_message(f\"You said: {user_input}\")  ",
    "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),  \n    fillable_mobile=True,\n)\n\ndef server(input):\n    # Create a chat instance and display it\n    chat = ui.Chat(id=\"chat\")  \n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit  \n    async def handle_user_input(user_input: str):  \n        # Simply echo the user's input back to them\n        await chat.append_message(f\"You said: {user_input}\")  \n\napp = App(app_ui, server)",
    "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),  \n    fillable_mobile=True,\n)\n\ndef server(input):\n    # Create a chat instance and display it\n    chat = ui.Chat(id=\"chat\")  \n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit  \n    async def handle_user_input(user_input: str):  \n        # Simply echo the user's input back to them\n        await chat.append_message(f\"You said: {user_input}\")  \n\napp = App(app_ui, server)"
  ],
  "toc": [
    {
      "title": "COMPONENTS",
      "url": "components/"
    },
    {
      "title": "Inputs"
    },
    {
      "title": "Action Button",
      "url": "components/inputs/action-button/index.html"
    },
    {
      "title": "Action Link",
      "url": "components/inputs/action-link/index.html"
    },
    {
      "title": "Checkbox",
      "url": "components/inputs/checkbox/index.html"
    },
    {
      "title": "Checkbox Group",
      "url": "components/inputs/checkbox-group/index.html"
    },
    {
      "title": "Date Range Selector",
      "url": "components/inputs/date-range-selector/index.html"
    },
    {
      "title": "Date Selector",
      "url": "components/inputs/date-selector/index.html"
    },
    {
      "title": "File Input",
      "url": "components/inputs/file/index.html"
    },
    {
      "title": "Numeric Input",
      "url": "components/inputs/numeric-input/index.html"
    },
    {
      "title": "Password Field",
      "url": "components/inputs/password-field/index.html"
    },
    {
      "title": "Radio Buttons",
      "url": "components/inputs/radio-buttons/index.html"
    },
    {
      "title": "Select (Single)",
      "url": "components/inputs/select-single/index.html"
    },
    {
      "title": "Select (Multiple)",
      "url": "components/inputs/select-multiple/index.html"
    },
    {
      "title": "Selectize (Single)",
      "url": "components/inputs/selectize-single/index.html"
    },
    {
      "title": "Selectize (Multiple)",
      "url": "components/inputs/selectize-multiple/index.html"
    },
    {
      "title": "Slider",
      "url": "components/inputs/slider/index.html"
    },
    {
      "title": "Slider Range",
      "url": "components/inputs/slider-range/index.html"
    },
    {
      "title": "Switch",
      "url": "components/inputs/switch/index.html"
    },
    {
      "title": "Text Area",
      "url": "components/inputs/text-area/index.html"
    },
    {
      "title": "Text Box",
      "url": "components/inputs/text-box/index.html"
    },
    {
      "title": "Outputs"
    },
    {
      "title": "Data Grid",
      "url": "components/outputs/data-grid/index.html"
    },
    {
      "title": "Data Table",
      "url": "components/outputs/data-table/index.html"
    },
    {
      "title": "Image",
      "url": "components/outputs/image/index.html"
    },
    {
      "title": "Map (ipyleaflet)",
      "url": "components/outputs/map-ipyleaflet/index.html"
    },
    {
      "title": "Plot (Matplotlib)",
      "url": "components/outputs/plot-matplotlib/index.html"
    },
    {
      "title": "Plot (Plotly)",
      "url": "components/outputs/plot-plotly/index.html"
    },
    {
      "title": "Plot (Seaborn)",
      "url": "components/outputs/plot-seaborn/index.html"
    },
    {
      "title": "Text",
      "url": "components/outputs/text/index.html"
    },
    {
      "title": "UI",
      "url": "components/outputs/ui/index.html"
    },
    {
      "title": "Value Box",
      "url": "components/outputs/value-box/index.html"
    },
    {
      "title": "Verbatim Text",
      "url": "components/outputs/verbatim-text/index.html"
    },
    {
      "title": "Display Messages"
    },
    {
      "title": "Chat",
      "url": "components/display-messages/chat/index.html"
    },
    {
      "title": "Modal",
      "url": "components/display-messages/modal/index.html"
    },
    {
      "title": "Notifications",
      "url": "components/display-messages/notifications/index.html"
    },
    {
      "title": "Progress Bar",
      "url": "components/display-messages/progress-bar/index.html"
    },
    {
      "title": "Tooltips",
      "url": "components/display-messages/tooltips/index.html"
    }
  ]
}