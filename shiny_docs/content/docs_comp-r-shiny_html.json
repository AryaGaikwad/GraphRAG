{
  "metadata": {
    "title": "Shiny for R – Shiny for Python",
    "description": "",
    "url": "docs/comp-r-shiny.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "📊 Comparisons",
        "Shiny for R"
      ]
    },
    {
      "type": "h1",
      "text": "Shiny for R"
    },
    {
      "type": "p",
      "text": "The R and Python Shiny packages are quite similar, and as a result if you know how to build a Shiny app in R you are well on your way to building one in Python. All of the main components of Shiny like reactivity, rendering functions, and modules are the same, and both packages use the same JavaScript code. There are, however, a few differences that you need to keep in mind in order to build effective Shiny applications in Python. If you’re reading this, we expect that you are an existing R Shiny user with some Python knowledge."
    },
    {
      "type": "p",
      "text": "Shiny express is a new, more expressive, way to build PyShiny apps. It is not available in R, so the comparisons drawn below are only relevant to core (i.e., non-express) apps."
    },
    {
      "type": "h1",
      "text": "Getting started"
    },
    {
      "type": "p",
      "text": "R users tend to use the R console to install and run Shiny while Python requires you to use the terminal. To get started you can do the following (or see the installation instructions for a more in-depth explanation):"
    },
    {
      "type": "ol",
      "items": [
        "In your terminal, create a new directory with mkdir <my_directory> and navigate into it with cd <my_directory>",
        "Install Shiny. We strongly recommend using a virtual environment for this as it will eliminate dependency resolution headaches and make deployment easier."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Install with pip",
        "Install with conda"
      ]
    },
    {
      "type": "code",
      "text": "# Create a virtual environment in the .venv subdirectory\npython3 -m venv venv\nsource venv/bin/activate\n# Install shiny\npip install shiny"
    },
    {
      "type": "code",
      "text": "# Create a conda environment named 'myenv'\nconda create --name myenv\nconda activate myenv\nconda install -c conda-forge shiny"
    },
    {
      "type": "ol",
      "items": [
        "Call shiny create . to create an example shiny app in your directory",
        "Call shiny run --reload to run the app and reload when the source code changes"
      ]
    },
    {
      "type": "ul",
      "items": [
        "Always use a virtual environment with Python projects",
        "Install and run shiny from the command line, not a Python process"
      ]
    },
    {
      "type": "h1",
      "text": "Syntax differences"
    },
    {
      "type": "p",
      "text": "There are five main syntax difference between the R and Python versions of Shiny:"
    },
    {
      "type": "ol",
      "items": [
        "Decorators instead of render functions",
        "Function names are used to connect outputs to the UI",
        "More precise namespaces",
        "All inputs are invoked with input.<input_name>()",
        "Some functions have different names"
      ]
    },
    {
      "type": "h2",
      "text": "Decorators"
    },
    {
      "type": "p",
      "text": "Shiny for Python uses decorators instead of top level rendering functions. Decorators are just python functions which take other functions and are invoked by putting @<decorator> above the function definition. While R doesn’t have an exact analog to decorators they are similar to function operators you like purrr::safely."
    },
    {
      "type": "ul",
      "items": [
        "Use rendering decorators like @render.plot, @render.text, or @render.ui instead of renderPlot(), renderText, or renderUI",
        "Reactive calculations (equivalent to reactive expressions in R) are decorated @reactive.calc, and reactive effects (equivalent to observers in R) are decorated with @reactive.effect."
      ]
    },
    {
      "type": "h4",
      "text": "R"
    },
    {
      "type": "code",
      "text": "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output, session) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n, \" * 2\")\n  })\n}\n\nshinyApp(ui, server)"
    },
    {
      "type": "h4",
      "text": "Python"
    },
    {
      "type": "code",
      "text": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)"
    },
    {
      "type": "h2",
      "text": "Connecting outputs"
    },
    {
      "type": "p",
      "text": "Both R an Python use a special object type to connect server computations to UI components, but the interface is quite different. In R, we connect outputs to UI elements by assigning into the output object but since Python renderings are produced with decorators, we instead use the function name to connect the rendered object to its UI component."
    },
    {
      "type": "ul",
      "items": [
        "In Python, we don’t define outputs by assigning to output$x",
        "Use the function name to connect a server output to a UI element"
      ]
    },
    {
      "type": "h4",
      "text": "R"
    },
    {
      "type": "code",
      "text": "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)"
    },
    {
      "type": "h4",
      "text": "Python"
    },
    {
      "type": "code",
      "text": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)"
    },
    {
      "type": "h3",
      "text": "Submodules"
    },
    {
      "type": "p",
      "text": "All of the Shiny R functions are in a single package namespace. On the Python side we make use of submodules to keep related functions together. Note that “submodules” in this case refers to the generic module which is not the same as shiny modules. For example, instead of sliderInput(), you would call ui.input_slider(), where the ui. refers to a submodule of the main shiny module."
    },
    {
      "type": "ul",
      "items": [
        "Python submodules make autocomplete easier",
        "Some important namespaces include: ui for the UI elements render includes the rendering decorators reactive has reactive expressions and observers"
      ]
    },
    {
      "type": "ul",
      "items": [
        "ui for the UI elements",
        "render includes the rendering decorators",
        "reactive has reactive expressions and observers"
      ]
    },
    {
      "type": "h4",
      "text": "R"
    },
    {
      "type": "code",
      "text": "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)"
    },
    {
      "type": "h4",
      "text": "Python"
    },
    {
      "type": "code",
      "text": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)"
    },
    {
      "type": "h3",
      "text": "Call inputs with ()"
    },
    {
      "type": "p",
      "text": "In R reactive values and reactive expressions are retrieved with different syntax. Reactive values like input$value are retrieved like variables while reactive expressions are called like functions my_reactive()."
    },
    {
      "type": "p",
      "text": "This interface makes it seem like inputs and reactive expressions are different types of thing when in fact they’re the same type of thing. In Python we chose to require that all reactive objects be retrieved with a function call. So instead of calling input.value you use input.value()."
    },
    {
      "type": "h3",
      "text": "R"
    },
    {
      "type": "code",
      "text": "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n\n  n <- reactive({input$n})\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", n(),\" * 2\")\n  })\n}\n\n\nshinyApp(ui, server)"
    },
    {
      "type": "h3",
      "text": "Python"
    },
    {
      "type": "code",
      "text": "from shiny import ui, render, reactive, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def n():\n      return input.n()\n\n    @render.text\n    def txt():\n        return f\"n*2 is {n() * 2}\"\n\napp = App(app_ui, server)"
    },
    {
      "type": "ul",
      "items": [
        "Access input values by calling the object like a function",
        "input.x(), not input$x"
      ]
    },
    {
      "type": "h3",
      "text": "Function name changes"
    },
    {
      "type": "p",
      "text": "The Python function names have been modified to make them easier to discover with tab completion. For example all python output functions start with output_ while the input functions start with input_. This means that you can type ui.ou and hit tab to see all of the available output functions. The Shiny R functions on the other hand all start with the element type (plotOutput, textInput), which makes it hard to see all of the input or output options. For the most part you can follow this naming pattern to find the function you’re looking for, but there are a number of functions that have different names in R and Python, the most important of which are listed below:"
    },
    {
      "type": "h1",
      "text": "Reactive programming"
    },
    {
      "type": "p",
      "text": "Reactivity works mostly the same in R and Python, but there are a few small differences in naming and syntax."
    },
    {
      "type": "h2",
      "text": "New names for reactive() and observe()"
    },
    {
      "type": "p",
      "text": "In Shiny for R, reactive expressions (created by reactive(), which are used when you want to compute a value (which is then used in an output or an observer), and observers (created by observe()) are used for their side effects, like writing data to disk. This is a common source of confusion because the names reactive() and observe() do not clearly express when they should be used. To help clarify this confusion we’ve renamed reactive() to @reactive.calc, and observe() to @reactive.effect in Python."
    },
    {
      "type": "h4",
      "text": "R"
    },
    {
      "type": "code",
      "text": "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\"),\n  actionButton(\"reset\", \"Reset\")\n)\n\nserver <- function(input, output, session) {\n\n  val <- reactive({input$n})\n\n\n  observe({\n    input$reset\n    updateSliderInput(session, \"n\", value = 40)\n  })\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", val(),\" * 2\")\n  })\n}\n\nshinyApp(ui, server)"
    },
    {
      "type": "h4",
      "text": "Python"
    },
    {
      "type": "code",
      "text": "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n    ui.input_action_button(\"reset\", \"Reset\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def val():\n        return input.n()\n\n    @reactive.effect\n    def _():\n        input.reset()\n        ui.update_slider(\"n\", value=40)\n\n    @render.text\n    def txt():\n        return f\"n*2 is {val() * 2}\"\n\napp = App(app_ui, server)"
    },
    {
      "type": "h2",
      "text": "Reactive Values"
    },
    {
      "type": "p",
      "text": "In R, there are two types of reactive objects which store values:"
    },
    {
      "type": "ul",
      "items": [
        "Items in a reactiveValues object. This is a list-like object that contains multiple reactive values. (Note that the input object is a reactiveValues.)",
        "Standalone reactiveVal objects."
      ]
    },
    {
      "type": "p",
      "text": "Items in a reactiveValues object. This is a list-like object that contains multiple reactive values. (Note that the input object is a reactiveValues.)"
    },
    {
      "type": "p",
      "text": "Standalone reactiveVal objects."
    },
    {
      "type": "p",
      "text": "In R, the way that you get values from a reactiveValues object differs from how you get it from a reactiveVal. To get the value of an item’s in a reactiveValues object, you would simply access it with input$x. However, for a standalone reactiveVal, you would invoke it like a function, with x()."
    },
    {
      "type": "code",
      "text": "vals <- reactiveValues(x = 1, y = 2)\nz <- reactiveVal(3)\n\n# Retrieve values\nprint(vals$x)\nprint(z())"
    },
    {
      "type": "p",
      "text": "In Shiny for Python, we’ve simplified things in the following ways:"
    },
    {
      "type": "ul",
      "items": [
        "There is no direct analog to R’s reactiveValues.",
        "The analog of R’s standalone reactiveVal is reactive.value. (The input object in Python is a dictionary-like object containing individual reactive.value objects.)",
        "Reactive values have can be retrieved with my_val() or my_val.get() and can be set with my_val.set()."
      ]
    },
    {
      "type": "p",
      "text": "There is no direct analog to R’s reactiveValues."
    },
    {
      "type": "p",
      "text": "The analog of R’s standalone reactiveVal is reactive.value. (The input object in Python is a dictionary-like object containing individual reactive.value objects.)"
    },
    {
      "type": "p",
      "text": "Reactive values have can be retrieved with my_val() or my_val.get() and can be set with my_val.set()."
    },
    {
      "type": "p",
      "text": "There is no analog of reactiveValues in Python, but you can create something similar by using a dictionary of reactive.value objects."
    },
    {
      "type": "code",
      "text": "vals = {\n  \"x\": reactive.value(1),\n  \"y\": reactive.value(2),\n}\n\nz = reactive.value(3)\n\n# Retrieve values\nprint(vals.x())\nprint(z())"
    },
    {
      "type": "h4",
      "text": "R"
    },
    {
      "type": "code",
      "text": "library(shiny)\n\nui <- fluidPage(\n  actionButton(\"minus\", \"-1\"),\n  actionButton(\"plus\", \"+1\"),\n  br(),\n  textOutput(\"value\")\n)\n\nserver <- function(input, output, session) {\n  value <- reactiveVal(0)\n\n\n\n  observeEvent(input$minus, {\n    newValue <- value() - 1\n    value(newValue)\n  })\n\n\n  observeEvent(input$plus, {\n    newValue <- value() + 1\n    value(newValue)\n  })\n\n\n  output$value <- renderText({\n    value()\n  })\n}\nshinyApp(ui, server)"
    },
    {
      "type": "h4",
      "text": "Python"
    },
    {
      "type": "code",
      "text": "from shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"minus\", \"-1\"),\n    ui.input_action_button(\"plus\", \"+1\"),\n    ui.br(),\n    ui.output_text(\"value\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val() - 1\n        val.set(newVal)\n\n    @reactive.effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val() + 1\n        val.set(newVal)\n\n    @render.text\n    def value():\n        return str(val())\n\n\napp = App(app_ui, server)"
    },
    {
      "type": "h1",
      "text": "Mutability"
    },
    {
      "type": "p",
      "text": "One of the biggest differences between R and Python is the mutability of objects. In R, most objects are immutable. This means, for example, that if you pass a data frame to a function, that function cannot alter your copy of the data frame. In Python, many objects are mutable. This means that they can be modified in place—modifying an object in one part of a program can cause it to be (unexpectedly) modified in another part of the program."
    },
    {
      "type": "p",
      "text": "This difference in mutability has consequences for Shiny applications and for programming in general. In many cases, using .copy() in Python will help avoid bugs due to inadvertently altering mutable objects. See our page on mutability to understand the possible bugs and how to avoid them."
    }
  ],
  "code_examples": [
    "# Create a virtual environment in the .venv subdirectory\npython3 -m venv venv\nsource venv/bin/activate\n# Install shiny\npip install shiny",
    "# Create a virtual environment in the .venv subdirectory\npython3 -m venv venv\nsource venv/bin/activate\n# Install shiny\npip install shiny",
    "# Create a conda environment named 'myenv'\nconda create --name myenv\nconda activate myenv\nconda install -c conda-forge shiny",
    "# Create a conda environment named 'myenv'\nconda create --name myenv\nconda activate myenv\nconda install -c conda-forge shiny",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output, session) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n, \" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output, session) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n, \" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
    "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
    "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
    "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n\n  n <- reactive({input$n})\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", n(),\" * 2\")\n  })\n}\n\n\nshinyApp(ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n\n  n <- reactive({input$n})\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", n(),\" * 2\")\n  })\n}\n\n\nshinyApp(ui, server)",
    "from shiny import ui, render, reactive, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def n():\n      return input.n()\n\n    @render.text\n    def txt():\n        return f\"n*2 is {n() * 2}\"\n\napp = App(app_ui, server)",
    "from shiny import ui, render, reactive, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def n():\n      return input.n()\n\n    @render.text\n    def txt():\n        return f\"n*2 is {n() * 2}\"\n\napp = App(app_ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\"),\n  actionButton(\"reset\", \"Reset\")\n)\n\nserver <- function(input, output, session) {\n\n  val <- reactive({input$n})\n\n\n  observe({\n    input$reset\n    updateSliderInput(session, \"n\", value = 40)\n  })\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", val(),\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\"),\n  actionButton(\"reset\", \"Reset\")\n)\n\nserver <- function(input, output, session) {\n\n  val <- reactive({input$n})\n\n\n  observe({\n    input$reset\n    updateSliderInput(session, \"n\", value = 40)\n  })\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", val(),\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
    "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n    ui.input_action_button(\"reset\", \"Reset\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def val():\n        return input.n()\n\n    @reactive.effect\n    def _():\n        input.reset()\n        ui.update_slider(\"n\", value=40)\n\n    @render.text\n    def txt():\n        return f\"n*2 is {val() * 2}\"\n\napp = App(app_ui, server)",
    "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n    ui.input_action_button(\"reset\", \"Reset\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def val():\n        return input.n()\n\n    @reactive.effect\n    def _():\n        input.reset()\n        ui.update_slider(\"n\", value=40)\n\n    @render.text\n    def txt():\n        return f\"n*2 is {val() * 2}\"\n\napp = App(app_ui, server)",
    "vals <- reactiveValues(x = 1, y = 2)\nz <- reactiveVal(3)\n\n# Retrieve values\nprint(vals$x)\nprint(z())",
    "vals <- reactiveValues(x = 1, y = 2)\nz <- reactiveVal(3)\n\n# Retrieve values\nprint(vals$x)\nprint(z())",
    "vals = {\n  \"x\": reactive.value(1),\n  \"y\": reactive.value(2),\n}\n\nz = reactive.value(3)\n\n# Retrieve values\nprint(vals.x())\nprint(z())",
    "vals = {\n  \"x\": reactive.value(1),\n  \"y\": reactive.value(2),\n}\n\nz = reactive.value(3)\n\n# Retrieve values\nprint(vals.x())\nprint(z())",
    "library(shiny)\n\nui <- fluidPage(\n  actionButton(\"minus\", \"-1\"),\n  actionButton(\"plus\", \"+1\"),\n  br(),\n  textOutput(\"value\")\n)\n\nserver <- function(input, output, session) {\n  value <- reactiveVal(0)\n\n\n\n  observeEvent(input$minus, {\n    newValue <- value() - 1\n    value(newValue)\n  })\n\n\n  observeEvent(input$plus, {\n    newValue <- value() + 1\n    value(newValue)\n  })\n\n\n  output$value <- renderText({\n    value()\n  })\n}\nshinyApp(ui, server)",
    "library(shiny)\n\nui <- fluidPage(\n  actionButton(\"minus\", \"-1\"),\n  actionButton(\"plus\", \"+1\"),\n  br(),\n  textOutput(\"value\")\n)\n\nserver <- function(input, output, session) {\n  value <- reactiveVal(0)\n\n\n\n  observeEvent(input$minus, {\n    newValue <- value() - 1\n    value(newValue)\n  })\n\n\n  observeEvent(input$plus, {\n    newValue <- value() + 1\n    value(newValue)\n  })\n\n\n  output$value <- renderText({\n    value()\n  })\n}\nshinyApp(ui, server)",
    "from shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"minus\", \"-1\"),\n    ui.input_action_button(\"plus\", \"+1\"),\n    ui.br(),\n    ui.output_text(\"value\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val() - 1\n        val.set(newVal)\n\n    @reactive.effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val() + 1\n        val.set(newVal)\n\n    @render.text\n    def value():\n        return str(val())\n\n\napp = App(app_ui, server)",
    "from shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"minus\", \"-1\"),\n    ui.input_action_button(\"plus\", \"+1\"),\n    ui.br(),\n    ui.output_text(\"value\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val() - 1\n        val.set(newVal)\n\n    @reactive.effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val() + 1\n        val.set(newVal)\n\n    @render.text\n    def value():\n        return str(val())\n\n\napp = App(app_ui, server)"
  ],
  "toc": [
    {
      "title": "Getting started",
      "url": "docs/#getting-started"
    },
    {
      "title": "Syntax differences",
      "url": "docs/#syntax-differences"
    },
    {
      "title": "Decorators",
      "url": "docs/#decorators"
    },
    {
      "title": "Connecting outputs",
      "url": "docs/#connecting-outputs"
    },
    {
      "title": "Submodules",
      "url": "docs/#submodules"
    },
    {
      "title": "Call inputs with ()",
      "url": "docs/#call-inputs-with"
    },
    {
      "title": "Function name changes",
      "url": "docs/#function-name-changes"
    },
    {
      "title": "Reactive programming",
      "url": "docs/#reactive-programming"
    },
    {
      "title": "New names for reactive() and observe()",
      "url": "docs/#new-names-for-reactive-and-observe"
    },
    {
      "title": "Reactive Values",
      "url": "docs/#reactive-values"
    },
    {
      "title": "Mutability",
      "url": "docs/#mutability"
    },
    {
      "title": "📌 Essentials"
    },
    {
      "title": "Overview",
      "url": "docs/overview.html"
    },
    {
      "title": "User interfaces",
      "url": "docs/user-interfaces.html"
    },
    {
      "title": "🤖 Generative AI"
    },
    {
      "title": "Get inspired",
      "url": "docs/genai-inspiration.html"
    },
    {
      "title": "Chatbots",
      "url": "docs/genai-chatbots.html"
    },
    {
      "title": "Streaming",
      "url": "docs/genai-stream.html"
    },
    {
      "title": "Tool calling",
      "url": "docs/genai-tools.html"
    },
    {
      "title": "Structured data",
      "url": "docs/genai-structured-data.html"
    },
    {
      "title": "RAG",
      "url": "docs/genai-rag.html"
    },
    {
      "title": "🎨 User interfaces"
    },
    {
      "title": "Overview",
      "url": "docs/ui-overview.html"
    },
    {
      "title": "Jupyter Widgets",
      "url": "docs/jupyter-widgets.html"
    },
    {
      "title": "Dynamic UI",
      "url": "docs/ui-dynamic.html"
    },
    {
      "title": "UI as HTML",
      "url": "docs/ui-html.html"
    },
    {
      "title": "Customizing UI",
      "url": "docs/ui-customize.html"
    },
    {
      "title": "⚡ Reactivity"
    },
    {
      "title": "Foundations",
      "url": "docs/reactive-foundations.html"
    },
    {
      "title": "Patterns",
      "url": "docs/reactive-patterns.html"
    },
    {
      "title": "Mutable objects",
      "url": "docs/reactive-mutable.html"
    },
    {
      "title": "📝 Syntax modes"
    },
    {
      "title": "Express vs. Core",
      "url": "docs/express-vs-core.html"
    },
    {
      "title": "Choosing a syntax",
      "url": "docs/express-or-core.html"
    },
    {
      "title": "Express in depth",
      "url": "docs/express-in-depth.html"
    },
    {
      "title": "Transition to Core",
      "url": "docs/express-to-core.html"
    },
    {
      "title": "📦 Modules"
    },
    {
      "title": "Shiny Modules",
      "url": "docs/modules.html"
    },
    {
      "title": "Module Communication",
      "url": "docs/module-communication.html"
    },
    {
      "title": "🧪 Testing"
    },
    {
      "title": "Unit testing",
      "url": "docs/unit-testing.html"
    },
    {
      "title": "End-to-End Testing Your App",
      "url": "docs/end-to-end-testing.html"
    },
    {
      "title": "🏗️ Extending"
    },
    {
      "title": "Custom JavaScript component",
      "url": "docs/custom-component-one-off.html"
    },
    {
      "title": "Custom components package",
      "url": "docs/custom-components-pkg.html"
    },
    {
      "title": "📊 Comparisons"
    },
    {
      "title": "Streamlit",
      "url": "docs/comp-streamlit.html"
    },
    {
      "title": "Shiny for R",
      "url": "docs/comp-r-shiny.html"
    },
    {
      "title": "🧩 Miscellaneous"
    },
    {
      "title": "Non-blocking operations",
      "url": "docs/nonblocking.html"
    },
    {
      "title": "Routing",
      "url": "docs/routing.html"
    }
  ]
}