{
  "metadata": {
    "title": "Plot (Plotly) â€“ Shiny for Python",
    "description": "",
    "url": "components/outputs/plot-plotly/index.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Outputs",
        "Plot (Plotly)"
      ]
    },
    {
      "type": "h1",
      "text": "Plot (Plotly)"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)"
    },
    {
      "type": "ul",
      "items": [
        "Core",
        "Express"
      ]
    },
    {
      "type": "code",
      "text": "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)"
    },
    {
      "type": "code",
      "text": "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui\nfrom shinywidgets import render_widget  \n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render_widget  \ndef plot():  \n    scatterplot = px.histogram(\n        data_frame=penguins,\n        x=\"body_mass_g\",\n        nbins=input.n(),\n    ).update_layout(\n        title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n        yaxis_title=\"Count\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n\n    return scatterplot  "
    },
    {
      "type": "h2",
      "text": "Relevant Functions"
    },
    {
      "type": "ul",
      "items": [
        "shinywidgets.output_widget shinywidgets.output_widget(id, width, height)",
        "@shinywidgets.render_widget() shinywidgets.render_widget(fn)"
      ]
    },
    {
      "type": "p",
      "text": "shinywidgets.output_widget shinywidgets.output_widget(id, width, height)"
    },
    {
      "type": "p",
      "text": "@shinywidgets.render_widget() shinywidgets.render_widget(fn)"
    },
    {
      "type": "h2",
      "text": "Details"
    },
    {
      "type": "p",
      "text": "Plotly is an interactive graphics plotting library."
    },
    {
      "type": "p",
      "text": "To make an interactive plot with Plotly in Shiny for Python, we will need to use the shinywidgets library to connect Shiny with ipywidgets."
    },
    {
      "type": "p",
      "text": "To make a Plotly figure, we need to do the following steps:"
    },
    {
      "type": "ol",
      "items": [
        "Import the output_widget() and render_widget() functions from the shinywidgets library, from shinywidgets import output_widget, render_widget",
        "Call output_widget() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.",
        "Define a function within the server() function that creates the figure. The name of the function should be the same value you passed into the id parameter in your output_widget() function call in the UI. If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.",
        "Decorate your plotting function with a @render_widget() decorator. If your plotting function is not the same as the id you used in the ui.output_widget(), you can add an additional @output(id=...) decorator. If you use the @output() decorator, make sure it is above the @render_widget() decorator."
      ]
    },
    {
      "type": "p",
      "text": "Import the output_widget() and render_widget() functions from the shinywidgets library, from shinywidgets import output_widget, render_widget"
    },
    {
      "type": "p",
      "text": "Call output_widget() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app."
    },
    {
      "type": "p",
      "text": "Define a function within the server() function that creates the figure."
    },
    {
      "type": "ul",
      "items": [
        "The name of the function should be the same value you passed into the id parameter in your output_widget() function call in the UI.",
        "If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion."
      ]
    },
    {
      "type": "p",
      "text": "The name of the function should be the same value you passed into the id parameter in your output_widget() function call in the UI."
    },
    {
      "type": "p",
      "text": "If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion."
    },
    {
      "type": "p",
      "text": "Decorate your plotting function with a @render_widget() decorator."
    },
    {
      "type": "ul",
      "items": [
        "If your plotting function is not the same as the id you used in the ui.output_widget(), you can add an additional @output(id=...) decorator.",
        "If you use the @output() decorator, make sure it is above the @render_widget() decorator."
      ]
    },
    {
      "type": "p",
      "text": "Visit shiny.posit.co/py/docs/ipywidgets.html to learn more about using ipywidgets with Shiny."
    },
    {
      "type": "h3",
      "text": "Plots as Inputs"
    },
    {
      "type": "p",
      "text": "You can use a Plotly figure as an input widget, collecting the locations of user clicks, hovers, and selections."
    },
    {
      "type": "ol",
      "items": [
        "Convert your Plotly figure to a FigureWidget using plotly.graph_objects.FigureWidget(), which extends the functionality of a standard Plotly figure and enables event handling.",
        "Use the .data attribute of the FigureWidget to access its traces. The data attribute is a list that contains all the traces in the figure. Individual traces are accessible as .data[0], .data[1], etc., depending on how many traces are present in the figure.",
        "Use event handlers to listen for user interactions with the plot. These handlers include methods like .on_click(), .on_hover(), and .on_selection(), which are available for individual traces within the figure. You attach these handlers to a specific trace (e.g., .data[0].on_click()) to capture interactions with the data points in that trace.",
        "When you use an event handler like .on_click(), you need to pass it a callback function that defines what should happen when the event occurs. When defining the callback function, it should receive the parameters trace, points, and state, which provide information about the data points interacted with. In our example app below, our callback function updates a reactive value to contain the information about the points clicked, hovered over, or selected."
      ]
    },
    {
      "type": "p",
      "text": "Convert your Plotly figure to a FigureWidget using plotly.graph_objects.FigureWidget(), which extends the functionality of a standard Plotly figure and enables event handling."
    },
    {
      "type": "p",
      "text": "Use the .data attribute of the FigureWidget to access its traces. The data attribute is a list that contains all the traces in the figure. Individual traces are accessible as .data[0], .data[1], etc., depending on how many traces are present in the figure."
    },
    {
      "type": "p",
      "text": "Use event handlers to listen for user interactions with the plot. These handlers include methods like .on_click(), .on_hover(), and .on_selection(), which are available for individual traces within the figure. You attach these handlers to a specific trace (e.g., .data[0].on_click()) to capture interactions with the data points in that trace."
    },
    {
      "type": "p",
      "text": "When you use an event handler like .on_click(), you need to pass it a callback function that defines what should happen when the event occurs. When defining the callback function, it should receive the parameters trace, points, and state, which provide information about the data points interacted with. In our example app below, our callback function updates a reactive value to contain the information about the points clicked, hovered over, or selected."
    },
    {
      "type": "h2",
      "text": "Variations"
    },
    {
      "type": "h3",
      "text": "Plot as input"
    },
    {
      "type": "p",
      "text": "First, convert your Plotly figure to a FigureWidget using plotly.graph_objects.FigureWidget(). Then, you can use .on_click(), .on_hover(), .on_selection(), and other methods to control what happens when the user clicks, hover, or selects points. Capture the click, hover, and selection information as reactive variables. The app below displays the values returned, but you can also call the values from within your computations to filter tables, perform calculations, and so on."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)"
    },
    {
      "type": "ul",
      "items": [
        "Express",
        "Core"
      ]
    },
    {
      "type": "code",
      "text": "import plotly.express as px\nimport plotly.graph_objects as go\nfrom palmerpenguins import load_penguins\nfrom plotly.callbacks import Points\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\nfrom shinywidgets import render_plotly\n\npenguins = load_penguins()\n\n@render_plotly  \ndef plot():  \n    fig = px.scatter(\n        data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n    ).update_layout(\n        yaxis_title=\"Bill Length (mm)\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n    # Need to create a FigureWidget() for on_click to work\n    w = go.FigureWidget(fig.data, fig.layout) \n    w.data[0].on_click(on_point_click) \n    w.data[0].on_hover(on_point_hover) \n    w.data[0].on_selection(on_point_selection) \n    return w \n\n# Capture the clicked point in a reactive value\nclick_reactive = reactive.value() \nhover_reactive = reactive.value() \nselection_reactive = reactive.value() \n\ndef on_point_click(trace, points, state): \n    click_reactive.set(points) \n\ndef on_point_hover(trace, points, state): \n    hover_reactive.set(points) \n\ndef on_point_selection(trace, points, state): \n    selection_reactive.set(points) \n\n\"Click info\"\n@render.code\ndef click_info():\n    return str(click_reactive.get())\n\n\"Hover info\"\n@render.code\ndef hover_info():\n    return str(hover_reactive.get())\n\n\"Selection info (use box or lasso select)\"\n@render.code\ndef selection_info():\n    return str(selection_reactive.get())"
    },
    {
      "type": "code",
      "text": "import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)"
    }
  ],
  "code_examples": [
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
    "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
    "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
    "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui\nfrom shinywidgets import render_widget  \n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render_widget  \ndef plot():  \n    scatterplot = px.histogram(\n        data_frame=penguins,\n        x=\"body_mass_g\",\n        nbins=input.n(),\n    ).update_layout(\n        title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n        yaxis_title=\"Count\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n\n    return scatterplot  ",
    "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui\nfrom shinywidgets import render_widget  \n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render_widget  \ndef plot():  \n    scatterplot = px.histogram(\n        data_frame=penguins,\n        x=\"body_mass_g\",\n        nbins=input.n(),\n    ).update_layout(\n        title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n        yaxis_title=\"Count\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n\n    return scatterplot  ",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)",
    "import plotly.express as px\nimport plotly.graph_objects as go\nfrom palmerpenguins import load_penguins\nfrom plotly.callbacks import Points\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\nfrom shinywidgets import render_plotly\n\npenguins = load_penguins()\n\n@render_plotly  \ndef plot():  \n    fig = px.scatter(\n        data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n    ).update_layout(\n        yaxis_title=\"Bill Length (mm)\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n    # Need to create a FigureWidget() for on_click to work\n    w = go.FigureWidget(fig.data, fig.layout) \n    w.data[0].on_click(on_point_click) \n    w.data[0].on_hover(on_point_hover) \n    w.data[0].on_selection(on_point_selection) \n    return w \n\n# Capture the clicked point in a reactive value\nclick_reactive = reactive.value() \nhover_reactive = reactive.value() \nselection_reactive = reactive.value() \n\ndef on_point_click(trace, points, state): \n    click_reactive.set(points) \n\ndef on_point_hover(trace, points, state): \n    hover_reactive.set(points) \n\ndef on_point_selection(trace, points, state): \n    selection_reactive.set(points) \n\n\"Click info\"\n@render.code\ndef click_info():\n    return str(click_reactive.get())\n\n\"Hover info\"\n@render.code\ndef hover_info():\n    return str(hover_reactive.get())\n\n\"Selection info (use box or lasso select)\"\n@render.code\ndef selection_info():\n    return str(selection_reactive.get())",
    "import plotly.express as px\nimport plotly.graph_objects as go\nfrom palmerpenguins import load_penguins\nfrom plotly.callbacks import Points\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\nfrom shinywidgets import render_plotly\n\npenguins = load_penguins()\n\n@render_plotly  \ndef plot():  \n    fig = px.scatter(\n        data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n    ).update_layout(\n        yaxis_title=\"Bill Length (mm)\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n    # Need to create a FigureWidget() for on_click to work\n    w = go.FigureWidget(fig.data, fig.layout) \n    w.data[0].on_click(on_point_click) \n    w.data[0].on_hover(on_point_hover) \n    w.data[0].on_selection(on_point_selection) \n    return w \n\n# Capture the clicked point in a reactive value\nclick_reactive = reactive.value() \nhover_reactive = reactive.value() \nselection_reactive = reactive.value() \n\ndef on_point_click(trace, points, state): \n    click_reactive.set(points) \n\ndef on_point_hover(trace, points, state): \n    hover_reactive.set(points) \n\ndef on_point_selection(trace, points, state): \n    selection_reactive.set(points) \n\n\"Click info\"\n@render.code\ndef click_info():\n    return str(click_reactive.get())\n\n\"Hover info\"\n@render.code\ndef hover_info():\n    return str(hover_reactive.get())\n\n\"Selection info (use box or lasso select)\"\n@render.code\ndef selection_info():\n    return str(selection_reactive.get())",
    "import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)",
    "import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)"
  ],
  "toc": [
    {
      "title": "COMPONENTS",
      "url": "components/"
    },
    {
      "title": "Inputs"
    },
    {
      "title": "Action Button",
      "url": "components/inputs/action-button/index.html"
    },
    {
      "title": "Action Link",
      "url": "components/inputs/action-link/index.html"
    },
    {
      "title": "Checkbox",
      "url": "components/inputs/checkbox/index.html"
    },
    {
      "title": "Checkbox Group",
      "url": "components/inputs/checkbox-group/index.html"
    },
    {
      "title": "Date Range Selector",
      "url": "components/inputs/date-range-selector/index.html"
    },
    {
      "title": "Date Selector",
      "url": "components/inputs/date-selector/index.html"
    },
    {
      "title": "File Input",
      "url": "components/inputs/file/index.html"
    },
    {
      "title": "Numeric Input",
      "url": "components/inputs/numeric-input/index.html"
    },
    {
      "title": "Password Field",
      "url": "components/inputs/password-field/index.html"
    },
    {
      "title": "Radio Buttons",
      "url": "components/inputs/radio-buttons/index.html"
    },
    {
      "title": "Select (Single)",
      "url": "components/inputs/select-single/index.html"
    },
    {
      "title": "Select (Multiple)",
      "url": "components/inputs/select-multiple/index.html"
    },
    {
      "title": "Selectize (Single)",
      "url": "components/inputs/selectize-single/index.html"
    },
    {
      "title": "Selectize (Multiple)",
      "url": "components/inputs/selectize-multiple/index.html"
    },
    {
      "title": "Slider",
      "url": "components/inputs/slider/index.html"
    },
    {
      "title": "Slider Range",
      "url": "components/inputs/slider-range/index.html"
    },
    {
      "title": "Switch",
      "url": "components/inputs/switch/index.html"
    },
    {
      "title": "Text Area",
      "url": "components/inputs/text-area/index.html"
    },
    {
      "title": "Text Box",
      "url": "components/inputs/text-box/index.html"
    },
    {
      "title": "Outputs"
    },
    {
      "title": "Data Grid",
      "url": "components/outputs/data-grid/index.html"
    },
    {
      "title": "Data Table",
      "url": "components/outputs/data-table/index.html"
    },
    {
      "title": "Image",
      "url": "components/outputs/image/index.html"
    },
    {
      "title": "Map (ipyleaflet)",
      "url": "components/outputs/map-ipyleaflet/index.html"
    },
    {
      "title": "Plot (Matplotlib)",
      "url": "components/outputs/plot-matplotlib/index.html"
    },
    {
      "title": "Plot (Plotly)",
      "url": "components/outputs/plot-plotly/index.html"
    },
    {
      "title": "Plot (Seaborn)",
      "url": "components/outputs/plot-seaborn/index.html"
    },
    {
      "title": "Text",
      "url": "components/outputs/text/index.html"
    },
    {
      "title": "UI",
      "url": "components/outputs/ui/index.html"
    },
    {
      "title": "Value Box",
      "url": "components/outputs/value-box/index.html"
    },
    {
      "title": "Verbatim Text",
      "url": "components/outputs/verbatim-text/index.html"
    },
    {
      "title": "Display Messages"
    },
    {
      "title": "Chat",
      "url": "components/display-messages/chat/index.html"
    },
    {
      "title": "Modal",
      "url": "components/display-messages/modal/index.html"
    },
    {
      "title": "Notifications",
      "url": "components/display-messages/notifications/index.html"
    },
    {
      "title": "Progress Bar",
      "url": "components/display-messages/progress-bar/index.html"
    },
    {
      "title": "Tooltips",
      "url": "components/display-messages/tooltips/index.html"
    }
  ]
}