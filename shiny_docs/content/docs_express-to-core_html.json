{
  "metadata": {
    "title": "Transition to Core ‚Äì Shiny for Python",
    "description": "",
    "url": "docs/express-to-core.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "üìù Syntax modes",
        "Transition to Core"
      ]
    },
    {
      "type": "h1",
      "text": "Transition to Core"
    },
    {
      "type": "p",
      "text": "This article digs into the syntax differences translation Express and Core apps as well as a translation guide to help you move from Express to Core."
    },
    {
      "type": "p",
      "text": "The quickest way to tell whether an app is an Express app is the presence of shiny.express in the import statements. Common Express imports like from shiny.express import ui, input highlight the main difference from Core: expression of user interfaces (ui) and where input values come from. You‚Äôll also commonly see Core imports like from shiny import reactive in Express apps, highlighting the fact that things like reactivity work the same way in both modes."
    },
    {
      "type": "p",
      "text": "To dig into more specifics, consider the following app that just displays a slider value, and notice the following:"
    },
    {
      "type": "ul",
      "items": [
        "Core requires an App() object, which in turn requires a UI definition and server function.",
        "Core UI starts with a ui.page_*() call to create a page layout. It also requires output containers (i.e., ui.output_*()) in the UI with ids that match the corresponding render function. In Express, these page and output containers are implicit.1"
      ]
    },
    {
      "type": "ul",
      "items": [
        "In Express, these page and output containers are implicit.1"
      ]
    },
    {
      "type": "ul",
      "items": [
        "Core",
        "Express"
      ]
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50),\n    ui.output_text_verbatim(\"slider_val\")\n)\n\ndef server(input, output, session):\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"\n\napp = App(app_ui, server)"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n@render.text\ndef slider_val():\n    return f\"Slider value: {input.val()}\""
    },
    {
      "type": "p",
      "text": "Now, suppose we add a UI component that takes other components as children, like ui.layout_columns(). In Core, this is done by nesting pure function calls. However, in Express, UI components that take other UI components as children are context managers, so we use with statements instead."
    },
    {
      "type": "ul",
      "items": [
        "Core",
        "Express"
      ]
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.layout_columns(\n      ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50),\n      ui.output_text_verbatim(\"slider_val\")\n    )\n)\n\ndef server(input, output, session):\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"\n\napp = App(app_ui, server)"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\""
    },
    {
      "type": "p",
      "text": "Terminal UI components (e.g. ui.input_slider()); that is, components that usually don‚Äôt take other UI components as children, are not context managers in Express."
    },
    {
      "type": "p",
      "text": "In Express, HTML tags can be used as both context managers and/or pure functions. For example, ui.div(ui.h1(\"Hello world!\")) is also equivalent to with ui.div(): ui.h1(\"Hello world!\")."
    },
    {
      "type": "h3",
      "text": "Translation guide"
    },
    {
      "type": "p",
      "text": "When translating an Express app to Core, the following steps are recommended:"
    },
    {
      "type": "ol",
      "items": [
        "Replace Express imports with Core imports (e.g., from shiny.express import ui -> from shiny import ui).",
        "Add from shiny import App.",
        "Add the following just below the imports:"
      ]
    },
    {
      "type": "code",
      "text": "app_ui = ui.page_fixed(\n    # static UI here\n)\n\ndef server(input, output, session):\n    # render/reactive logic here\n    ...\n\napp = App(app_ui, server)"
    },
    {
      "type": "ol",
      "items": [
        "Then, start moving the ‚Äútop-level‚Äù Express logic into the UI/server:"
      ]
    },
    {
      "type": "ul",
      "items": [
        "Identify @render and @reactive functions and move them inside server function.",
        "Add ui.output_*() containers to app_ui for each @render function.",
        "Move ui components (i.e., inputs and layout) and move them inside the app_ui. Remember that, in Core, layout components like ui.layout_columns() are pure functions, not context managers.",
        "If your Express app has top-level ui.sidebar() and/or ui.nav_panel() components, you‚Äôll need to also change ui.page_fixed() to ui.page_sidebar()/ui.page_navbar()."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Remember that, in Core, layout components like ui.layout_columns() are pure functions, not context managers."
      ]
    },
    {
      "type": "h2",
      "text": "Footnotes"
    },
    {
      "type": "ol",
      "items": [
        "In Express, page layout options can be controlled via ui.page_opts() and (at least some, for now) output containers can be controlled through their respective @render.*() decorators.‚Ü©Ô∏é"
      ]
    },
    {
      "type": "p",
      "text": "In Express, page layout options can be controlled via ui.page_opts() and (at least some, for now) output containers can be controlled through their respective @render.*() decorators.‚Ü©Ô∏é"
    }
  ],
  "code_examples": [
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50),\n    ui.output_text_verbatim(\"slider_val\")\n)\n\ndef server(input, output, session):\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n@render.text\ndef slider_val():\n    return f\"Slider value: {input.val()}\"",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.layout_columns(\n      ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50),\n      ui.output_text_verbatim(\"slider_val\")\n    )\n)\n\ndef server(input, output, session):\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"",
    "app_ui = ui.page_fixed(\n    # static UI here\n)\n\ndef server(input, output, session):\n    # render/reactive logic here\n    ...\n\napp = App(app_ui, server)",
    "app_ui = ui.page_fixed(\n    # static UI here\n)\n\ndef server(input, output, session):\n    # render/reactive logic here\n    ...\n\napp = App(app_ui, server)"
  ],
  "toc": [
    {
      "title": "Translation guide",
      "url": "docs/#translation-guide"
    },
    {
      "title": "üìå Essentials"
    },
    {
      "title": "Overview",
      "url": "docs/overview.html"
    },
    {
      "title": "User interfaces",
      "url": "docs/user-interfaces.html"
    },
    {
      "title": "ü§ñ Generative AI"
    },
    {
      "title": "Get inspired",
      "url": "docs/genai-inspiration.html"
    },
    {
      "title": "Chatbots",
      "url": "docs/genai-chatbots.html"
    },
    {
      "title": "Streaming",
      "url": "docs/genai-stream.html"
    },
    {
      "title": "Tool calling",
      "url": "docs/genai-tools.html"
    },
    {
      "title": "Structured data",
      "url": "docs/genai-structured-data.html"
    },
    {
      "title": "RAG",
      "url": "docs/genai-rag.html"
    },
    {
      "title": "üé® User interfaces"
    },
    {
      "title": "Overview",
      "url": "docs/ui-overview.html"
    },
    {
      "title": "Jupyter Widgets",
      "url": "docs/jupyter-widgets.html"
    },
    {
      "title": "Dynamic UI",
      "url": "docs/ui-dynamic.html"
    },
    {
      "title": "UI as HTML",
      "url": "docs/ui-html.html"
    },
    {
      "title": "Customizing UI",
      "url": "docs/ui-customize.html"
    },
    {
      "title": "‚ö° Reactivity"
    },
    {
      "title": "Foundations",
      "url": "docs/reactive-foundations.html"
    },
    {
      "title": "Patterns",
      "url": "docs/reactive-patterns.html"
    },
    {
      "title": "Mutable objects",
      "url": "docs/reactive-mutable.html"
    },
    {
      "title": "üìù Syntax modes"
    },
    {
      "title": "Express vs.¬†Core",
      "url": "docs/express-vs-core.html"
    },
    {
      "title": "Choosing a syntax",
      "url": "docs/express-or-core.html"
    },
    {
      "title": "Express in depth",
      "url": "docs/express-in-depth.html"
    },
    {
      "title": "Transition to Core",
      "url": "docs/express-to-core.html"
    },
    {
      "title": "üì¶ Modules"
    },
    {
      "title": "Shiny Modules",
      "url": "docs/modules.html"
    },
    {
      "title": "Module Communication",
      "url": "docs/module-communication.html"
    },
    {
      "title": "üß™ Testing"
    },
    {
      "title": "Unit testing",
      "url": "docs/unit-testing.html"
    },
    {
      "title": "End-to-End Testing Your App",
      "url": "docs/end-to-end-testing.html"
    },
    {
      "title": "üèóÔ∏è Extending"
    },
    {
      "title": "Custom JavaScript component",
      "url": "docs/custom-component-one-off.html"
    },
    {
      "title": "Custom components package",
      "url": "docs/custom-components-pkg.html"
    },
    {
      "title": "üìä Comparisons"
    },
    {
      "title": "Streamlit",
      "url": "docs/comp-streamlit.html"
    },
    {
      "title": "Shiny for R",
      "url": "docs/comp-r-shiny.html"
    },
    {
      "title": "üß© Miscellaneous"
    },
    {
      "title": "Non-blocking operations",
      "url": "docs/nonblocking.html"
    },
    {
      "title": "Routing",
      "url": "docs/routing.html"
    }
  ]
}