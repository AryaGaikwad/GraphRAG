{
  "metadata": {
    "title": "express.render.data_frame – Shiny for Python",
    "description": "",
    "url": "api/express/express.render.data_frame.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Output components",
        "express.render.data_frame"
      ]
    },
    {
      "type": "h1",
      "text": "express.render.data_frame"
    },
    {
      "type": "code",
      "text": "express.render.data_frame(self, fn)"
    },
    {
      "type": "p",
      "text": "Decorator for a function that returns a pandas, polars, or eager narwhals compatible DataFrame object to render as an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple)."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A decorator for a function that returns any of the following: 1. A DataGrid or DataTable object, which can be used to customize the appearance and behavior of the data frame output. 2. A pandas, polars, or eager narwhals compatible DataFrame object. This object will be internally upgraded to a default shiny.express.render.DataGrid(df)."
    },
    {
      "type": "h2",
      "text": "Row selection"
    },
    {
      "type": "p",
      "text": "When using the row selection feature, you can access the selected rows by using the <data_frame_renderer>.cell_selection() method, where <data_frame_renderer> is the @render.data_frame function name that corresponds with the id= used in outout_data_frame. Internally, <data_frame_renderer>.cell_selection() retrieves the selected cell information from session’s input.<data_frame_renderer>_cell_selection() value and upgrades it for consistent subsetting."
    },
    {
      "type": "p",
      "text": "For example, to filter your pandas data frame (df) down to the selected rows you can use:"
    },
    {
      "type": "ul",
      "items": [
        "df.iloc[list(input.<data_frame_renderer>_cell_selection()[\"rows\"])]",
        "df.iloc[list(<data_frame_renderer>.cell_selection()[\"rows\"])]",
        "<data_frame_renderer>.data_view(selected=True)"
      ]
    },
    {
      "type": "p",
      "text": "The last method (.data_view(selected=True)) will also apply any sorting, filtering, or edits that has been applied by the user."
    },
    {
      "type": "h2",
      "text": "Editing cells"
    },
    {
      "type": "p",
      "text": "When a returned DataTable or DataGrid object has editable=True, app users will be able to edit the cells in the table. After a cell has been edited, the edited value will be sent to the server for processing. The handling methods are set via @<data_frame_renderer>.set_patch_fn or @<data_frame_renderer>.set_patches_fn decorators. By default, both decorators will return the corresponding value as a string."
    },
    {
      "type": "h2",
      "text": "Data methods"
    },
    {
      "type": "p",
      "text": "There are several methods available to inspect and update data frame renderer. It is important to know the side effects of each method to know how they interact with each other."
    },
    {
      "type": "ul",
      "items": [
        "Data frame render method: When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed. When this method is reactively executed, all user state is reset. This includes the user’s edits, sorting, filtering.",
        ".data(): Reactive calculation that returns the render method’s underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.",
        ".cell_patches(): Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.",
        ".data_patched(): Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied.",
        ".data_view(*, selected: bool): Reactive function that returns the .data_patched() data frame with the user’s sorting and filtering applied. It represents the data frame as viewed by the user within the browser. If selected=True, only the selected rows are returned.",
        ".update_cell_value(value, row, col): Sets a new entry in .cell_patches(). Calling this method will not reset the user’s sorting or filtering.",
        ".update_data(data): Updates the .data() data frame with new data. Calling this method will remove all .cell_patches(). Calling this method will not reset the user’s sorting or filtering."
      ]
    },
    {
      "type": "ul",
      "items": [
        "When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed.",
        "When this method is reactively executed, all user state is reset. This includes the user’s edits, sorting, filtering."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Reactive calculation that returns the render method’s underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Reactive function that returns the .data_patched() data frame with the user’s sorting and filtering applied. It represents the data frame as viewed by the user within the browser.",
        "If selected=True, only the selected rows are returned."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Sets a new entry in .cell_patches().",
        "Calling this method will not reset the user’s sorting or filtering."
      ]
    },
    {
      "type": "ul",
      "items": [
        "Updates the .data() data frame with new data.",
        "Calling this method will remove all .cell_patches().",
        "Calling this method will not reset the user’s sorting or filtering."
      ]
    },
    {
      "type": "p",
      "text": "Note: All data methods are shallow copies of each other. If they are mutated in place, it will modify the underlying data object and possibly alter other data objects."
    },
    {
      "type": "h2",
      "text": "Narwhals"
    },
    {
      "type": "p",
      "text": "Shiny uses narwhals to manage data frame interactions. From their website: “Extremely lightweight and extensible compatibility layer between dataframe libraries!”. This allows for seamless integration between pandas, polars, and any other eagerly defined data frame type."
    },
    {
      "type": "p",
      "text": "There are some reasonable limitations to the narwhals compatibility layer. As they are found, they will be added to this list: * When converting the column type who does not have a 1:1 mapping between libraries (such as pandas’ columns containing str and dict items both share the same object data type), narwhals will only inspect the first row to disambiguate the cell type. This could lead to false negatives in the data type conversion. Shiny could inspect each column in an attempt to disambiguate the cell type, but this would be a costly operation. The best way to avoid this is to use consistent typing. For example, if your first row of the pandas column contains a string and the second row of the same column contains a ui.TagList, the column will incorrectly be interpreted as a string. To get around this, you can wrap all cells (or at the very lest the first cell) in the same column within a ui.TagList as it will not insert any tags, but it will cause the column to be interpreted as html where possible. (tl/dr: Use consistent typing in your columns!)"
    },
    {
      "type": "h2",
      "text": "Tip"
    },
    {
      "type": "p",
      "text": "This decorator should be applied before the @output decorator (if that decorator is used). Also, the name of the decorated function (or @output(id=...)) should match the id of a output_data_frame container (see output_data_frame for example usage)."
    },
    {
      "type": "h2",
      "text": "See Also"
    },
    {
      "type": "ul",
      "items": [
        "output_data_frame",
        "DataGrid and DataTable are the objects you can return from the rendering function to specify options."
      ]
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)\nimport plotly.express as px\nfrom shinywidgets import render_widget\n\nfrom shiny import reactive, req\nfrom shiny.express import render, ui\n\n# Load the Gapminder dataset\ndf = px.data.gapminder()\n\n# Prepare a summary DataFrame\nsummary_df = (\n    df.groupby(\"country\")\n    .agg(\n        {\n            \"pop\": [\"min\", \"max\", \"mean\"],\n            \"lifeExp\": [\"min\", \"max\", \"mean\"],\n            \"gdpPercap\": [\"min\", \"max\", \"mean\"],\n        }\n    )\n    .reset_index()\n)\n\nsummary_df.columns = [\"_\".join(col).strip() for col in summary_df.columns.values]\nsummary_df.rename(columns={\"country_\": \"country\"}, inplace=True)\n\n# Set up the UI\n\nui.page_opts(fillable=True)\n\nui.markdown(\n    \"**Instructions**: Select one or more countries in the table below to see more information.\"\n)\n\nwith ui.layout_columns(col_widths=[12, 6, 6]):\n    with ui.card(height=\"400px\"):\n\n        @render.data_frame\n        def summary_data():\n            return render.DataGrid(summary_df.round(2), selection_mode=\"rows\")\n\n    with ui.card(height=\"400px\"):\n\n        @render_widget\n        def country_detail_pop():\n            return px.line(\n                filtered_df(),\n                x=\"year\",\n                y=\"pop\",\n                color=\"country\",\n                title=\"Population Over Time\",\n            )\n\n    with ui.card(height=\"400px\"):\n\n        @render_widget\n        def country_detail_percap():\n            return px.line(\n                filtered_df(),\n                x=\"year\",\n                y=\"gdpPercap\",\n                color=\"country\",\n                title=\"GDP per Capita Over Time\",\n            )\n\n\n@reactive.calc\ndef filtered_df():\n    data_selected = summary_data.data_view(selected=True)\n    req(not data_selected.empty)\n    countries = data_selected[\"country\"]\n\n    # Filter data for selected countries\n    return df[df[\"country\"].isin(countries)]\n\n"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "cell_patches"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.cell_patches()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of the data frame's edits."
    },
    {
      "type": "p",
      "text": "This reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A list of cell patches to apply to the data frame."
    },
    {
      "type": "h3",
      "text": "cell_selection"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.cell_selection()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of selected cell information."
    },
    {
      "type": "p",
      "text": "This method is a wrapper around input.<id>_cell_selection(), where <id> is the id of the data frame output. This method returns the selected rows and will cause reactive updates as the selected rows change."
    },
    {
      "type": "p",
      "text": "The value has been enhanced from it's vanilla form to include the missing cols key (or rows key) as a tuple of integers representing all column (or row) numbers. This allows for consistent usage within code when subsetting your data. These missing keys are not sent over the wire as they are independent of the selection."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "CellSelection representing the indices of the selected cells. If no cells are currently selected, None is returned."
    },
    {
      "type": "h3",
      "text": "data"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.data()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of the data frame's data."
    },
    {
      "type": "p",
      "text": "This reactive calculation returns the render method's underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set."
    },
    {
      "type": "p",
      "text": "The returned value is a shallow copy of the original data frame. It is possible that alterations to the .data() data frame could alter other associated data frame values. Please be cautious when using this value directly."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "This reactive calculation returns the render method’s underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set."
    },
    {
      "type": "h3",
      "text": "data_patched"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.data_patched()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of the data frame's patched data."
    },
    {
      "type": "p",
      "text": "This method returns the .data() data frame with all .cell_patches() patches applied."
    },
    {
      "type": "p",
      "text": "The returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_patched() data frame could alter other associated data frame values. Please be cautious when using this value directly."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The patched data frame."
    },
    {
      "type": "h3",
      "text": "data_view"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.data_view(selected=False)"
    },
    {
      "type": "p",
      "text": "Reactive function that retrieves the data how it is viewed within the browser."
    },
    {
      "type": "p",
      "text": "This function will return the .data_patched() data frame with the user's sorting and filtering applied. It represents the data frame as viewed by the user within the browser."
    },
    {
      "type": "p",
      "text": "The returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_view() data frame could alter other associated date frame values. Please be cautious when using this value directly."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "If True, subset the viewed data to the selected area. Defaults to False (all rows)."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A view of the (possibly selected) data frame as seen in the browser."
    },
    {
      "type": "h4",
      "text": "See Also"
    },
    {
      "type": "ul",
      "items": [
        "pandas.DataFrame.copy API documentation",
        "polars.DataFrame.clone API documentation",
        "narwhals.DataFrame.clone API documentation"
      ]
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\ndf = reactive.value(mtcars.iloc[:, range(4)])\n\n\nwith ui.layout_columns(col_widths=[4, 4, 4]):\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Editable data frame\n                * Edit the cells!\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_original():\n                return render.DataGrid(\n                    df(),\n                    editable=True,\n                )\n\n            # Convert edited values to the correct data type\n            @df_original.set_patch_fn\n            def _(*, patch: render.CellPatch) -> render.CellValue:\n                if patch[\"column_index\"] in [0, 2]:\n                    return float(patch[\"value\"])\n                return int(patch[\"value\"])\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Updated data from the first data frame\n                * Select the rows!\n                * Filter and sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_edited():\n                return render.DataGrid(\n                    df_original.data_view(),\n                    selection_mode=\"rows\",\n                    filters=True,\n                )\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Selected data from the second data frame\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_selected():\n                return render.DataGrid(\n                    df_edited.data_view(selected=True),\n                    selection_mode=\"none\",\n                )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
    },
    {
      "type": "h3",
      "text": "data_view_rows"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.data_view_rows()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of the data frame's user view row numbers."
    },
    {
      "type": "p",
      "text": "This value is a wrapper around input.<id>_data_view_rows(), where <id> is the id of the data frame output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The row numbers of the data frame that are currently being viewed in the browser after sorting and filtering has been applied."
    },
    {
      "type": "h3",
      "text": "filter"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.filter()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of the data frame's column filters."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "An array of column number and value information. If the column type is a number, a tuple of (min, max) is used for value. If no min (or max) value is set, None is used in its place. If the column type is a string, the string value is used for value."
    },
    {
      "type": "h3",
      "text": "input_cell_selection"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.input_cell_selection()"
    },
    {
      "type": "p",
      "text": "[Deprecated] Reactive calculation of selected cell information."
    },
    {
      "type": "p",
      "text": "Please use ~shiny.express.render.data_frame's .cell_selection() method instead."
    },
    {
      "type": "h3",
      "text": "selection_modes"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.selection_modes()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of the data frame's possible selection modes."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The possible selection modes for the data frame."
    },
    {
      "type": "h3",
      "text": "set_patch_fn"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.set_patch_fn(fn)"
    },
    {
      "type": "p",
      "text": "Decorator to set the function that updates a single cell in the data frame."
    },
    {
      "type": "p",
      "text": "The default patch function returns the value as is."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A function that accepts a kwarg patch and returns the processed patch.value for the cell."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\ndf = reactive.value(mtcars.iloc[:, range(4)])\n\n\nwith ui.layout_columns(col_widths=[4, 4, 4]):\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Editable data frame\n                * Edit the cells!\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_original():\n                return render.DataGrid(\n                    df(),\n                    editable=True,\n                )\n\n            # Convert edited values to the correct data type\n            @df_original.set_patch_fn\n            def _(*, patch: render.CellPatch) -> render.CellValue:\n                if patch[\"column_index\"] in [0, 2]:\n                    return float(patch[\"value\"])\n                return int(patch[\"value\"])\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Updated data from the first data frame\n                * Select the rows!\n                * Filter and sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_edited():\n                return render.DataGrid(\n                    df_original.data_view(),\n                    selection_mode=\"rows\",\n                    filters=True,\n                )\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Selected data from the second data frame\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_selected():\n                return render.DataGrid(\n                    df_edited.data_view(selected=True),\n                    selection_mode=\"none\",\n                )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
    },
    {
      "type": "h3",
      "text": "set_patches_fn"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.set_patches_fn(fn)"
    },
    {
      "type": "p",
      "text": "Decorator to set the function that updates a batch of cells in the data frame."
    },
    {
      "type": "p",
      "text": "The default patches function calls the async ._patch_fn() on each input patch and returns the updated patch values."
    },
    {
      "type": "p",
      "text": "There are no checks made on the quantity of patches returned. The user can return more, less, or the same number of patches as the input patches. This allows for the app author to own more control over which columns are updated and how they are updated."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A function that accepts a kwarg patches and returns a list of (possibly updated) patches to apply to the data frame."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\nhere = Path(__file__).parent\nmtcars_df = reactive.value(pd.read_csv(here / \"mtcars.csv\").iloc[:, range(4)])\n\n# A copy of the data frame that will store all the edits\nedited_df = reactive.value(None)\n\n\n# Copy mtcars_df to edited_df when mtcars_df changes and on initial load\n@reactive.effect\ndef _sync_mtcars_to_edited_df():\n    edited_df.set(mtcars_df())\n\n\nui.markdown(\n    \"\"\"\n    #### Instructions:\n    * Run the app locally so that the edits to the underlying CSV file will persist.\n    * Edit the cells in the table.\n\n    #### Note:\n    The data frame will not be re-rendered as the result of `df()` has not updated.\n\n    Once the `df()` is invalidated, all local edits are forgotten, and the data frame will be re-rendered. However, since the edits were saved to the CSV file, the edits will persist between refreshes (when run locally).\n    \"\"\"\n)\n\nwith ui.card():\n\n    @render.data_frame\n    def my_data_frame():\n        return render.DataGrid(\n            mtcars_df(),\n            editable=True,\n        )\n\n    # Save the edited values to the data source (ex: the CSV file)\n    @my_data_frame.set_patches_fn\n    def _(*, patches: list[render.CellPatch]) -> list[render.CellPatch]:\n        for patch in patches:\n            if patch[\"column_index\"] in [0, 2]:\n                patch[\"value\"] = float(patch[\"value\"])\n            else:\n                patch[\"value\"] = int(patch[\"value\"])\n\n        # \"Save to the database\" by writing the edited data to a CSV file\n        df = edited_df().copy()\n        for patch in patches:\n            df.iloc[patch[\"row_index\"], patch[\"column_index\"]] = patch[\"value\"]\n        edited_df.set(df)\n        df.to_csv(here / \"mtcars.csv\", index=False)\n        print(\"Saved the edited data to './mtcars.csv'\")\n\n        return patches\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp\n21.0,6,160.0,110\n21.0,6,160.0,110\n22.8,4,108.0,93\n21.4,6,258.0,110\n18.7,8,360.0,175\n18.1,6,225.0,105\n14.3,8,360.0,245\n24.4,4,146.7,62\n22.8,4,140.8,95\n19.2,6,167.6,123\n17.8,6,167.6,123\n16.4,8,275.8,180\n17.3,8,275.8,180\n15.2,8,275.8,180\n10.4,8,472.0,205\n10.4,8,460.0,215\n14.7,8,440.0,230\n32.4,4,78.7,66\n30.4,4,75.7,52\n33.9,4,71.1,65\n21.5,4,120.1,97\n15.5,8,318.0,150\n15.2,8,304.0,150\n13.3,8,350.0,245\n19.2,8,400.0,175\n27.3,4,79.0,66\n26.0,4,120.3,91\n30.4,4,95.1,113\n15.8,8,351.0,264\n19.7,6,145.0,175\n15.0,8,301.0,335\n21.4,4,121.0,109\n\n"
    },
    {
      "type": "h3",
      "text": "sort"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.sort()"
    },
    {
      "type": "p",
      "text": "Reactive calculation of the data frame's column sorting information."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "An array of column number and is descending information."
    },
    {
      "type": "h3",
      "text": "update_cell_selection"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.update_cell_selection(selection)"
    },
    {
      "type": "p",
      "text": "Update the cell selection in the data frame."
    },
    {
      "type": "p",
      "text": "Currently only single (\"type\": \"row\") or multiple (\"type\": \"rows\") row selection is supported."
    },
    {
      "type": "p",
      "text": "If the current data frame selection mode is \"none\" and a non-none selection is provided, a warning will be raised and no rows will be selected. If cells are supposes to be selected, the selection mode returned from the render function must (currently) be set to \"row\" or \"rows\"."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The cell selection to apply to the data frame. This can be a CellSelection object, \"all\" to select all cells (if possible), or None to clear the selection."
    },
    {
      "type": "h3",
      "text": "update_cell_value"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.update_cell_value(value, *, row, col)"
    },
    {
      "type": "p",
      "text": "Update the value of a cell in the data frame."
    },
    {
      "type": "p",
      "text": "Calling this method will set a new entry in .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The new value to set the cell to."
    },
    {
      "type": "p",
      "text": "The row index of the cell to update."
    },
    {
      "type": "p",
      "text": "The column index of the cell to update."
    },
    {
      "type": "h3",
      "text": "update_data"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.update_data(data)"
    },
    {
      "type": "p",
      "text": "Update the data frame with new data."
    },
    {
      "type": "p",
      "text": "Calling this method will update the .data() data frame with new data and will remove all .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame. Any incompatible sorting or filtering settings will be silently dropped."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The new data to render."
    },
    {
      "type": "h3",
      "text": "update_filter"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.update_filter(filter)"
    },
    {
      "type": "p",
      "text": "Update the column filtering in the data frame."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A list of column filtering information. If None, filtering will be removed."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\ndata = reactive.value(mtcars.iloc[:, range(4)])\nwith ui.card():\n    with ui.layout_column_wrap(fill=False):\n        ui.input_action_button(\"btn\", \"Filter on columns 0, 1, and 3\")\n        ui.input_action_button(\"reset\", \"Reset column filters\")\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data(), filters=True)\n\n\n@reactive.effect\n@reactive.event(input.reset)\nasync def _():\n    await df.update_filter(None)\n\n\n@reactive.effect\n@reactive.event(input.btn)\nasync def _():\n    await df.update_filter(\n        [\n            {\"col\": 0, \"value\": [19, 25]},\n            {\"col\": 1, \"value\": [None, 6]},\n            {\"col\": 3, \"value\": [100, None]},\n        ]\n    )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
    },
    {
      "type": "h3",
      "text": "update_sort"
    },
    {
      "type": "code",
      "text": "express.render.data_frame.update_sort(sort)"
    },
    {
      "type": "p",
      "text": "Update the column sorting in the data frame."
    },
    {
      "type": "p",
      "text": "The sort will be applied in reverse order so that the first value has the highest precedence. This mean ties will go to the second sort column (and so on)."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A list of column sorting information. If None, sorting will be removed. int values will be upgraded to {\"col\": int, \"desc\": <DESC>} where <DESC> is True if the column is number like and False otherwise."
    },
    {
      "type": "h4",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\ndata = reactive.value(mtcars.iloc[:, range(4)])\n\nwith ui.card():\n    ui.input_action_button(\"btn\", \"Sort on columns 1↑ and 3↓\")\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data())\n\n\n@reactive.effect\n@reactive.event(input.btn)\nasync def _():\n    await df.update_sort([{\"col\": 1, \"desc\": False}, {\"col\": 3, \"desc\": True}])\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
    }
  ],
  "code_examples": [
    "express.render.data_frame(self, fn)",
    "express.render.data_frame(self, fn)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)\nimport plotly.express as px\nfrom shinywidgets import render_widget\n\nfrom shiny import reactive, req\nfrom shiny.express import render, ui\n\n# Load the Gapminder dataset\ndf = px.data.gapminder()\n\n# Prepare a summary DataFrame\nsummary_df = (\n    df.groupby(\"country\")\n    .agg(\n        {\n            \"pop\": [\"min\", \"max\", \"mean\"],\n            \"lifeExp\": [\"min\", \"max\", \"mean\"],\n            \"gdpPercap\": [\"min\", \"max\", \"mean\"],\n        }\n    )\n    .reset_index()\n)\n\nsummary_df.columns = [\"_\".join(col).strip() for col in summary_df.columns.values]\nsummary_df.rename(columns={\"country_\": \"country\"}, inplace=True)\n\n# Set up the UI\n\nui.page_opts(fillable=True)\n\nui.markdown(\n    \"**Instructions**: Select one or more countries in the table below to see more information.\"\n)\n\nwith ui.layout_columns(col_widths=[12, 6, 6]):\n    with ui.card(height=\"400px\"):\n\n        @render.data_frame\n        def summary_data():\n            return render.DataGrid(summary_df.round(2), selection_mode=\"rows\")\n\n    with ui.card(height=\"400px\"):\n\n        @render_widget\n        def country_detail_pop():\n            return px.line(\n                filtered_df(),\n                x=\"year\",\n                y=\"pop\",\n                color=\"country\",\n                title=\"Population Over Time\",\n            )\n\n    with ui.card(height=\"400px\"):\n\n        @render_widget\n        def country_detail_percap():\n            return px.line(\n                filtered_df(),\n                x=\"year\",\n                y=\"gdpPercap\",\n                color=\"country\",\n                title=\"GDP per Capita Over Time\",\n            )\n\n\n@reactive.calc\ndef filtered_df():\n    data_selected = summary_data.data_view(selected=True)\n    req(not data_selected.empty)\n    countries = data_selected[\"country\"]\n\n    # Filter data for selected countries\n    return df[df[\"country\"].isin(countries)]\n\n",
    "express.render.data_frame.cell_patches()",
    "express.render.data_frame.cell_patches()",
    "express.render.data_frame.cell_selection()",
    "express.render.data_frame.cell_selection()",
    "express.render.data_frame.data()",
    "express.render.data_frame.data()",
    "express.render.data_frame.data_patched()",
    "express.render.data_frame.data_patched()",
    "express.render.data_frame.data_view(selected=False)",
    "express.render.data_frame.data_view(selected=False)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\ndf = reactive.value(mtcars.iloc[:, range(4)])\n\n\nwith ui.layout_columns(col_widths=[4, 4, 4]):\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Editable data frame\n                * Edit the cells!\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_original():\n                return render.DataGrid(\n                    df(),\n                    editable=True,\n                )\n\n            # Convert edited values to the correct data type\n            @df_original.set_patch_fn\n            def _(*, patch: render.CellPatch) -> render.CellValue:\n                if patch[\"column_index\"] in [0, 2]:\n                    return float(patch[\"value\"])\n                return int(patch[\"value\"])\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Updated data from the first data frame\n                * Select the rows!\n                * Filter and sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_edited():\n                return render.DataGrid(\n                    df_original.data_view(),\n                    selection_mode=\"rows\",\n                    filters=True,\n                )\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Selected data from the second data frame\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_selected():\n                return render.DataGrid(\n                    df_edited.data_view(selected=True),\n                    selection_mode=\"none\",\n                )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
    "express.render.data_frame.data_view_rows()",
    "express.render.data_frame.data_view_rows()",
    "express.render.data_frame.filter()",
    "express.render.data_frame.filter()",
    "express.render.data_frame.input_cell_selection()",
    "express.render.data_frame.input_cell_selection()",
    "express.render.data_frame.selection_modes()",
    "express.render.data_frame.selection_modes()",
    "express.render.data_frame.set_patch_fn(fn)",
    "express.render.data_frame.set_patch_fn(fn)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\ndf = reactive.value(mtcars.iloc[:, range(4)])\n\n\nwith ui.layout_columns(col_widths=[4, 4, 4]):\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Editable data frame\n                * Edit the cells!\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_original():\n                return render.DataGrid(\n                    df(),\n                    editable=True,\n                )\n\n            # Convert edited values to the correct data type\n            @df_original.set_patch_fn\n            def _(*, patch: render.CellPatch) -> render.CellValue:\n                if patch[\"column_index\"] in [0, 2]:\n                    return float(patch[\"value\"])\n                return int(patch[\"value\"])\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Updated data from the first data frame\n                * Select the rows!\n                * Filter and sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_edited():\n                return render.DataGrid(\n                    df_original.data_view(),\n                    selection_mode=\"rows\",\n                    filters=True,\n                )\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Selected data from the second data frame\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_selected():\n                return render.DataGrid(\n                    df_edited.data_view(selected=True),\n                    selection_mode=\"none\",\n                )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
    "express.render.data_frame.set_patches_fn(fn)",
    "express.render.data_frame.set_patches_fn(fn)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\nhere = Path(__file__).parent\nmtcars_df = reactive.value(pd.read_csv(here / \"mtcars.csv\").iloc[:, range(4)])\n\n# A copy of the data frame that will store all the edits\nedited_df = reactive.value(None)\n\n\n# Copy mtcars_df to edited_df when mtcars_df changes and on initial load\n@reactive.effect\ndef _sync_mtcars_to_edited_df():\n    edited_df.set(mtcars_df())\n\n\nui.markdown(\n    \"\"\"\n    #### Instructions:\n    * Run the app locally so that the edits to the underlying CSV file will persist.\n    * Edit the cells in the table.\n\n    #### Note:\n    The data frame will not be re-rendered as the result of `df()` has not updated.\n\n    Once the `df()` is invalidated, all local edits are forgotten, and the data frame will be re-rendered. However, since the edits were saved to the CSV file, the edits will persist between refreshes (when run locally).\n    \"\"\"\n)\n\nwith ui.card():\n\n    @render.data_frame\n    def my_data_frame():\n        return render.DataGrid(\n            mtcars_df(),\n            editable=True,\n        )\n\n    # Save the edited values to the data source (ex: the CSV file)\n    @my_data_frame.set_patches_fn\n    def _(*, patches: list[render.CellPatch]) -> list[render.CellPatch]:\n        for patch in patches:\n            if patch[\"column_index\"] in [0, 2]:\n                patch[\"value\"] = float(patch[\"value\"])\n            else:\n                patch[\"value\"] = int(patch[\"value\"])\n\n        # \"Save to the database\" by writing the edited data to a CSV file\n        df = edited_df().copy()\n        for patch in patches:\n            df.iloc[patch[\"row_index\"], patch[\"column_index\"]] = patch[\"value\"]\n        edited_df.set(df)\n        df.to_csv(here / \"mtcars.csv\", index=False)\n        print(\"Saved the edited data to './mtcars.csv'\")\n\n        return patches\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp\n21.0,6,160.0,110\n21.0,6,160.0,110\n22.8,4,108.0,93\n21.4,6,258.0,110\n18.7,8,360.0,175\n18.1,6,225.0,105\n14.3,8,360.0,245\n24.4,4,146.7,62\n22.8,4,140.8,95\n19.2,6,167.6,123\n17.8,6,167.6,123\n16.4,8,275.8,180\n17.3,8,275.8,180\n15.2,8,275.8,180\n10.4,8,472.0,205\n10.4,8,460.0,215\n14.7,8,440.0,230\n32.4,4,78.7,66\n30.4,4,75.7,52\n33.9,4,71.1,65\n21.5,4,120.1,97\n15.5,8,318.0,150\n15.2,8,304.0,150\n13.3,8,350.0,245\n19.2,8,400.0,175\n27.3,4,79.0,66\n26.0,4,120.3,91\n30.4,4,95.1,113\n15.8,8,351.0,264\n19.7,6,145.0,175\n15.0,8,301.0,335\n21.4,4,121.0,109\n\n",
    "express.render.data_frame.sort()",
    "express.render.data_frame.sort()",
    "express.render.data_frame.update_cell_selection(selection)",
    "express.render.data_frame.update_cell_selection(selection)",
    "express.render.data_frame.update_cell_value(value, *, row, col)",
    "express.render.data_frame.update_cell_value(value, *, row, col)",
    "express.render.data_frame.update_data(data)",
    "express.render.data_frame.update_data(data)",
    "express.render.data_frame.update_filter(filter)",
    "express.render.data_frame.update_filter(filter)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\ndata = reactive.value(mtcars.iloc[:, range(4)])\nwith ui.card():\n    with ui.layout_column_wrap(fill=False):\n        ui.input_action_button(\"btn\", \"Filter on columns 0, 1, and 3\")\n        ui.input_action_button(\"reset\", \"Reset column filters\")\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data(), filters=True)\n\n\n@reactive.effect\n@reactive.event(input.reset)\nasync def _():\n    await df.update_filter(None)\n\n\n@reactive.effect\n@reactive.event(input.btn)\nasync def _():\n    await df.update_filter(\n        [\n            {\"col\": 0, \"value\": [19, 25]},\n            {\"col\": 1, \"value\": [None, 6]},\n            {\"col\": 3, \"value\": [100, None]},\n        ]\n    )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
    "express.render.data_frame.update_sort(sort)",
    "express.render.data_frame.update_sort(sort)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\ndata = reactive.value(mtcars.iloc[:, range(4)])\n\nwith ui.card():\n    ui.input_action_button(\"btn\", \"Sort on columns 1↑ and 3↓\")\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data())\n\n\n@reactive.effect\n@reactive.event(input.btn)\nasync def _():\n    await df.update_sort([{\"col\": 1, \"desc\": False}, {\"col\": 3, \"desc\": True}])\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
  ],
  "toc": [
    {
      "title": "express.render.data_frame",
      "url": "api/express/#shiny.express.render.data_frame"
    },
    {
      "title": "Returns",
      "url": "api/express/#returns"
    },
    {
      "title": "Row selection",
      "url": "api/express/#row-selection"
    },
    {
      "title": "Editing cells",
      "url": "api/express/#editing-cells"
    },
    {
      "title": "Data methods",
      "url": "api/express/#data-methods"
    },
    {
      "title": "Narwhals",
      "url": "api/express/#narwhals"
    },
    {
      "title": "Tip",
      "url": "api/express/#tip"
    },
    {
      "title": "See Also",
      "url": "api/express/#see-also"
    },
    {
      "title": "Examples",
      "url": "api/express/#examples"
    },
    {
      "title": "Methods",
      "url": "api/express/#methods"
    },
    {
      "title": "cell_patches",
      "url": "api/express/#shiny.express.render.data_frame.cell_patches"
    },
    {
      "title": "cell_selection",
      "url": "api/express/#shiny.express.render.data_frame.cell_selection"
    },
    {
      "title": "data",
      "url": "api/express/#shiny.express.render.data_frame.data"
    },
    {
      "title": "data_patched",
      "url": "api/express/#shiny.express.render.data_frame.data_patched"
    },
    {
      "title": "data_view",
      "url": "api/express/#shiny.express.render.data_frame.data_view"
    },
    {
      "title": "data_view_rows",
      "url": "api/express/#shiny.express.render.data_frame.data_view_rows"
    },
    {
      "title": "filter",
      "url": "api/express/#shiny.express.render.data_frame.filter"
    },
    {
      "title": "input_cell_selection",
      "url": "api/express/#shiny.express.render.data_frame.input_cell_selection"
    },
    {
      "title": "selection_modes",
      "url": "api/express/#shiny.express.render.data_frame.selection_modes"
    },
    {
      "title": "set_patch_fn",
      "url": "api/express/#shiny.express.render.data_frame.set_patch_fn"
    },
    {
      "title": "set_patches_fn",
      "url": "api/express/#shiny.express.render.data_frame.set_patches_fn"
    },
    {
      "title": "sort",
      "url": "api/express/#shiny.express.render.data_frame.sort"
    },
    {
      "title": "update_cell_selection",
      "url": "api/express/#shiny.express.render.data_frame.update_cell_selection"
    },
    {
      "title": "update_cell_value",
      "url": "api/express/#shiny.express.render.data_frame.update_cell_value"
    },
    {
      "title": "update_data",
      "url": "api/express/#shiny.express.render.data_frame.update_data"
    },
    {
      "title": "update_filter",
      "url": "api/express/#shiny.express.render.data_frame.update_filter"
    },
    {
      "title": "update_sort",
      "url": "api/express/#shiny.express.render.data_frame.update_sort"
    },
    {
      "title": "Shiny Express API",
      "url": "api/express/index.html"
    },
    {
      "title": "Input components"
    },
    {
      "title": "express.ui.input_select",
      "url": "api/express/express.ui.input_select.html"
    },
    {
      "title": "express.ui.input_selectize",
      "url": "api/express/express.ui.input_selectize.html"
    },
    {
      "title": "express.ui.input_slider",
      "url": "api/express/express.ui.input_slider.html"
    },
    {
      "title": "express.ui.input_dark_mode",
      "url": "api/express/express.ui.input_dark_mode.html"
    },
    {
      "title": "express.ui.input_date",
      "url": "api/express/express.ui.input_date.html"
    },
    {
      "title": "express.ui.input_date_range",
      "url": "api/express/express.ui.input_date_range.html"
    },
    {
      "title": "express.ui.input_checkbox",
      "url": "api/express/express.ui.input_checkbox.html"
    },
    {
      "title": "express.ui.input_checkbox_group",
      "url": "api/express/express.ui.input_checkbox_group.html"
    },
    {
      "title": "express.ui.input_switch",
      "url": "api/express/express.ui.input_switch.html"
    },
    {
      "title": "express.ui.input_radio_buttons",
      "url": "api/express/express.ui.input_radio_buttons.html"
    },
    {
      "title": "express.ui.input_numeric",
      "url": "api/express/express.ui.input_numeric.html"
    },
    {
      "title": "express.ui.input_text",
      "url": "api/express/express.ui.input_text.html"
    },
    {
      "title": "express.ui.input_text_area",
      "url": "api/express/express.ui.input_text_area.html"
    },
    {
      "title": "express.ui.input_password",
      "url": "api/express/express.ui.input_password.html"
    },
    {
      "title": "express.ui.input_action_button",
      "url": "api/express/express.ui.input_action_button.html"
    },
    {
      "title": "express.ui.input_action_link",
      "url": "api/express/express.ui.input_action_link.html"
    },
    {
      "title": "express.ui.input_task_button",
      "url": "api/express/express.ui.input_task_button.html"
    },
    {
      "title": "Output components"
    },
    {
      "title": "express.render.plot",
      "url": "api/express/express.render.plot.html"
    },
    {
      "title": "express.render.table",
      "url": "api/express/express.render.table.html"
    },
    {
      "title": "express.render.DataTable",
      "url": "api/express/express.render.DataTable.html"
    },
    {
      "title": "express.render.data_frame",
      "url": "api/express/express.render.data_frame.html"
    },
    {
      "title": "express.render.DataGrid",
      "url": "api/express/express.render.DataGrid.html"
    },
    {
      "title": "express.render.text",
      "url": "api/express/express.render.text.html"
    },
    {
      "title": "express.render.ui",
      "url": "api/express/express.render.ui.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "express.render.image",
      "url": "api/express/express.render.image.html"
    },
    {
      "title": "express.render.express",
      "url": "api/express/express.render.express.html"
    },
    {
      "title": "Layouts and other UI tools"
    },
    {
      "title": "express.ui.page_opts",
      "url": "api/express/express.ui.page_opts.html"
    },
    {
      "title": "express.ui.sidebar",
      "url": "api/express/express.ui.sidebar.html"
    },
    {
      "title": "express.ui.layout_columns",
      "url": "api/express/express.ui.layout_columns.html"
    },
    {
      "title": "express.ui.layout_column_wrap",
      "url": "api/express/express.ui.layout_column_wrap.html"
    },
    {
      "title": "express.ui.card",
      "url": "api/express/express.ui.card.html"
    },
    {
      "title": "express.ui.card_header",
      "url": "api/express/express.ui.card_header.html"
    },
    {
      "title": "express.ui.card_footer",
      "url": "api/express/express.ui.card_footer.html"
    },
    {
      "title": "express.ui.value_box",
      "url": "api/express/express.ui.value_box.html"
    },
    {
      "title": "express.ui.value_box_theme",
      "url": "api/express/express.ui.value_box_theme.html"
    },
    {
      "title": "express.ui.popover",
      "url": "api/express/express.ui.popover.html"
    },
    {
      "title": "express.ui.tooltip",
      "url": "api/express/express.ui.tooltip.html"
    },
    {
      "title": "express.ui.accordion",
      "url": "api/express/express.ui.accordion.html"
    },
    {
      "title": "express.ui.accordion_panel",
      "url": "api/express/express.ui.accordion_panel.html"
    },
    {
      "title": "express.ui.layout_sidebar",
      "url": "api/express/express.ui.layout_sidebar.html"
    },
    {
      "title": "Navigate multiple panels"
    },
    {
      "title": "express.ui.nav_panel",
      "url": "api/express/express.ui.nav_panel.html"
    },
    {
      "title": "express.ui.navset_card_underline",
      "url": "api/express/express.ui.navset_card_underline.html"
    },
    {
      "title": "express.ui.navset_card_tab",
      "url": "api/express/express.ui.navset_card_tab.html"
    },
    {
      "title": "express.ui.navset_card_pill",
      "url": "api/express/express.ui.navset_card_pill.html"
    },
    {
      "title": "express.ui.nav_spacer",
      "url": "api/express/express.ui.nav_spacer.html"
    },
    {
      "title": "express.ui.nav_menu",
      "url": "api/express/express.ui.nav_menu.html"
    },
    {
      "title": "express.ui.nav_control",
      "url": "api/express/express.ui.nav_control.html"
    },
    {
      "title": "express.ui.navset_bar",
      "url": "api/express/express.ui.navset_bar.html"
    },
    {
      "title": "express.ui.navset_tab",
      "url": "api/express/express.ui.navset_tab.html"
    },
    {
      "title": "express.ui.navset_pill",
      "url": "api/express/express.ui.navset_pill.html"
    },
    {
      "title": "express.ui.navset_underline",
      "url": "api/express/express.ui.navset_underline.html"
    },
    {
      "title": "express.ui.navset_pill_list",
      "url": "api/express/express.ui.navset_pill_list.html"
    },
    {
      "title": "express.ui.navset_hidden",
      "url": "api/express/express.ui.navset_hidden.html"
    },
    {
      "title": "express.ui.navbar_options",
      "url": "api/express/express.ui.navbar_options.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "express.ui.Chat",
      "url": "api/express/express.ui.Chat.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "express.ui.MarkdownStream",
      "url": "api/express/express.ui.MarkdownStream.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/express/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/express/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/express/reactive.value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/express/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/express/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/express/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/express/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/express/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/express/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/express/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/express/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/express/req.html"
    },
    {
      "title": "Reusable Express code"
    },
    {
      "title": "express.ui.hold",
      "url": "api/express/express.ui.hold.html"
    },
    {
      "title": "express.expressify",
      "url": "api/express/express.expressify.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "express.ui.update_select",
      "url": "api/express/express.ui.update_select.html"
    },
    {
      "title": "express.ui.update_selectize",
      "url": "api/express/express.ui.update_selectize.html"
    },
    {
      "title": "express.ui.update_slider",
      "url": "api/express/express.ui.update_slider.html"
    },
    {
      "title": "express.ui.update_dark_mode",
      "url": "api/express/express.ui.update_dark_mode.html"
    },
    {
      "title": "express.ui.update_date",
      "url": "api/express/express.ui.update_date.html"
    },
    {
      "title": "express.ui.update_date_range",
      "url": "api/express/express.ui.update_date_range.html"
    },
    {
      "title": "express.ui.update_checkbox",
      "url": "api/express/express.ui.update_checkbox.html"
    },
    {
      "title": "express.ui.update_checkbox_group",
      "url": "api/express/express.ui.update_checkbox_group.html"
    },
    {
      "title": "express.ui.update_switch",
      "url": "api/express/express.ui.update_switch.html"
    },
    {
      "title": "express.ui.update_radio_buttons",
      "url": "api/express/express.ui.update_radio_buttons.html"
    },
    {
      "title": "express.ui.update_numeric",
      "url": "api/express/express.ui.update_numeric.html"
    },
    {
      "title": "express.ui.update_text",
      "url": "api/express/express.ui.update_text.html"
    },
    {
      "title": "express.ui.update_text_area",
      "url": "api/express/express.ui.update_text_area.html"
    },
    {
      "title": "express.ui.update_navs",
      "url": "api/express/express.ui.update_navs.html"
    },
    {
      "title": "express.ui.update_action_button",
      "url": "api/express/express.ui.update_action_button.html"
    },
    {
      "title": "express.ui.update_action_link",
      "url": "api/express/express.ui.update_action_link.html"
    },
    {
      "title": "express.ui.update_task_button",
      "url": "api/express/express.ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "express.ui.update_sidebar",
      "url": "api/express/express.ui.update_sidebar.html"
    },
    {
      "title": "express.ui.update_tooltip",
      "url": "api/express/express.ui.update_tooltip.html"
    },
    {
      "title": "express.ui.update_popover",
      "url": "api/express/express.ui.update_popover.html"
    },
    {
      "title": "express.ui.update_accordion",
      "url": "api/express/express.ui.update_accordion.html"
    },
    {
      "title": "express.ui.update_accordion_panel",
      "url": "api/express/express.ui.update_accordion_panel.html"
    },
    {
      "title": "express.ui.insert_accordion_panel",
      "url": "api/express/express.ui.insert_accordion_panel.html"
    },
    {
      "title": "express.ui.remove_accordion_panel",
      "url": "api/express/express.ui.remove_accordion_panel.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "express.ui.help_text",
      "url": "api/express/express.ui.help_text.html"
    },
    {
      "title": "express.ui.notification_show",
      "url": "api/express/express.ui.notification_show.html"
    },
    {
      "title": "express.ui.notification_remove",
      "url": "api/express/express.ui.notification_remove.html"
    },
    {
      "title": "express.ui.modal",
      "url": "api/express/express.ui.modal.html"
    },
    {
      "title": "express.ui.modal_show",
      "url": "api/express/express.ui.modal_show.html"
    },
    {
      "title": "express.ui.modal_remove",
      "url": "api/express/express.ui.modal_remove.html"
    },
    {
      "title": "express.ui.modal_button",
      "url": "api/express/express.ui.modal_button.html"
    },
    {
      "title": "express.ui.Progress",
      "url": "api/express/express.ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "express.module",
      "url": "api/express/express.module.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "express.ui.panel_absolute",
      "url": "api/express/express.ui.panel_absolute.html"
    },
    {
      "title": "express.ui.panel_fixed",
      "url": "api/express/express.ui.panel_fixed.html"
    },
    {
      "title": "express.ui.panel_title",
      "url": "api/express/express.ui.panel_title.html"
    },
    {
      "title": "express.ui.panel_well",
      "url": "api/express/express.ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "express.ui.input_file",
      "url": "api/express/express.ui.input_file.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "Dynamic UI"
    },
    {
      "title": "express.ui.panel_conditional",
      "url": "api/express/express.ui.panel_conditional.html"
    },
    {
      "title": "express.ui.insert_ui",
      "url": "api/express/express.ui.insert_ui.html"
    },
    {
      "title": "express.ui.remove_ui",
      "url": "api/express/express.ui.remove_ui.html"
    },
    {
      "title": "User Session"
    },
    {
      "title": "session.Session",
      "url": "api/express/session.Session.html"
    },
    {
      "title": "Client Data"
    },
    {
      "title": "session.ClientData",
      "url": "api/express/session.ClientData.html"
    },
    {
      "title": "UI as HTML"
    },
    {
      "title": "express.ui.Theme",
      "url": "api/express/express.ui.Theme.html"
    },
    {
      "title": "express.ui.markdown",
      "url": "api/express/express.ui.markdown.html"
    },
    {
      "title": "express.ui.include_css",
      "url": "api/express/express.ui.include_css.html"
    },
    {
      "title": "express.ui.include_js",
      "url": "api/express/express.ui.include_js.html"
    },
    {
      "title": "express.ui.HTML",
      "url": "api/express/express.ui.HTML.html"
    },
    {
      "title": "express.ui.tags",
      "url": "api/express/express.ui.tags.html"
    },
    {
      "title": "express.ui.TagList",
      "url": "api/express/express.ui.TagList.html"
    },
    {
      "title": "express.ui.busy_indicators.use",
      "url": "api/express/express.ui.busy_indicators.use.html"
    },
    {
      "title": "express.ui.busy_indicators.options",
      "url": "api/express/express.ui.busy_indicators.options.html"
    },
    {
      "title": "Application-level settings"
    },
    {
      "title": "express.app_opts",
      "url": "api/express/express.app_opts.html"
    },
    {
      "title": "Express developer tooling"
    },
    {
      "title": "express.is_express_app",
      "url": "api/express/express.is_express_app.html"
    },
    {
      "title": "express.wrap_express_app",
      "url": "api/express/express.wrap_express_app.html"
    }
  ]
}