{
  "metadata": {
    "title": "session â€“ Shiny for Python",
    "description": "",
    "url": "api/core/Session.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Create and run applications",
        "Session"
      ]
    },
    {
      "type": "h1",
      "text": "Session"
    },
    {
      "type": "p",
      "text": "Tools for managing user sessions and accessing session-related information."
    },
    {
      "type": "h1",
      "text": "session.get_current_session"
    },
    {
      "type": "code",
      "text": "session.get_current_session()"
    },
    {
      "type": "p",
      "text": "Get the current user session."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The current session if one is active, otherwise None."
    },
    {
      "type": "h2",
      "text": "Note"
    },
    {
      "type": "p",
      "text": "Shiny apps should not need to call this function directly. Instead, it is intended to be used by Shiny developers who wish to create new functions that should only be called from within an active Shiny session."
    },
    {
      "type": "h2",
      "text": "See Also"
    },
    {
      "type": "ul",
      "items": [
        "require_active_session"
      ]
    },
    {
      "type": "h1",
      "text": "session.require_active_session"
    },
    {
      "type": "code",
      "text": "session.require_active_session(session)"
    },
    {
      "type": "p",
      "text": "Raise an exception if no Shiny session is currently active."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A Session instance. If not provided, the session is inferred via get_current_session."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The session."
    },
    {
      "type": "h2",
      "text": "Note"
    },
    {
      "type": "p",
      "text": "Shiny apps should not need to call this function directly. Instead, it is intended to be used by Shiny developers who wish to create new functions that should only be called from within an active Shiny session."
    },
    {
      "type": "h2",
      "text": "Raises"
    },
    {
      "type": "p",
      "text": "If session is not active."
    },
    {
      "type": "h2",
      "text": "See Also"
    },
    {
      "type": "ul",
      "items": [
        "get_current_session"
      ]
    },
    {
      "type": "h1",
      "text": "session.session_context"
    },
    {
      "type": "code",
      "text": "session.session_context(session)"
    },
    {
      "type": "p",
      "text": "A context manager for current session."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A Session instance. If not provided, the instance is inferred via get_current_session."
    },
    {
      "type": "h1",
      "text": "reactive.get_current_context"
    },
    {
      "type": "code",
      "text": "reactive.get_current_context()"
    },
    {
      "type": "p",
      "text": "Get the current reactive context."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A ~shiny.reactive.Context class."
    },
    {
      "type": "h2",
      "text": "Raises"
    },
    {
      "type": "p",
      "text": "If called outside of a reactive context."
    },
    {
      "type": "h1",
      "text": "session.ClientData"
    },
    {
      "type": "code",
      "text": "session.ClientData(self, session)"
    },
    {
      "type": "p",
      "text": "Access (client-side) information from the browser."
    },
    {
      "type": "p",
      "text": "Provides access to client-side information, such as the URL components, the pixel ratio of the device, and the properties of outputs."
    },
    {
      "type": "p",
      "text": "Each method in this class reads a reactive input value, which means that the method will error if called outside of a reactive context."
    },
    {
      "type": "h2",
      "text": "Raises"
    },
    {
      "type": "p",
      "text": "If a method is called outside of a reactive context."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport textwrap\n\n# pyright: reportUnknownMemberType=false, reportUnknownVariableType=false\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"obs\", \"Number of observations:\", min=0, max=1000, value=500),\n        open=\"closed\",\n    ),\n    ui.markdown(\n        \"\"\"\n#### `session.clientdata` values\n\nThe following methods are available from the `session.clientdata` object and allow you\nto reactively read the client data values from the browser.\n\"\"\"\n    ),\n    ui.output_text_verbatim(\"clientdatatext\"),\n    ui.output_plot(\"myplot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n    @render.code\n    def clientdatatext():\n        return textwrap.dedent(\n            f\"\"\"\n        .url_hash()         -> {session.clientdata.url_hash()}\n        .url_hash_initial() -> {session.clientdata.url_hash_initial()}\n        .url_hostname()     -> {session.clientdata.url_hostname()}\n        .url_pathname()     -> {session.clientdata.url_pathname()}\n        .url_port()         -> {session.clientdata.url_port()}\n        .url_protocol()     -> {session.clientdata.url_protocol()}\n        .url_search()       -> {session.clientdata.url_search()}\n        .pixelratio()       -> {session.clientdata.pixelratio()}\n\n        .output_height(\"myplot\")       -> {session.clientdata.output_height(\"myplot\")}\n        .output_width(\"myplot\")        -> {session.clientdata.output_width(\"myplot\")}\n        .output_hidden(\"myplot\")       -> {session.clientdata.output_hidden(\"myplot\")}\n        .output_bg_color(\"myplot\")     -> {session.clientdata.output_bg_color(\"myplot\")}\n        .output_fg_color(\"myplot\")     -> {session.clientdata.output_fg_color(\"myplot\")}\n        .output_accent_color(\"myplot\") -> {session.clientdata.output_accent_color(\"myplot\")}\n        .output_font(\"myplot\")         -> {session.clientdata.output_font(\"myplot\")}\n\n        \"\"\"\n        )\n\n    @render.plot\n    def myplot():\n        plt.figure()\n        plt.hist(np.random.normal(size=input.obs()))  # type: ignore\n        plt.title(\"This is myplot\")\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "output_accent_color"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_accent_color(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the accent color of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The accent color of the output, or None if the output does not exist (or does not report its accent color)."
    },
    {
      "type": "h3",
      "text": "output_bg_color"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_bg_color(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the background color of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The background color of the output, or None if the output does not exist (or does not report its bg color)."
    },
    {
      "type": "h3",
      "text": "output_fg_color"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_fg_color(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the foreground color of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The foreground color of the output, or None if the output does not exist (or does not report its fg color)."
    },
    {
      "type": "h3",
      "text": "output_font"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_font(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the font(s) of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The font family of the output, or None if the output does not exist (or does not report its font styles)."
    },
    {
      "type": "h3",
      "text": "output_height"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_height(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the height of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The height of the output, or None if the output does not exist (or does not report its height)."
    },
    {
      "type": "h3",
      "text": "output_hidden"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_hidden(id)"
    },
    {
      "type": "p",
      "text": "Reactively read whether an output is hidden."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "Whether the output is hidden, or None if the output does not exist."
    },
    {
      "type": "h3",
      "text": "output_width"
    },
    {
      "type": "code",
      "text": "session.ClientData.output_width(id)"
    },
    {
      "type": "p",
      "text": "Reactively read the width of an output."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The id of the output."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The width of the output, or None if the output does not exist (or does not report its width)."
    },
    {
      "type": "h3",
      "text": "pixelratio"
    },
    {
      "type": "code",
      "text": "session.ClientData.pixelratio()"
    },
    {
      "type": "p",
      "text": "Reactively read the pixel ratio of the device."
    },
    {
      "type": "h3",
      "text": "url_hash"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_hash()"
    },
    {
      "type": "p",
      "text": "Reactively read the hash part of the URL."
    },
    {
      "type": "h3",
      "text": "url_hash_initial"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_hash_initial()"
    },
    {
      "type": "p",
      "text": "Reactively read the initial hash part of the URL."
    },
    {
      "type": "h3",
      "text": "url_hostname"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_hostname()"
    },
    {
      "type": "p",
      "text": "Reactively read the hostname part of the URL."
    },
    {
      "type": "h3",
      "text": "url_pathname"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_pathname()"
    },
    {
      "type": "p",
      "text": "The pathname part of the URL."
    },
    {
      "type": "h3",
      "text": "url_port"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_port()"
    },
    {
      "type": "p",
      "text": "Reactively read the port part of the URL."
    },
    {
      "type": "h3",
      "text": "url_protocol"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_protocol()"
    },
    {
      "type": "p",
      "text": "Reactively read the protocol part of the URL."
    },
    {
      "type": "h3",
      "text": "url_search"
    },
    {
      "type": "code",
      "text": "session.ClientData.url_search()"
    },
    {
      "type": "p",
      "text": "Reactively read the search part of the URL."
    },
    {
      "type": "h1",
      "text": "session.Session.send_custom_message"
    },
    {
      "type": "code",
      "text": "session.Session.send_custom_message(type, message)"
    },
    {
      "type": "p",
      "text": "Send a message to the client."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The type of message to send."
    },
    {
      "type": "p",
      "text": "The message to send."
    },
    {
      "type": "h2",
      "text": "Note"
    },
    {
      "type": "p",
      "text": "Sends messages to the client which can be handled in JavaScript with Shiny.addCustomMessageHandler(type, function(message){...}). Once the message handler is added, it will be invoked each time send_custom_message() is called on the server."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"msg\", \"Enter a message\"),\n    ui.input_action_button(\"submit\", \"Submit the message\"),\n    # It'd be better to use ui.insert_ui() in order to implement this kind of\n    # functionality...this is just a basic demo of how custom message handling works.\n    ui.tags.div(id=\"messages\"),\n    ui.tags.script(\n        \"\"\"\n        $(function() {\n            Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n                $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n            });\n        });\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.submit)\n    async def _():\n        await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n\napp = App(app_ui, server, debug=True)\n\n"
    },
    {
      "type": "h1",
      "text": "session.Session.send_input_message"
    },
    {
      "type": "code",
      "text": "session.Session.send_input_message(id, message)"
    },
    {
      "type": "p",
      "text": "Send an input message to the session."
    },
    {
      "type": "p",
      "text": "Sends a message to an input on the session's client web page; if the input is present and bound on the page at the time the message is received, then the input binding object's receiveMessage(el, message) method will be called. This method should generally not be called directly from Shiny apps, but through friendlier wrapper functions like ui.update_text()."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "An id matching the id of an input to update."
    },
    {
      "type": "p",
      "text": "The message to send."
    },
    {
      "type": "h1",
      "text": "session.Session.on_flush"
    },
    {
      "type": "code",
      "text": "session.Session.on_flush(fn, once=True)"
    },
    {
      "type": "p",
      "text": "Register a function to call before the next reactive flush."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The function to call."
    },
    {
      "type": "p",
      "text": "Whether to call the function only once or on every flush."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A function that can be used to cancel the registration."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flush(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "h1",
      "text": "session.Session.on_flushed"
    },
    {
      "type": "code",
      "text": "session.Session.on_flushed(fn, once=True)"
    },
    {
      "type": "p",
      "text": "Register a function to call after the next reactive flush."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The function to call."
    },
    {
      "type": "p",
      "text": "Whether to call the function only once or on every flush."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A function that can be used to cancel the registration."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flushed(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "h1",
      "text": "session.Session.on_ended"
    },
    {
      "type": "code",
      "text": "session.Session.on_ended(fn)"
    },
    {
      "type": "p",
      "text": "Registers a function to be called after the client has disconnected."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The function to call."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A function that can be used to cancel the registration."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "h1",
      "text": "session.Session.dynamic_route"
    },
    {
      "type": "code",
      "text": "session.Session.dynamic_route(name, handler)"
    },
    {
      "type": "p",
      "text": "Register a function to call when a dynamically generated, session-specific, route is requested."
    },
    {
      "type": "p",
      "text": "Provides a convenient way to serve-up session-dependent values for other clients/applications to consume."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A name for the route (used to determine part of the URL path)."
    },
    {
      "type": "p",
      "text": "The function to call when a request is made to the route. This function should take a single argument (a starlette.requests.Request object) and return a starlette.types.ASGIApp object."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The URL path for the route."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"serve\", \"Click to serve\"), ui.div(id=\"messages\")\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.serve)\n    def _():\n        async def my_handler(request: Request) -> JSONResponse:\n            return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n        path = session.dynamic_route(\"my_handler\", my_handler)\n\n        print(\"Serving at: \", path)\n\n        ui.insert_ui(\n            ui.tags.script(\n                f\"\"\"\n                fetch('{path}')\n                  .then(r => r.json())\n                  .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n                \"\"\"\n            ),\n            selector=\"body\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "h1",
      "text": "session.Session.close"
    },
    {
      "type": "code",
      "text": "session.Session.close(code=1001)"
    },
    {
      "type": "p",
      "text": "Close the session."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n    ui.p(\n        \"\"\"If this example is running on the browser (i.e., via shinylive),\n        closing the session will log a message to the JavaScript console\n        (open the browser's developer tools to see it).\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n"
    },
    {
      "type": "h1",
      "text": "input_handler.input_handlers"
    },
    {
      "type": "p",
      "text": "input_handler.input_handlers"
    },
    {
      "type": "p",
      "text": "Manage Shiny input handlers."
    },
    {
      "type": "p",
      "text": "Add and/or remove input handlers of a given type. Shiny uses these handlers to pre-process input values from the client (after being deserialized) before passing them to the input argument of an App's server function."
    },
    {
      "type": "p",
      "text": "The type is based on the getType() JavaScript method on the relevant Shiny input binding. See this article <https://shiny.posit.co/articles/js-custom-input.html>_ for more information on how to create custom input bindings. (The article is about Shiny for R, but the JavaScript and general principles are the same.)"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "p",
      "text": "add(type: str, force: bool = False) -> Callable[[InputHandlerType], None] Register an input handler. This method returns a decorator that registers the decorated function as the handler for the given type. This handler should accept three arguments: - the input value - the input name - the Session object remove(type: str) Unregister an input handler."
    },
    {
      "type": "h2",
      "text": "Note"
    },
    {
      "type": "p",
      "text": "add() ing an input handler will make it persist for the duration of the Python process (unless Shiny is explicitly reloaded). For that reason, verbose naming is encouraged to minimize the risk of colliding with other Shiny input binding(s) which happen to use the same type (if the binding is bundled with a package, we recommend the format of \"packageName.widgetName\")."
    },
    {
      "type": "h2",
      "text": "Example"
    },
    {
      "type": "code",
      "text": "from shiny.input_handler import input_handlers\n@input_handlers.add(\"mypackage.intify\")\ndef _(value, name, session):\n    return int(value)"
    },
    {
      "type": "p",
      "text": "On the Javascript side, the associated input binding must have a corresponding getType method:"
    },
    {
      "type": "code",
      "text": "getType: function(el) {\n    return \"mypackage.intify\";\n}"
    }
  ],
  "code_examples": [
    "session.get_current_session()",
    "session.get_current_session()",
    "session.require_active_session(session)",
    "session.require_active_session(session)",
    "session.session_context(session)",
    "session.session_context(session)",
    "reactive.get_current_context()",
    "reactive.get_current_context()",
    "session.ClientData(self, session)",
    "session.ClientData(self, session)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport textwrap\n\n# pyright: reportUnknownMemberType=false, reportUnknownVariableType=false\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"obs\", \"Number of observations:\", min=0, max=1000, value=500),\n        open=\"closed\",\n    ),\n    ui.markdown(\n        \"\"\"\n#### `session.clientdata` values\n\nThe following methods are available from the `session.clientdata` object and allow you\nto reactively read the client data values from the browser.\n\"\"\"\n    ),\n    ui.output_text_verbatim(\"clientdatatext\"),\n    ui.output_plot(\"myplot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n    @render.code\n    def clientdatatext():\n        return textwrap.dedent(\n            f\"\"\"\n        .url_hash()         -> {session.clientdata.url_hash()}\n        .url_hash_initial() -> {session.clientdata.url_hash_initial()}\n        .url_hostname()     -> {session.clientdata.url_hostname()}\n        .url_pathname()     -> {session.clientdata.url_pathname()}\n        .url_port()         -> {session.clientdata.url_port()}\n        .url_protocol()     -> {session.clientdata.url_protocol()}\n        .url_search()       -> {session.clientdata.url_search()}\n        .pixelratio()       -> {session.clientdata.pixelratio()}\n\n        .output_height(\"myplot\")       -> {session.clientdata.output_height(\"myplot\")}\n        .output_width(\"myplot\")        -> {session.clientdata.output_width(\"myplot\")}\n        .output_hidden(\"myplot\")       -> {session.clientdata.output_hidden(\"myplot\")}\n        .output_bg_color(\"myplot\")     -> {session.clientdata.output_bg_color(\"myplot\")}\n        .output_fg_color(\"myplot\")     -> {session.clientdata.output_fg_color(\"myplot\")}\n        .output_accent_color(\"myplot\") -> {session.clientdata.output_accent_color(\"myplot\")}\n        .output_font(\"myplot\")         -> {session.clientdata.output_font(\"myplot\")}\n\n        \"\"\"\n        )\n\n    @render.plot\n    def myplot():\n        plt.figure()\n        plt.hist(np.random.normal(size=input.obs()))  # type: ignore\n        plt.title(\"This is myplot\")\n\n\napp = App(app_ui, server)\n\n",
    "session.ClientData.output_accent_color(id)",
    "session.ClientData.output_accent_color(id)",
    "session.ClientData.output_bg_color(id)",
    "session.ClientData.output_bg_color(id)",
    "session.ClientData.output_fg_color(id)",
    "session.ClientData.output_fg_color(id)",
    "session.ClientData.output_font(id)",
    "session.ClientData.output_font(id)",
    "session.ClientData.output_height(id)",
    "session.ClientData.output_height(id)",
    "session.ClientData.output_hidden(id)",
    "session.ClientData.output_hidden(id)",
    "session.ClientData.output_width(id)",
    "session.ClientData.output_width(id)",
    "session.ClientData.pixelratio()",
    "session.ClientData.pixelratio()",
    "session.ClientData.url_hash()",
    "session.ClientData.url_hash()",
    "session.ClientData.url_hash_initial()",
    "session.ClientData.url_hash_initial()",
    "session.ClientData.url_hostname()",
    "session.ClientData.url_hostname()",
    "session.ClientData.url_pathname()",
    "session.ClientData.url_pathname()",
    "session.ClientData.url_port()",
    "session.ClientData.url_port()",
    "session.ClientData.url_protocol()",
    "session.ClientData.url_protocol()",
    "session.ClientData.url_search()",
    "session.ClientData.url_search()",
    "session.Session.send_custom_message(type, message)",
    "session.Session.send_custom_message(type, message)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"msg\", \"Enter a message\"),\n    ui.input_action_button(\"submit\", \"Submit the message\"),\n    # It'd be better to use ui.insert_ui() in order to implement this kind of\n    # functionality...this is just a basic demo of how custom message handling works.\n    ui.tags.div(id=\"messages\"),\n    ui.tags.script(\n        \"\"\"\n        $(function() {\n            Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n                $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n            });\n        });\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.submit)\n    async def _():\n        await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n\napp = App(app_ui, server, debug=True)\n\n",
    "session.Session.send_input_message(id, message)",
    "session.Session.send_input_message(id, message)",
    "session.Session.on_flush(fn, once=True)",
    "session.Session.on_flush(fn, once=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flush(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n",
    "session.Session.on_flushed(fn, once=True)",
    "session.Session.on_flushed(fn, once=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flushed(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n",
    "session.Session.on_ended(fn)",
    "session.Session.on_ended(fn)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n",
    "session.Session.dynamic_route(name, handler)",
    "session.Session.dynamic_route(name, handler)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"serve\", \"Click to serve\"), ui.div(id=\"messages\")\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.serve)\n    def _():\n        async def my_handler(request: Request) -> JSONResponse:\n            return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n        path = session.dynamic_route(\"my_handler\", my_handler)\n\n        print(\"Serving at: \", path)\n\n        ui.insert_ui(\n            ui.tags.script(\n                f\"\"\"\n                fetch('{path}')\n                  .then(r => r.json())\n                  .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n                \"\"\"\n            ),\n            selector=\"body\",\n        )\n\n\napp = App(app_ui, server)\n\n",
    "session.Session.close(code=1001)",
    "session.Session.close(code=1001)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n    ui.p(\n        \"\"\"If this example is running on the browser (i.e., via shinylive),\n        closing the session will log a message to the JavaScript console\n        (open the browser's developer tools to see it).\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n",
    "from shiny.input_handler import input_handlers\n@input_handlers.add(\"mypackage.intify\")\ndef _(value, name, session):\n    return int(value)",
    "from shiny.input_handler import input_handlers\n@input_handlers.add(\"mypackage.intify\")\ndef _(value, name, session):\n    return int(value)",
    "getType: function(el) {\n    return \"mypackage.intify\";\n}",
    "getType: function(el) {\n    return \"mypackage.intify\";\n}"
  ],
  "toc": [
    {
      "title": "session.get_current_session",
      "url": "api/core/#shiny.session.get_current_session"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns"
    },
    {
      "title": "Note",
      "url": "api/core/#note"
    },
    {
      "title": "See Also",
      "url": "api/core/#see-also"
    },
    {
      "title": "session.require_active_session",
      "url": "api/core/#shiny.session.require_active_session"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns-1"
    },
    {
      "title": "Note",
      "url": "api/core/#note-1"
    },
    {
      "title": "Raises",
      "url": "api/core/#raises"
    },
    {
      "title": "See Also",
      "url": "api/core/#see-also-1"
    },
    {
      "title": "session.session_context",
      "url": "api/core/#shiny.session.session_context"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-1"
    },
    {
      "title": "reactive.get_current_context",
      "url": "api/core/#shiny.reactive.get_current_context"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns-2"
    },
    {
      "title": "Raises",
      "url": "api/core/#raises-1"
    },
    {
      "title": "session.ClientData",
      "url": "api/core/#shiny.session.ClientData"
    },
    {
      "title": "Raises",
      "url": "api/core/#raises-2"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples"
    },
    {
      "title": "Methods",
      "url": "api/core/#methods"
    },
    {
      "title": "output_accent_color",
      "url": "api/core/#shiny.session.ClientData.output_accent_color"
    },
    {
      "title": "output_bg_color",
      "url": "api/core/#shiny.session.ClientData.output_bg_color"
    },
    {
      "title": "output_fg_color",
      "url": "api/core/#shiny.session.ClientData.output_fg_color"
    },
    {
      "title": "output_font",
      "url": "api/core/#shiny.session.ClientData.output_font"
    },
    {
      "title": "output_height",
      "url": "api/core/#shiny.session.ClientData.output_height"
    },
    {
      "title": "output_hidden",
      "url": "api/core/#shiny.session.ClientData.output_hidden"
    },
    {
      "title": "output_width",
      "url": "api/core/#shiny.session.ClientData.output_width"
    },
    {
      "title": "pixelratio",
      "url": "api/core/#shiny.session.ClientData.pixelratio"
    },
    {
      "title": "url_hash",
      "url": "api/core/#shiny.session.ClientData.url_hash"
    },
    {
      "title": "url_hash_initial",
      "url": "api/core/#shiny.session.ClientData.url_hash_initial"
    },
    {
      "title": "url_hostname",
      "url": "api/core/#shiny.session.ClientData.url_hostname"
    },
    {
      "title": "url_pathname",
      "url": "api/core/#shiny.session.ClientData.url_pathname"
    },
    {
      "title": "url_port",
      "url": "api/core/#shiny.session.ClientData.url_port"
    },
    {
      "title": "url_protocol",
      "url": "api/core/#shiny.session.ClientData.url_protocol"
    },
    {
      "title": "url_search",
      "url": "api/core/#shiny.session.ClientData.url_search"
    },
    {
      "title": "session.Session.send_custom_message",
      "url": "api/core/#shiny.session.Session.send_custom_message"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-9"
    },
    {
      "title": "Note",
      "url": "api/core/#note-2"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples-1"
    },
    {
      "title": "session.Session.send_input_message",
      "url": "api/core/#shiny.session.Session.send_input_message"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-10"
    },
    {
      "title": "session.Session.on_flush",
      "url": "api/core/#shiny.session.Session.on_flush"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-11"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns-10"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples-2"
    },
    {
      "title": "session.Session.on_flushed",
      "url": "api/core/#shiny.session.Session.on_flushed"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-12"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns-11"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples-3"
    },
    {
      "title": "session.Session.on_ended",
      "url": "api/core/#shiny.session.Session.on_ended"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-13"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns-12"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples-4"
    },
    {
      "title": "session.Session.dynamic_route",
      "url": "api/core/#shiny.session.Session.dynamic_route"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-14"
    },
    {
      "title": "Returns",
      "url": "api/core/#returns-13"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples-5"
    },
    {
      "title": "session.Session.close",
      "url": "api/core/#shiny.session.Session.close"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples-6"
    },
    {
      "title": "input_handler.input_handlers",
      "url": "api/core/#shiny.input_handler.input_handlers"
    },
    {
      "title": "Methods",
      "url": "api/core/#methods-1"
    },
    {
      "title": "Note",
      "url": "api/core/#note-3"
    },
    {
      "title": "Example",
      "url": "api/core/#example"
    },
    {
      "title": "Shiny Core API",
      "url": "api/core/index.html"
    },
    {
      "title": "Page containers"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_navbar",
      "url": "api/core/ui.page_navbar.html"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_fillable",
      "url": "api/core/ui.page_fillable.html"
    },
    {
      "title": "ui.page_fluid",
      "url": "api/core/ui.page_fluid.html"
    },
    {
      "title": "ui.page_fixed",
      "url": "api/core/ui.page_fixed.html"
    },
    {
      "title": "ui.page_bootstrap",
      "url": "api/core/ui.page_bootstrap.html"
    },
    {
      "title": "ui.page_auto",
      "url": "api/core/ui.page_auto.html"
    },
    {
      "title": "ui.page_output",
      "url": "api/core/ui.page_output.html"
    },
    {
      "title": "UI Layouts"
    },
    {
      "title": "ui.sidebar",
      "url": "api/core/ui.sidebar.html"
    },
    {
      "title": "ui.layout_sidebar",
      "url": "api/core/ui.layout_sidebar.html"
    },
    {
      "title": "ui.layout_columns",
      "url": "api/core/ui.layout_columns.html"
    },
    {
      "title": "ui.layout_column_wrap",
      "url": "api/core/ui.layout_column_wrap.html"
    },
    {
      "title": "ui.card",
      "url": "api/core/ui.card.html"
    },
    {
      "title": "ui.card_header",
      "url": "api/core/ui.card_header.html"
    },
    {
      "title": "ui.card_footer",
      "url": "api/core/ui.card_footer.html"
    },
    {
      "title": "ui.popover",
      "url": "api/core/ui.popover.html"
    },
    {
      "title": "ui.tooltip",
      "url": "api/core/ui.tooltip.html"
    },
    {
      "title": "ui.accordion",
      "url": "api/core/ui.accordion.html"
    },
    {
      "title": "ui.accordion_panel",
      "url": "api/core/ui.accordion_panel.html"
    },
    {
      "title": "ui.column",
      "url": "api/core/ui.column.html"
    },
    {
      "title": "ui.row",
      "url": "api/core/ui.row.html"
    },
    {
      "title": "UI Inputs"
    },
    {
      "title": "ui.input_select",
      "url": "api/core/ui.input_select.html"
    },
    {
      "title": "ui.input_selectize",
      "url": "api/core/ui.input_selectize.html"
    },
    {
      "title": "ui.input_slider",
      "url": "api/core/ui.input_slider.html"
    },
    {
      "title": "ui.input_dark_mode",
      "url": "api/core/ui.input_dark_mode.html"
    },
    {
      "title": "ui.input_date",
      "url": "api/core/ui.input_date.html"
    },
    {
      "title": "ui.input_date_range",
      "url": "api/core/ui.input_date_range.html"
    },
    {
      "title": "ui.input_checkbox",
      "url": "api/core/ui.input_checkbox.html"
    },
    {
      "title": "ui.input_checkbox_group",
      "url": "api/core/ui.input_checkbox_group.html"
    },
    {
      "title": "ui.input_switch",
      "url": "api/core/ui.input_switch.html"
    },
    {
      "title": "ui.input_radio_buttons",
      "url": "api/core/ui.input_radio_buttons.html"
    },
    {
      "title": "ui.input_numeric",
      "url": "api/core/ui.input_numeric.html"
    },
    {
      "title": "ui.input_text",
      "url": "api/core/ui.input_text.html"
    },
    {
      "title": "ui.input_text_area",
      "url": "api/core/ui.input_text_area.html"
    },
    {
      "title": "ui.input_password",
      "url": "api/core/ui.input_password.html"
    },
    {
      "title": "ui.input_action_button",
      "url": "api/core/ui.input_action_button.html"
    },
    {
      "title": "ui.input_action_link",
      "url": "api/core/ui.input_action_link.html"
    },
    {
      "title": "ui.input_task_button",
      "url": "api/core/ui.input_task_button.html"
    },
    {
      "title": "Value boxes"
    },
    {
      "title": "ui.value_box",
      "url": "api/core/ui.value_box.html"
    },
    {
      "title": "ui.value_box_theme",
      "url": "api/core/ui.value_box_theme.html"
    },
    {
      "title": "ui.showcase_bottom",
      "url": "api/core/ui.showcase_bottom.html"
    },
    {
      "title": "ui.showcase_left_center",
      "url": "api/core/ui.showcase_left_center.html"
    },
    {
      "title": "ui.showcase_top_right",
      "url": "api/core/ui.showcase_top_right.html"
    },
    {
      "title": "Navigation (tab) panels"
    },
    {
      "title": "ui.nav_panel",
      "url": "api/core/ui.nav_panel.html"
    },
    {
      "title": "ui.nav_spacer",
      "url": "api/core/ui.nav_spacer.html"
    },
    {
      "title": "ui.nav_menu",
      "url": "api/core/ui.nav_menu.html"
    },
    {
      "title": "ui.nav_control",
      "url": "api/core/ui.nav_control.html"
    },
    {
      "title": "ui.navset_bar",
      "url": "api/core/ui.navset_bar.html"
    },
    {
      "title": "ui.navset_tab",
      "url": "api/core/ui.navset_tab.html"
    },
    {
      "title": "ui.navset_pill",
      "url": "api/core/ui.navset_pill.html"
    },
    {
      "title": "ui.navset_underline",
      "url": "api/core/ui.navset_underline.html"
    },
    {
      "title": "ui.navset_card_tab",
      "url": "api/core/ui.navset_card_tab.html"
    },
    {
      "title": "ui.navset_card_pill",
      "url": "api/core/ui.navset_card_pill.html"
    },
    {
      "title": "ui.navset_card_underline",
      "url": "api/core/ui.navset_card_underline.html"
    },
    {
      "title": "ui.navset_pill_list",
      "url": "api/core/ui.navset_pill_list.html"
    },
    {
      "title": "ui.navset_hidden",
      "url": "api/core/ui.navset_hidden.html"
    },
    {
      "title": "ui.navbar_options",
      "url": "api/core/ui.navbar_options.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "ui.panel_absolute",
      "url": "api/core/ui.panel_absolute.html"
    },
    {
      "title": "ui.panel_fixed",
      "url": "api/core/ui.panel_fixed.html"
    },
    {
      "title": "ui.panel_conditional",
      "url": "api/core/ui.panel_conditional.html"
    },
    {
      "title": "ui.panel_title",
      "url": "api/core/ui.panel_title.html"
    },
    {
      "title": "ui.panel_well",
      "url": "api/core/ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "ui.input_file",
      "url": "api/core/ui.input_file.html"
    },
    {
      "title": "ui.download_button",
      "url": "api/core/ui.download_button.html"
    },
    {
      "title": "ui.download_link",
      "url": "api/core/ui.download_link.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "ui.Chat",
      "url": "api/core/ui.Chat.html"
    },
    {
      "title": "ui.chat_ui",
      "url": "api/core/ui.chat_ui.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "ui.MarkdownStream",
      "url": "api/core/ui.MarkdownStream.html"
    },
    {
      "title": "ui.output_markdown_stream",
      "url": "api/core/ui.output_markdown_stream.html"
    },
    {
      "title": "Custom UI"
    },
    {
      "title": "ui.Theme",
      "url": "api/core/ui.Theme.html"
    },
    {
      "title": "ui.HTML",
      "url": "api/core/ui.HTML.html"
    },
    {
      "title": "ui.TagList",
      "url": "api/core/ui.TagList.html"
    },
    {
      "title": "ui.tags",
      "url": "api/core/ui.tags.html"
    },
    {
      "title": "ui.markdown",
      "url": "api/core/ui.markdown.html"
    },
    {
      "title": "ui.include_css",
      "url": "api/core/ui.include_css.html"
    },
    {
      "title": "ui.include_js",
      "url": "api/core/ui.include_js.html"
    },
    {
      "title": "ui.insert_ui",
      "url": "api/core/ui.insert_ui.html"
    },
    {
      "title": "ui.remove_ui",
      "url": "api/core/ui.remove_ui.html"
    },
    {
      "title": "ui.busy_indicators.use",
      "url": "api/core/ui.busy_indicators.use.html"
    },
    {
      "title": "ui.busy_indicators.options",
      "url": "api/core/ui.busy_indicators.options.html"
    },
    {
      "title": "ui.fill.as_fillable_container",
      "url": "api/core/ui.fill.as_fillable_container.html"
    },
    {
      "title": "ui.fill.as_fill_item",
      "url": "api/core/ui.fill.as_fill_item.html"
    },
    {
      "title": "ui.fill.remove_all_fill",
      "url": "api/core/ui.fill.remove_all_fill.html"
    },
    {
      "title": "ui.css.as_css_unit",
      "url": "api/core/ui.css.as_css_unit.html"
    },
    {
      "title": "ui.css.as_css_padding",
      "url": "api/core/ui.css.as_css_padding.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "ui.update_select",
      "url": "api/core/ui.update_select.html"
    },
    {
      "title": "ui.update_selectize",
      "url": "api/core/ui.update_selectize.html"
    },
    {
      "title": "ui.update_slider",
      "url": "api/core/ui.update_slider.html"
    },
    {
      "title": "ui.update_dark_mode",
      "url": "api/core/ui.update_dark_mode.html"
    },
    {
      "title": "ui.update_date",
      "url": "api/core/ui.update_date.html"
    },
    {
      "title": "ui.update_date_range",
      "url": "api/core/ui.update_date_range.html"
    },
    {
      "title": "ui.update_checkbox",
      "url": "api/core/ui.update_checkbox.html"
    },
    {
      "title": "ui.update_checkbox_group",
      "url": "api/core/ui.update_checkbox_group.html"
    },
    {
      "title": "ui.update_switch",
      "url": "api/core/ui.update_switch.html"
    },
    {
      "title": "ui.update_radio_buttons",
      "url": "api/core/ui.update_radio_buttons.html"
    },
    {
      "title": "ui.update_numeric",
      "url": "api/core/ui.update_numeric.html"
    },
    {
      "title": "ui.update_text",
      "url": "api/core/ui.update_text.html"
    },
    {
      "title": "ui.update_text_area",
      "url": "api/core/ui.update_text_area.html"
    },
    {
      "title": "ui.update_navs",
      "url": "api/core/ui.update_navs.html"
    },
    {
      "title": "ui.update_action_button",
      "url": "api/core/ui.update_action_button.html"
    },
    {
      "title": "ui.update_action_link",
      "url": "api/core/ui.update_action_link.html"
    },
    {
      "title": "ui.update_task_button",
      "url": "api/core/ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "ui.update_sidebar",
      "url": "api/core/ui.update_sidebar.html"
    },
    {
      "title": "ui.update_tooltip",
      "url": "api/core/ui.update_tooltip.html"
    },
    {
      "title": "ui.update_popover",
      "url": "api/core/ui.update_popover.html"
    },
    {
      "title": "ui.update_accordion",
      "url": "api/core/ui.update_accordion.html"
    },
    {
      "title": "ui.update_accordion_panel",
      "url": "api/core/ui.update_accordion_panel.html"
    },
    {
      "title": "ui.insert_accordion_panel",
      "url": "api/core/ui.insert_accordion_panel.html"
    },
    {
      "title": "ui.remove_accordion_panel",
      "url": "api/core/ui.remove_accordion_panel.html"
    },
    {
      "title": "Rendering outputs"
    },
    {
      "title": "ui.output_plot",
      "url": "api/core/ui.output_plot.html"
    },
    {
      "title": "ui.output_image",
      "url": "api/core/ui.output_image.html"
    },
    {
      "title": "ui.output_table",
      "url": "api/core/ui.output_table.html"
    },
    {
      "title": "ui.output_data_frame",
      "url": "api/core/ui.output_data_frame.html"
    },
    {
      "title": "ui.output_text",
      "url": "api/core/ui.output_text.html"
    },
    {
      "title": "ui.output_code",
      "url": "api/core/ui.output_code.html"
    },
    {
      "title": "ui.output_text_verbatim",
      "url": "api/core/ui.output_text_verbatim.html"
    },
    {
      "title": "ui.output_ui",
      "url": "api/core/ui.output_ui.html"
    },
    {
      "title": "render.plot",
      "url": "api/core/render.plot.html"
    },
    {
      "title": "render.image",
      "url": "api/core/render.image.html"
    },
    {
      "title": "render.table",
      "url": "api/core/render.table.html"
    },
    {
      "title": "render.text",
      "url": "api/core/render.text.html"
    },
    {
      "title": "render.code",
      "url": "api/core/render.code.html"
    },
    {
      "title": "render.ui",
      "url": "api/core/render.ui.html"
    },
    {
      "title": "render.express",
      "url": "api/core/render.express.html"
    },
    {
      "title": "render.download",
      "url": "api/core/render.download.html"
    },
    {
      "title": "render.data_frame",
      "url": "api/core/render.data_frame.html"
    },
    {
      "title": "render.DataGrid",
      "url": "api/core/render.DataGrid.html"
    },
    {
      "title": "render.DataTable",
      "url": "api/core/render.DataTable.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/core/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/core/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/core/reactive.value.html"
    },
    {
      "title": "reactive.Calc",
      "url": "api/core/reactive.Calc.html"
    },
    {
      "title": "reactive.Effect",
      "url": "api/core/reactive.Effect.html"
    },
    {
      "title": "reactive.Value",
      "url": "api/core/reactive.Value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/core/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/core/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/core/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/core/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/core/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/core/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/core/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/core/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/core/req.html"
    },
    {
      "title": "Create and run applications"
    },
    {
      "title": "run_app",
      "url": "api/core/run_app.html"
    },
    {
      "title": "App",
      "url": "api/core/App.html"
    },
    {
      "title": "Inputs",
      "url": "api/core/Inputs.html"
    },
    {
      "title": "Outputs",
      "url": "api/core/Outputs.html"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "ui.help_text",
      "url": "api/core/ui.help_text.html"
    },
    {
      "title": "ui.notification_show",
      "url": "api/core/ui.notification_show.html"
    },
    {
      "title": "ui.notification_remove",
      "url": "api/core/ui.notification_remove.html"
    },
    {
      "title": "ui.modal",
      "url": "api/core/ui.modal.html"
    },
    {
      "title": "ui.modal_show",
      "url": "api/core/ui.modal_show.html"
    },
    {
      "title": "ui.modal_remove",
      "url": "api/core/ui.modal_remove.html"
    },
    {
      "title": "ui.modal_button",
      "url": "api/core/ui.modal_button.html"
    },
    {
      "title": "ui.Progress",
      "url": "api/core/ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "module.ui",
      "url": "api/core/module.ui.html"
    },
    {
      "title": "module.server",
      "url": "api/core/module.server.html"
    },
    {
      "title": "Developer facing tools"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Create output renderers",
      "url": "api/core/Renderer.html"
    },
    {
      "title": "htmltools methods",
      "url": "api/core/Htmltools.html"
    },
    {
      "title": "ExtendedTask",
      "url": "api/core/ExtendedTask.html"
    },
    {
      "title": "Types"
    },
    {
      "title": "Miscellaneous types",
      "url": "api/core/MiscTypes.html"
    },
    {
      "title": "Tag types",
      "url": "api/core/TagTypes.html"
    },
    {
      "title": "Exception types",
      "url": "api/core/ExceptionTypes.html"
    },
    {
      "title": "Deprecated"
    },
    {
      "title": "render.transformer.output_transformer",
      "url": "api/core/render.transformer.output_transformer.html"
    },
    {
      "title": "render.transformer.resolve_value_fn",
      "url": "api/core/render.transformer.resolve_value_fn.html"
    },
    {
      "title": "Experimental"
    },
    {
      "title": "Card",
      "url": "api/core/ExCard.html"
    }
  ]
}