{
  "metadata": {
    "title": "tagtypes – Shiny for Python",
    "description": "",
    "url": "api/core/TagTypes.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Types",
        "Tag types"
      ]
    },
    {
      "type": "h1",
      "text": "Tag types"
    },
    {
      "type": "h1",
      "text": "htmltools.Tag"
    },
    {
      "type": "code",
      "text": "Tag(self, _name, *args, _add_ws=True, **kwargs)"
    },
    {
      "type": "p",
      "text": "The HTML tag class."
    },
    {
      "type": "p",
      "text": "A Tag object consists of a name, attributes, and children. The name is a string, the attributes are held in a TagAttrDict object, and the children are held in a TagList object."
    },
    {
      "type": "p",
      "text": "This class usually should not be instantiated directly. Instead, use the tag wrapper functions in htmltools.tags, like div() or a()."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The tag’s name."
    },
    {
      "type": "p",
      "text": "Children for the tag."
    },
    {
      "type": "p",
      "text": "A bool indicating whether to add whitespace surrounding the tag (see Note for details)."
    },
    {
      "type": "p",
      "text": "Attributes for the tag."
    },
    {
      "type": "h2",
      "text": "Attributes"
    },
    {
      "type": "p",
      "text": "The tag’s name."
    },
    {
      "type": "p",
      "text": "The tag’s attributes."
    },
    {
      "type": "p",
      "text": "The tag’s children."
    },
    {
      "type": "h2",
      "text": "Note"
    },
    {
      "type": "p",
      "text": "The _add_ws parameter controls whether whitespace is added around the tag. Inline tags (like span() and a()) default to False and block tags (like div() and p()) default to True."
    },
    {
      "type": "p",
      "text": "When a tag with _add_ws=True is rendered to HTML, whitespace (including indentation) is added before the opening tag (like <div>), after the closing tag (like </div>), and also between the opening tag and its first child. This usually results in formatting that is easier to read."
    },
    {
      "type": "p",
      "text": "The only times that whitespace is not added around tags is when two sibling tags have _add_ws=False, or when a tag and its first child both have _add_ws=False. Bare strings are treated as children with _add_ws=False."
    },
    {
      "type": "p",
      "text": "If you need fine control over whitespace in the output HTML, you can create tags with _add_ws=False and manually add whitespace, like div(\"\\n\", span(\"a\"), _add_ws=False)."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": ">>> from htmltools import div\n>>> x = div(\"hello\", id=\"foo\", class_=\"bar\")\n>>> x\n<div id=\"foo\" class=\"bar\">hello</div>\n>>> x.show()"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "add_class"
    },
    {
      "type": "code",
      "text": "Tag.add_class(class_, *, prepend=False)"
    },
    {
      "type": "p",
      "text": "Add a class value to the HTML class attribute."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The class name to add."
    },
    {
      "type": "p",
      "text": "Bool that determines if the class is added to the beginning or end of the class attribute."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The modified tag."
    },
    {
      "type": "h3",
      "text": "add_style"
    },
    {
      "type": "code",
      "text": "Tag.add_style(style, *, prepend=False)"
    },
    {
      "type": "p",
      "text": "Add a style value(s) to the HTML style attribute."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "CSS properties and values already properly formatted. Each should already contain trailing semicolons."
    },
    {
      "type": "p",
      "text": "Bool that determines if the style is added to the beginning or end of the style attribute."
    },
    {
      "type": "h4",
      "text": "See Also"
    },
    {
      "type": "p",
      "text": "css"
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The modified tag."
    },
    {
      "type": "h3",
      "text": "append"
    },
    {
      "type": "code",
      "text": "Tag.append(*args)"
    },
    {
      "type": "p",
      "text": "Append tag children to the end of the list."
    },
    {
      "type": "h3",
      "text": "extend"
    },
    {
      "type": "code",
      "text": "Tag.extend(x)"
    },
    {
      "type": "p",
      "text": "Extend the children by appending an iterable of children."
    },
    {
      "type": "h3",
      "text": "get_dependencies"
    },
    {
      "type": "code",
      "text": "Tag.get_dependencies(dedup=True)"
    },
    {
      "type": "p",
      "text": "Get any HTML dependencies."
    },
    {
      "type": "h3",
      "text": "get_html_string"
    },
    {
      "type": "code",
      "text": "Tag.get_html_string(indent=0, eol='\\n')"
    },
    {
      "type": "p",
      "text": "Get the HTML string representation of the tag."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The number of spaces to indent the tag."
    },
    {
      "type": "p",
      "text": "The end-of-line character(s)."
    },
    {
      "type": "h3",
      "text": "has_class"
    },
    {
      "type": "code",
      "text": "Tag.has_class(class_)"
    },
    {
      "type": "p",
      "text": "Check if the tag has a particular class value."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The class name to check for."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "True if the tag has the class, False otherwise."
    },
    {
      "type": "h3",
      "text": "insert"
    },
    {
      "type": "code",
      "text": "Tag.insert(index, x)"
    },
    {
      "type": "p",
      "text": "Insert tag children before a given index."
    },
    {
      "type": "h3",
      "text": "remove_class"
    },
    {
      "type": "code",
      "text": "Tag.remove_class(class_)"
    },
    {
      "type": "p",
      "text": "Remove a class value from the HTML class attribute."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The class name to remove."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The modified tag."
    },
    {
      "type": "h3",
      "text": "render"
    },
    {
      "type": "code",
      "text": "Tag.render()"
    },
    {
      "type": "p",
      "text": "Get string representation as well as its HTML dependencies."
    },
    {
      "type": "h3",
      "text": "save_html"
    },
    {
      "type": "code",
      "text": "Tag.save_html(file, *, libdir='lib', include_version=True)"
    },
    {
      "type": "p",
      "text": "Save to a HTML file."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The file to save to."
    },
    {
      "type": "p",
      "text": "The directory to save the dependencies to."
    },
    {
      "type": "p",
      "text": "Whether to include the version number in the dependency folder name."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "h3",
      "text": "show"
    },
    {
      "type": "code",
      "text": "Tag.show(renderer='auto')"
    },
    {
      "type": "p",
      "text": "Preview as a complete HTML document."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The renderer to use."
    },
    {
      "type": "h3",
      "text": "tagify"
    },
    {
      "type": "code",
      "text": "Tag.tagify()"
    },
    {
      "type": "p",
      "text": "Convert any tagifiable children to Tag/TagList objects."
    },
    {
      "type": "h1",
      "text": "htmltools.TagAttrs"
    },
    {
      "type": "p",
      "text": "TagAttrs"
    },
    {
      "type": "p",
      "text": "For dictionaries of tag attributes (e.g., {\"id\": \"foo\"}), which can be passed as unnamed arguments to Tag functions like div()."
    },
    {
      "type": "h1",
      "text": "htmltools.TagAttrValue"
    },
    {
      "type": "p",
      "text": "TagAttrValue"
    },
    {
      "type": "p",
      "text": "Types that can be passed in as attributes to Tag functions. These values will be converted to strings before being stored as tag attributes."
    },
    {
      "type": "h1",
      "text": "htmltools.TagChild"
    },
    {
      "type": "p",
      "text": "TagChild"
    },
    {
      "type": "p",
      "text": "Types of objects that can be passed as children to Tag functions like div(). The Tag functions and the TagList() constructor can accept these as unnamed arguments; they will be flattened and normalized to TagNode objects."
    },
    {
      "type": "h1",
      "text": "htmltools.TagList"
    },
    {
      "type": "code",
      "text": "TagList(self, *args)"
    },
    {
      "type": "p",
      "text": "Create an HTML tag list (i.e., a fragment of HTML)"
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The tag children to add to the list."
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>"
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "append"
    },
    {
      "type": "code",
      "text": "TagList.append(item, *args)"
    },
    {
      "type": "p",
      "text": "Append tag children to the end of the list."
    },
    {
      "type": "h3",
      "text": "extend"
    },
    {
      "type": "code",
      "text": "TagList.extend(other)"
    },
    {
      "type": "p",
      "text": "Extend the children by appending an iterable of children."
    },
    {
      "type": "h3",
      "text": "get_dependencies"
    },
    {
      "type": "code",
      "text": "TagList.get_dependencies(dedup=True)"
    },
    {
      "type": "p",
      "text": "Get any dependencies needed to render the HTML."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "Whether to deduplicate the dependencies."
    },
    {
      "type": "h3",
      "text": "get_html_string"
    },
    {
      "type": "code",
      "text": "TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)"
    },
    {
      "type": "p",
      "text": "Return the HTML string for this tag list."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "Number of spaces to indent each line of the HTML."
    },
    {
      "type": "p",
      "text": "End-of-line character(s)."
    },
    {
      "type": "p",
      "text": "Whether to add whitespace between the opening tag and the first child. If either this is True, or the child’s add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added."
    },
    {
      "type": "h3",
      "text": "insert"
    },
    {
      "type": "code",
      "text": "TagList.insert(i, item)"
    },
    {
      "type": "p",
      "text": "Insert tag children before a given index."
    },
    {
      "type": "h3",
      "text": "render"
    },
    {
      "type": "code",
      "text": "TagList.render()"
    },
    {
      "type": "p",
      "text": "Get string representation as well as its HTML dependencies."
    },
    {
      "type": "h3",
      "text": "save_html"
    },
    {
      "type": "code",
      "text": "TagList.save_html(file, *, libdir='lib', include_version=True)"
    },
    {
      "type": "p",
      "text": "Save to a HTML file."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The file to save to."
    },
    {
      "type": "p",
      "text": "The directory to save the dependencies to."
    },
    {
      "type": "p",
      "text": "Whether to include the version number in the dependency folder name."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The path to the generated HTML file."
    },
    {
      "type": "h3",
      "text": "show"
    },
    {
      "type": "code",
      "text": "TagList.show(renderer='auto')"
    },
    {
      "type": "p",
      "text": "Preview as a complete HTML document."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The renderer to use."
    },
    {
      "type": "h3",
      "text": "tagify"
    },
    {
      "type": "code",
      "text": "TagList.tagify()"
    },
    {
      "type": "p",
      "text": "Convert any tagifiable children to Tag/TagList objects."
    },
    {
      "type": "h1",
      "text": "htmltools.TagFunction"
    },
    {
      "type": "code",
      "text": "TagFunction()"
    },
    {
      "type": "h1",
      "text": "htmltools.Tagifiable"
    },
    {
      "type": "code",
      "text": "Tagifiable()"
    },
    {
      "type": "p",
      "text": "Objects with tagify() methods are considered Tagifiable. Note that an object returns a TagList, the children of the TagList must also be tagified."
    },
    {
      "type": "h1",
      "text": "htmltools.MetadataNode"
    },
    {
      "type": "code",
      "text": "MetadataNode()"
    }
  ],
  "code_examples": [
    "Tag(self, _name, *args, _add_ws=True, **kwargs)",
    "Tag(self, _name, *args, _add_ws=True, **kwargs)",
    ">>> from htmltools import div\n>>> x = div(\"hello\", id=\"foo\", class_=\"bar\")\n>>> x\n<div id=\"foo\" class=\"bar\">hello</div>\n>>> x.show()",
    ">>> from htmltools import div\n>>> x = div(\"hello\", id=\"foo\", class_=\"bar\")\n>>> x\n<div id=\"foo\" class=\"bar\">hello</div>\n>>> x.show()",
    "Tag.add_class(class_, *, prepend=False)",
    "Tag.add_class(class_, *, prepend=False)",
    "Tag.add_style(style, *, prepend=False)",
    "Tag.add_style(style, *, prepend=False)",
    "Tag.append(*args)",
    "Tag.append(*args)",
    "Tag.extend(x)",
    "Tag.extend(x)",
    "Tag.get_dependencies(dedup=True)",
    "Tag.get_dependencies(dedup=True)",
    "Tag.get_html_string(indent=0, eol='\\n')",
    "Tag.get_html_string(indent=0, eol='\\n')",
    "Tag.has_class(class_)",
    "Tag.has_class(class_)",
    "Tag.insert(index, x)",
    "Tag.insert(index, x)",
    "Tag.remove_class(class_)",
    "Tag.remove_class(class_)",
    "Tag.render()",
    "Tag.render()",
    "Tag.save_html(file, *, libdir='lib', include_version=True)",
    "Tag.save_html(file, *, libdir='lib', include_version=True)",
    "Tag.show(renderer='auto')",
    "Tag.show(renderer='auto')",
    "Tag.tagify()",
    "Tag.tagify()",
    "TagList(self, *args)",
    "TagList(self, *args)",
    ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
    ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
    "TagList.append(item, *args)",
    "TagList.append(item, *args)",
    "TagList.extend(other)",
    "TagList.extend(other)",
    "TagList.get_dependencies(dedup=True)",
    "TagList.get_dependencies(dedup=True)",
    "TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
    "TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
    "TagList.insert(i, item)",
    "TagList.insert(i, item)",
    "TagList.render()",
    "TagList.render()",
    "TagList.save_html(file, *, libdir='lib', include_version=True)",
    "TagList.save_html(file, *, libdir='lib', include_version=True)",
    "TagList.show(renderer='auto')",
    "TagList.show(renderer='auto')",
    "TagList.tagify()",
    "TagList.tagify()",
    "TagFunction()",
    "TagFunction()",
    "Tagifiable()",
    "Tagifiable()",
    "MetadataNode()",
    "MetadataNode()"
  ],
  "toc": [
    {
      "title": "Tag types",
      "url": "api/core/#tag-types"
    },
    {
      "title": "htmltools.Tag",
      "url": "api/core/#htmltools.Tag"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters"
    },
    {
      "title": "Attributes",
      "url": "api/core/#attributes"
    },
    {
      "title": "Note",
      "url": "api/core/#note"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples"
    },
    {
      "title": "Methods",
      "url": "api/core/#methods"
    },
    {
      "title": "add_class",
      "url": "api/core/#htmltools.Tag.add_class"
    },
    {
      "title": "add_style",
      "url": "api/core/#htmltools.Tag.add_style"
    },
    {
      "title": "append",
      "url": "api/core/#htmltools.Tag.append"
    },
    {
      "title": "extend",
      "url": "api/core/#htmltools.Tag.extend"
    },
    {
      "title": "get_dependencies",
      "url": "api/core/#htmltools.Tag.get_dependencies"
    },
    {
      "title": "get_html_string",
      "url": "api/core/#htmltools.Tag.get_html_string"
    },
    {
      "title": "has_class",
      "url": "api/core/#htmltools.Tag.has_class"
    },
    {
      "title": "insert",
      "url": "api/core/#htmltools.Tag.insert"
    },
    {
      "title": "remove_class",
      "url": "api/core/#htmltools.Tag.remove_class"
    },
    {
      "title": "render",
      "url": "api/core/#htmltools.Tag.render"
    },
    {
      "title": "save_html",
      "url": "api/core/#htmltools.Tag.save_html"
    },
    {
      "title": "show",
      "url": "api/core/#htmltools.Tag.show"
    },
    {
      "title": "tagify",
      "url": "api/core/#htmltools.Tag.tagify"
    },
    {
      "title": "htmltools.TagAttrs",
      "url": "api/core/#htmltools.TagAttrs"
    },
    {
      "title": "htmltools.TagAttrValue",
      "url": "api/core/#htmltools.TagAttrValue"
    },
    {
      "title": "htmltools.TagChild",
      "url": "api/core/#htmltools.TagChild"
    },
    {
      "title": "htmltools.TagList",
      "url": "api/core/#htmltools.TagList"
    },
    {
      "title": "Parameters",
      "url": "api/core/#parameters-8"
    },
    {
      "title": "Examples",
      "url": "api/core/#examples-1"
    },
    {
      "title": "Methods",
      "url": "api/core/#methods-1"
    },
    {
      "title": "append",
      "url": "api/core/#htmltools.TagList.append"
    },
    {
      "title": "extend",
      "url": "api/core/#htmltools.TagList.extend"
    },
    {
      "title": "get_dependencies",
      "url": "api/core/#htmltools.TagList.get_dependencies"
    },
    {
      "title": "get_html_string",
      "url": "api/core/#htmltools.TagList.get_html_string"
    },
    {
      "title": "insert",
      "url": "api/core/#htmltools.TagList.insert"
    },
    {
      "title": "render",
      "url": "api/core/#htmltools.TagList.render"
    },
    {
      "title": "save_html",
      "url": "api/core/#htmltools.TagList.save_html"
    },
    {
      "title": "show",
      "url": "api/core/#htmltools.TagList.show"
    },
    {
      "title": "tagify",
      "url": "api/core/#htmltools.TagList.tagify"
    },
    {
      "title": "htmltools.TagFunction",
      "url": "api/core/#htmltools.TagFunction"
    },
    {
      "title": "htmltools.Tagifiable",
      "url": "api/core/#htmltools.Tagifiable"
    },
    {
      "title": "htmltools.MetadataNode",
      "url": "api/core/#htmltools.MetadataNode"
    },
    {
      "title": "Shiny Core API",
      "url": "api/core/index.html"
    },
    {
      "title": "Page containers"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_navbar",
      "url": "api/core/ui.page_navbar.html"
    },
    {
      "title": "ui.page_sidebar",
      "url": "api/core/ui.page_sidebar.html"
    },
    {
      "title": "ui.page_fillable",
      "url": "api/core/ui.page_fillable.html"
    },
    {
      "title": "ui.page_fluid",
      "url": "api/core/ui.page_fluid.html"
    },
    {
      "title": "ui.page_fixed",
      "url": "api/core/ui.page_fixed.html"
    },
    {
      "title": "ui.page_bootstrap",
      "url": "api/core/ui.page_bootstrap.html"
    },
    {
      "title": "ui.page_auto",
      "url": "api/core/ui.page_auto.html"
    },
    {
      "title": "ui.page_output",
      "url": "api/core/ui.page_output.html"
    },
    {
      "title": "UI Layouts"
    },
    {
      "title": "ui.sidebar",
      "url": "api/core/ui.sidebar.html"
    },
    {
      "title": "ui.layout_sidebar",
      "url": "api/core/ui.layout_sidebar.html"
    },
    {
      "title": "ui.layout_columns",
      "url": "api/core/ui.layout_columns.html"
    },
    {
      "title": "ui.layout_column_wrap",
      "url": "api/core/ui.layout_column_wrap.html"
    },
    {
      "title": "ui.card",
      "url": "api/core/ui.card.html"
    },
    {
      "title": "ui.card_header",
      "url": "api/core/ui.card_header.html"
    },
    {
      "title": "ui.card_footer",
      "url": "api/core/ui.card_footer.html"
    },
    {
      "title": "ui.popover",
      "url": "api/core/ui.popover.html"
    },
    {
      "title": "ui.tooltip",
      "url": "api/core/ui.tooltip.html"
    },
    {
      "title": "ui.accordion",
      "url": "api/core/ui.accordion.html"
    },
    {
      "title": "ui.accordion_panel",
      "url": "api/core/ui.accordion_panel.html"
    },
    {
      "title": "ui.column",
      "url": "api/core/ui.column.html"
    },
    {
      "title": "ui.row",
      "url": "api/core/ui.row.html"
    },
    {
      "title": "UI Inputs"
    },
    {
      "title": "ui.input_select",
      "url": "api/core/ui.input_select.html"
    },
    {
      "title": "ui.input_selectize",
      "url": "api/core/ui.input_selectize.html"
    },
    {
      "title": "ui.input_slider",
      "url": "api/core/ui.input_slider.html"
    },
    {
      "title": "ui.input_dark_mode",
      "url": "api/core/ui.input_dark_mode.html"
    },
    {
      "title": "ui.input_date",
      "url": "api/core/ui.input_date.html"
    },
    {
      "title": "ui.input_date_range",
      "url": "api/core/ui.input_date_range.html"
    },
    {
      "title": "ui.input_checkbox",
      "url": "api/core/ui.input_checkbox.html"
    },
    {
      "title": "ui.input_checkbox_group",
      "url": "api/core/ui.input_checkbox_group.html"
    },
    {
      "title": "ui.input_switch",
      "url": "api/core/ui.input_switch.html"
    },
    {
      "title": "ui.input_radio_buttons",
      "url": "api/core/ui.input_radio_buttons.html"
    },
    {
      "title": "ui.input_numeric",
      "url": "api/core/ui.input_numeric.html"
    },
    {
      "title": "ui.input_text",
      "url": "api/core/ui.input_text.html"
    },
    {
      "title": "ui.input_text_area",
      "url": "api/core/ui.input_text_area.html"
    },
    {
      "title": "ui.input_password",
      "url": "api/core/ui.input_password.html"
    },
    {
      "title": "ui.input_action_button",
      "url": "api/core/ui.input_action_button.html"
    },
    {
      "title": "ui.input_action_link",
      "url": "api/core/ui.input_action_link.html"
    },
    {
      "title": "ui.input_task_button",
      "url": "api/core/ui.input_task_button.html"
    },
    {
      "title": "Value boxes"
    },
    {
      "title": "ui.value_box",
      "url": "api/core/ui.value_box.html"
    },
    {
      "title": "ui.value_box_theme",
      "url": "api/core/ui.value_box_theme.html"
    },
    {
      "title": "ui.showcase_bottom",
      "url": "api/core/ui.showcase_bottom.html"
    },
    {
      "title": "ui.showcase_left_center",
      "url": "api/core/ui.showcase_left_center.html"
    },
    {
      "title": "ui.showcase_top_right",
      "url": "api/core/ui.showcase_top_right.html"
    },
    {
      "title": "Navigation (tab) panels"
    },
    {
      "title": "ui.nav_panel",
      "url": "api/core/ui.nav_panel.html"
    },
    {
      "title": "ui.nav_spacer",
      "url": "api/core/ui.nav_spacer.html"
    },
    {
      "title": "ui.nav_menu",
      "url": "api/core/ui.nav_menu.html"
    },
    {
      "title": "ui.nav_control",
      "url": "api/core/ui.nav_control.html"
    },
    {
      "title": "ui.navset_bar",
      "url": "api/core/ui.navset_bar.html"
    },
    {
      "title": "ui.navset_tab",
      "url": "api/core/ui.navset_tab.html"
    },
    {
      "title": "ui.navset_pill",
      "url": "api/core/ui.navset_pill.html"
    },
    {
      "title": "ui.navset_underline",
      "url": "api/core/ui.navset_underline.html"
    },
    {
      "title": "ui.navset_card_tab",
      "url": "api/core/ui.navset_card_tab.html"
    },
    {
      "title": "ui.navset_card_pill",
      "url": "api/core/ui.navset_card_pill.html"
    },
    {
      "title": "ui.navset_card_underline",
      "url": "api/core/ui.navset_card_underline.html"
    },
    {
      "title": "ui.navset_pill_list",
      "url": "api/core/ui.navset_pill_list.html"
    },
    {
      "title": "ui.navset_hidden",
      "url": "api/core/ui.navset_hidden.html"
    },
    {
      "title": "ui.navbar_options",
      "url": "api/core/ui.navbar_options.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "ui.panel_absolute",
      "url": "api/core/ui.panel_absolute.html"
    },
    {
      "title": "ui.panel_fixed",
      "url": "api/core/ui.panel_fixed.html"
    },
    {
      "title": "ui.panel_conditional",
      "url": "api/core/ui.panel_conditional.html"
    },
    {
      "title": "ui.panel_title",
      "url": "api/core/ui.panel_title.html"
    },
    {
      "title": "ui.panel_well",
      "url": "api/core/ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "ui.input_file",
      "url": "api/core/ui.input_file.html"
    },
    {
      "title": "ui.download_button",
      "url": "api/core/ui.download_button.html"
    },
    {
      "title": "ui.download_link",
      "url": "api/core/ui.download_link.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "ui.Chat",
      "url": "api/core/ui.Chat.html"
    },
    {
      "title": "ui.chat_ui",
      "url": "api/core/ui.chat_ui.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "ui.MarkdownStream",
      "url": "api/core/ui.MarkdownStream.html"
    },
    {
      "title": "ui.output_markdown_stream",
      "url": "api/core/ui.output_markdown_stream.html"
    },
    {
      "title": "Custom UI"
    },
    {
      "title": "ui.Theme",
      "url": "api/core/ui.Theme.html"
    },
    {
      "title": "ui.HTML",
      "url": "api/core/ui.HTML.html"
    },
    {
      "title": "ui.TagList",
      "url": "api/core/ui.TagList.html"
    },
    {
      "title": "ui.tags",
      "url": "api/core/ui.tags.html"
    },
    {
      "title": "ui.markdown",
      "url": "api/core/ui.markdown.html"
    },
    {
      "title": "ui.include_css",
      "url": "api/core/ui.include_css.html"
    },
    {
      "title": "ui.include_js",
      "url": "api/core/ui.include_js.html"
    },
    {
      "title": "ui.insert_ui",
      "url": "api/core/ui.insert_ui.html"
    },
    {
      "title": "ui.remove_ui",
      "url": "api/core/ui.remove_ui.html"
    },
    {
      "title": "ui.busy_indicators.use",
      "url": "api/core/ui.busy_indicators.use.html"
    },
    {
      "title": "ui.busy_indicators.options",
      "url": "api/core/ui.busy_indicators.options.html"
    },
    {
      "title": "ui.fill.as_fillable_container",
      "url": "api/core/ui.fill.as_fillable_container.html"
    },
    {
      "title": "ui.fill.as_fill_item",
      "url": "api/core/ui.fill.as_fill_item.html"
    },
    {
      "title": "ui.fill.remove_all_fill",
      "url": "api/core/ui.fill.remove_all_fill.html"
    },
    {
      "title": "ui.css.as_css_unit",
      "url": "api/core/ui.css.as_css_unit.html"
    },
    {
      "title": "ui.css.as_css_padding",
      "url": "api/core/ui.css.as_css_padding.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "ui.update_select",
      "url": "api/core/ui.update_select.html"
    },
    {
      "title": "ui.update_selectize",
      "url": "api/core/ui.update_selectize.html"
    },
    {
      "title": "ui.update_slider",
      "url": "api/core/ui.update_slider.html"
    },
    {
      "title": "ui.update_dark_mode",
      "url": "api/core/ui.update_dark_mode.html"
    },
    {
      "title": "ui.update_date",
      "url": "api/core/ui.update_date.html"
    },
    {
      "title": "ui.update_date_range",
      "url": "api/core/ui.update_date_range.html"
    },
    {
      "title": "ui.update_checkbox",
      "url": "api/core/ui.update_checkbox.html"
    },
    {
      "title": "ui.update_checkbox_group",
      "url": "api/core/ui.update_checkbox_group.html"
    },
    {
      "title": "ui.update_switch",
      "url": "api/core/ui.update_switch.html"
    },
    {
      "title": "ui.update_radio_buttons",
      "url": "api/core/ui.update_radio_buttons.html"
    },
    {
      "title": "ui.update_numeric",
      "url": "api/core/ui.update_numeric.html"
    },
    {
      "title": "ui.update_text",
      "url": "api/core/ui.update_text.html"
    },
    {
      "title": "ui.update_text_area",
      "url": "api/core/ui.update_text_area.html"
    },
    {
      "title": "ui.update_navs",
      "url": "api/core/ui.update_navs.html"
    },
    {
      "title": "ui.update_action_button",
      "url": "api/core/ui.update_action_button.html"
    },
    {
      "title": "ui.update_action_link",
      "url": "api/core/ui.update_action_link.html"
    },
    {
      "title": "ui.update_task_button",
      "url": "api/core/ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "ui.update_sidebar",
      "url": "api/core/ui.update_sidebar.html"
    },
    {
      "title": "ui.update_tooltip",
      "url": "api/core/ui.update_tooltip.html"
    },
    {
      "title": "ui.update_popover",
      "url": "api/core/ui.update_popover.html"
    },
    {
      "title": "ui.update_accordion",
      "url": "api/core/ui.update_accordion.html"
    },
    {
      "title": "ui.update_accordion_panel",
      "url": "api/core/ui.update_accordion_panel.html"
    },
    {
      "title": "ui.insert_accordion_panel",
      "url": "api/core/ui.insert_accordion_panel.html"
    },
    {
      "title": "ui.remove_accordion_panel",
      "url": "api/core/ui.remove_accordion_panel.html"
    },
    {
      "title": "Rendering outputs"
    },
    {
      "title": "ui.output_plot",
      "url": "api/core/ui.output_plot.html"
    },
    {
      "title": "ui.output_image",
      "url": "api/core/ui.output_image.html"
    },
    {
      "title": "ui.output_table",
      "url": "api/core/ui.output_table.html"
    },
    {
      "title": "ui.output_data_frame",
      "url": "api/core/ui.output_data_frame.html"
    },
    {
      "title": "ui.output_text",
      "url": "api/core/ui.output_text.html"
    },
    {
      "title": "ui.output_code",
      "url": "api/core/ui.output_code.html"
    },
    {
      "title": "ui.output_text_verbatim",
      "url": "api/core/ui.output_text_verbatim.html"
    },
    {
      "title": "ui.output_ui",
      "url": "api/core/ui.output_ui.html"
    },
    {
      "title": "render.plot",
      "url": "api/core/render.plot.html"
    },
    {
      "title": "render.image",
      "url": "api/core/render.image.html"
    },
    {
      "title": "render.table",
      "url": "api/core/render.table.html"
    },
    {
      "title": "render.text",
      "url": "api/core/render.text.html"
    },
    {
      "title": "render.code",
      "url": "api/core/render.code.html"
    },
    {
      "title": "render.ui",
      "url": "api/core/render.ui.html"
    },
    {
      "title": "render.express",
      "url": "api/core/render.express.html"
    },
    {
      "title": "render.download",
      "url": "api/core/render.download.html"
    },
    {
      "title": "render.data_frame",
      "url": "api/core/render.data_frame.html"
    },
    {
      "title": "render.DataGrid",
      "url": "api/core/render.DataGrid.html"
    },
    {
      "title": "render.DataTable",
      "url": "api/core/render.DataTable.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/core/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/core/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/core/reactive.value.html"
    },
    {
      "title": "reactive.Calc",
      "url": "api/core/reactive.Calc.html"
    },
    {
      "title": "reactive.Effect",
      "url": "api/core/reactive.Effect.html"
    },
    {
      "title": "reactive.Value",
      "url": "api/core/reactive.Value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/core/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/core/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/core/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/core/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/core/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/core/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/core/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/core/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/core/req.html"
    },
    {
      "title": "Create and run applications"
    },
    {
      "title": "run_app",
      "url": "api/core/run_app.html"
    },
    {
      "title": "App",
      "url": "api/core/App.html"
    },
    {
      "title": "Inputs",
      "url": "api/core/Inputs.html"
    },
    {
      "title": "Outputs",
      "url": "api/core/Outputs.html"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "ui.help_text",
      "url": "api/core/ui.help_text.html"
    },
    {
      "title": "ui.notification_show",
      "url": "api/core/ui.notification_show.html"
    },
    {
      "title": "ui.notification_remove",
      "url": "api/core/ui.notification_remove.html"
    },
    {
      "title": "ui.modal",
      "url": "api/core/ui.modal.html"
    },
    {
      "title": "ui.modal_show",
      "url": "api/core/ui.modal_show.html"
    },
    {
      "title": "ui.modal_remove",
      "url": "api/core/ui.modal_remove.html"
    },
    {
      "title": "ui.modal_button",
      "url": "api/core/ui.modal_button.html"
    },
    {
      "title": "ui.Progress",
      "url": "api/core/ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "module.ui",
      "url": "api/core/module.ui.html"
    },
    {
      "title": "module.server",
      "url": "api/core/module.server.html"
    },
    {
      "title": "Developer facing tools"
    },
    {
      "title": "Session",
      "url": "api/core/Session.html"
    },
    {
      "title": "Create output renderers",
      "url": "api/core/Renderer.html"
    },
    {
      "title": "htmltools methods",
      "url": "api/core/Htmltools.html"
    },
    {
      "title": "ExtendedTask",
      "url": "api/core/ExtendedTask.html"
    },
    {
      "title": "Types"
    },
    {
      "title": "Miscellaneous types",
      "url": "api/core/MiscTypes.html"
    },
    {
      "title": "Tag types",
      "url": "api/core/TagTypes.html"
    },
    {
      "title": "Exception types",
      "url": "api/core/ExceptionTypes.html"
    },
    {
      "title": "Deprecated"
    },
    {
      "title": "render.transformer.output_transformer",
      "url": "api/core/render.transformer.output_transformer.html"
    },
    {
      "title": "render.transformer.resolve_value_fn",
      "url": "api/core/render.transformer.resolve_value_fn.html"
    },
    {
      "title": "Experimental"
    },
    {
      "title": "Card",
      "url": "api/core/ExCard.html"
    }
  ]
}