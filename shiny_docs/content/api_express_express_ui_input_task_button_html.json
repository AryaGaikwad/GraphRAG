{
  "metadata": {
    "title": "express.ui.input_task_button – Shiny for Python",
    "description": "",
    "url": "api/express/express.ui.input_task_button.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "Input components",
        "express.ui.input_task_button"
      ]
    },
    {
      "type": "h1",
      "text": "express.ui.input_task_button"
    },
    {
      "type": "code",
      "text": "express.ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)"
    },
    {
      "type": "p",
      "text": "Creates a button for launching longer-running operations."
    },
    {
      "type": "p",
      "text": "Its value is initially zero, and increments by one each time it is pressed. It is similar to input_action_button, except it prevents the user from clicking when its operation is already in progress."
    },
    {
      "type": "p",
      "text": "Upon click, it automatically displays a customizable progress message and disables itself; and after the server has dealt with whatever reactivity is triggered from the click, the button automatically resets to its original appearance and re-enables itself."
    },
    {
      "type": "p",
      "text": "In some advanced use cases, it may be necessary to keep a task button in its busy state even after the normal reactive processing has completed. Calling :func:~shiny.express.ui.update_task_button(id, state = \"busy\") from the server will opt out of any currently pending reset for a specific task button. After doing so, the button can be re-enabled by calling update_task_button(id, state = &quot;ready&quot;) after each click's work is complete."
    },
    {
      "type": "p",
      "text": "You can also pass an explicit auto_reset = FALSE to input_task_button(), which means that button will never be automatically re-enabled and will require update_task_button(id, state = &quot;ready&quot;) to be called each time."
    },
    {
      "type": "p",
      "text": "Note that, as a general rule, Shiny's update family of functions do not take effect at the instant that they are called, but are held until the end of the current reactive cycle. So if you have many different reactive calculations and outputs, you don't have to be too careful about when you call update_task_button(id, state = &quot;ready&quot;), as the button on the client will not actually re-enable until the same moment that all of the updated outputs simultaneously sent to the client."
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "An input id."
    },
    {
      "type": "p",
      "text": "A button label."
    },
    {
      "type": "p",
      "text": "[Experimental] Can be used to add additional states besides “ready” and “busy”. Pass a span with slot=\"state_name\" for each new state, and call update_task_button with state=\"state_name\" to switch the button to that state."
    },
    {
      "type": "p",
      "text": "An icon to appear inline with the button/link."
    },
    {
      "type": "p",
      "text": "A label to appear when the button is busy."
    },
    {
      "type": "p",
      "text": "An icon to appear inline with the button/link when the button is busy."
    },
    {
      "type": "p",
      "text": "The CSS width, e.g. ‘400px’, or ‘100%’"
    },
    {
      "type": "p",
      "text": "One of the Bootstrap theme colors (‘primary’, ‘default’, ‘secondary’, ‘success’, ‘danger’, ‘warning’, ‘info’, ‘light’, ‘dark’), or None to leave off the Bootstrap-specific button CSS classes. Defaults to ‘primary’."
    },
    {
      "type": "p",
      "text": "Whether to automatically reset the button to “ready” after the task completes. If False, the button will remain in the “busy” state until update_task_button is called with state=\"ready\". Also note that even if auto_reset=True, calling update_task_button with state=\"busy\" will prevent the button from automatically resetting."
    },
    {
      "type": "p",
      "text": "Attributes to be applied to the button."
    },
    {
      "type": "h2",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A UI element"
    },
    {
      "type": "h2",
      "text": "Notes"
    },
    {
      "type": "p",
      "text": "An integer representing the number of clicks."
    },
    {
      "type": "h2",
      "text": "See Also"
    },
    {
      "type": "ul",
      "items": [
        "update_task_button",
        "input_action_button",
        "event"
      ]
    },
    {
      "type": "h2",
      "text": "Examples"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nfrom datetime import datetime\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.h5(\"Current time\")\n\n\n@render.text\ndef current_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime(\"%H:%M:%S\")\n\n\nwith ui.p():\n    \"Notice that the time above updates every second, even if you click the button below.\"\n\n\n@ui.bind_task_button(button_id=\"btn\")\n@reactive.extended_task\nasync def slow_compute(a: int, b: int) -> int:\n    await asyncio.sleep(3)\n    return a + b\n\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_numeric(\"x\", \"x\", 1)\n        ui.input_numeric(\"y\", \"y\", 2)\n        ui.input_task_button(\"btn\", \"Compute, slowly\")\n        ui.input_action_button(\"btn_cancel\", \"Cancel\")\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        # slow_compute.cancel()\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    ui.h5(\"Sum of x and y\")\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n"
    }
  ],
  "code_examples": [
    "express.ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)",
    "express.ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nfrom datetime import datetime\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.h5(\"Current time\")\n\n\n@render.text\ndef current_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime(\"%H:%M:%S\")\n\n\nwith ui.p():\n    \"Notice that the time above updates every second, even if you click the button below.\"\n\n\n@ui.bind_task_button(button_id=\"btn\")\n@reactive.extended_task\nasync def slow_compute(a: int, b: int) -> int:\n    await asyncio.sleep(3)\n    return a + b\n\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_numeric(\"x\", \"x\", 1)\n        ui.input_numeric(\"y\", \"y\", 2)\n        ui.input_task_button(\"btn\", \"Compute, slowly\")\n        ui.input_action_button(\"btn_cancel\", \"Cancel\")\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        # slow_compute.cancel()\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    ui.h5(\"Sum of x and y\")\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n"
  ],
  "toc": [
    {
      "title": "express.ui.input_task_button",
      "url": "api/express/#shiny.express.ui.input_task_button"
    },
    {
      "title": "Parameters",
      "url": "api/express/#parameters"
    },
    {
      "title": "Returns",
      "url": "api/express/#returns"
    },
    {
      "title": "Notes",
      "url": "api/express/#notes"
    },
    {
      "title": "See Also",
      "url": "api/express/#see-also"
    },
    {
      "title": "Examples",
      "url": "api/express/#examples"
    },
    {
      "title": "Shiny Express API",
      "url": "api/express/index.html"
    },
    {
      "title": "Input components"
    },
    {
      "title": "express.ui.input_select",
      "url": "api/express/express.ui.input_select.html"
    },
    {
      "title": "express.ui.input_selectize",
      "url": "api/express/express.ui.input_selectize.html"
    },
    {
      "title": "express.ui.input_slider",
      "url": "api/express/express.ui.input_slider.html"
    },
    {
      "title": "express.ui.input_dark_mode",
      "url": "api/express/express.ui.input_dark_mode.html"
    },
    {
      "title": "express.ui.input_date",
      "url": "api/express/express.ui.input_date.html"
    },
    {
      "title": "express.ui.input_date_range",
      "url": "api/express/express.ui.input_date_range.html"
    },
    {
      "title": "express.ui.input_checkbox",
      "url": "api/express/express.ui.input_checkbox.html"
    },
    {
      "title": "express.ui.input_checkbox_group",
      "url": "api/express/express.ui.input_checkbox_group.html"
    },
    {
      "title": "express.ui.input_switch",
      "url": "api/express/express.ui.input_switch.html"
    },
    {
      "title": "express.ui.input_radio_buttons",
      "url": "api/express/express.ui.input_radio_buttons.html"
    },
    {
      "title": "express.ui.input_numeric",
      "url": "api/express/express.ui.input_numeric.html"
    },
    {
      "title": "express.ui.input_text",
      "url": "api/express/express.ui.input_text.html"
    },
    {
      "title": "express.ui.input_text_area",
      "url": "api/express/express.ui.input_text_area.html"
    },
    {
      "title": "express.ui.input_password",
      "url": "api/express/express.ui.input_password.html"
    },
    {
      "title": "express.ui.input_action_button",
      "url": "api/express/express.ui.input_action_button.html"
    },
    {
      "title": "express.ui.input_action_link",
      "url": "api/express/express.ui.input_action_link.html"
    },
    {
      "title": "express.ui.input_task_button",
      "url": "api/express/express.ui.input_task_button.html"
    },
    {
      "title": "Output components"
    },
    {
      "title": "express.render.plot",
      "url": "api/express/express.render.plot.html"
    },
    {
      "title": "express.render.table",
      "url": "api/express/express.render.table.html"
    },
    {
      "title": "express.render.DataTable",
      "url": "api/express/express.render.DataTable.html"
    },
    {
      "title": "express.render.data_frame",
      "url": "api/express/express.render.data_frame.html"
    },
    {
      "title": "express.render.DataGrid",
      "url": "api/express/express.render.DataGrid.html"
    },
    {
      "title": "express.render.text",
      "url": "api/express/express.render.text.html"
    },
    {
      "title": "express.render.ui",
      "url": "api/express/express.render.ui.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "express.render.image",
      "url": "api/express/express.render.image.html"
    },
    {
      "title": "express.render.express",
      "url": "api/express/express.render.express.html"
    },
    {
      "title": "Layouts and other UI tools"
    },
    {
      "title": "express.ui.page_opts",
      "url": "api/express/express.ui.page_opts.html"
    },
    {
      "title": "express.ui.sidebar",
      "url": "api/express/express.ui.sidebar.html"
    },
    {
      "title": "express.ui.layout_columns",
      "url": "api/express/express.ui.layout_columns.html"
    },
    {
      "title": "express.ui.layout_column_wrap",
      "url": "api/express/express.ui.layout_column_wrap.html"
    },
    {
      "title": "express.ui.card",
      "url": "api/express/express.ui.card.html"
    },
    {
      "title": "express.ui.card_header",
      "url": "api/express/express.ui.card_header.html"
    },
    {
      "title": "express.ui.card_footer",
      "url": "api/express/express.ui.card_footer.html"
    },
    {
      "title": "express.ui.value_box",
      "url": "api/express/express.ui.value_box.html"
    },
    {
      "title": "express.ui.value_box_theme",
      "url": "api/express/express.ui.value_box_theme.html"
    },
    {
      "title": "express.ui.popover",
      "url": "api/express/express.ui.popover.html"
    },
    {
      "title": "express.ui.tooltip",
      "url": "api/express/express.ui.tooltip.html"
    },
    {
      "title": "express.ui.accordion",
      "url": "api/express/express.ui.accordion.html"
    },
    {
      "title": "express.ui.accordion_panel",
      "url": "api/express/express.ui.accordion_panel.html"
    },
    {
      "title": "express.ui.layout_sidebar",
      "url": "api/express/express.ui.layout_sidebar.html"
    },
    {
      "title": "Navigate multiple panels"
    },
    {
      "title": "express.ui.nav_panel",
      "url": "api/express/express.ui.nav_panel.html"
    },
    {
      "title": "express.ui.navset_card_underline",
      "url": "api/express/express.ui.navset_card_underline.html"
    },
    {
      "title": "express.ui.navset_card_tab",
      "url": "api/express/express.ui.navset_card_tab.html"
    },
    {
      "title": "express.ui.navset_card_pill",
      "url": "api/express/express.ui.navset_card_pill.html"
    },
    {
      "title": "express.ui.nav_spacer",
      "url": "api/express/express.ui.nav_spacer.html"
    },
    {
      "title": "express.ui.nav_menu",
      "url": "api/express/express.ui.nav_menu.html"
    },
    {
      "title": "express.ui.nav_control",
      "url": "api/express/express.ui.nav_control.html"
    },
    {
      "title": "express.ui.navset_bar",
      "url": "api/express/express.ui.navset_bar.html"
    },
    {
      "title": "express.ui.navset_tab",
      "url": "api/express/express.ui.navset_tab.html"
    },
    {
      "title": "express.ui.navset_pill",
      "url": "api/express/express.ui.navset_pill.html"
    },
    {
      "title": "express.ui.navset_underline",
      "url": "api/express/express.ui.navset_underline.html"
    },
    {
      "title": "express.ui.navset_pill_list",
      "url": "api/express/express.ui.navset_pill_list.html"
    },
    {
      "title": "express.ui.navset_hidden",
      "url": "api/express/express.ui.navset_hidden.html"
    },
    {
      "title": "express.ui.navbar_options",
      "url": "api/express/express.ui.navbar_options.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "express.ui.Chat",
      "url": "api/express/express.ui.Chat.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "express.ui.MarkdownStream",
      "url": "api/express/express.ui.MarkdownStream.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/express/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/express/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/express/reactive.value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/express/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/express/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/express/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/express/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/express/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/express/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/express/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/express/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/express/req.html"
    },
    {
      "title": "Reusable Express code"
    },
    {
      "title": "express.ui.hold",
      "url": "api/express/express.ui.hold.html"
    },
    {
      "title": "express.expressify",
      "url": "api/express/express.expressify.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "express.ui.update_select",
      "url": "api/express/express.ui.update_select.html"
    },
    {
      "title": "express.ui.update_selectize",
      "url": "api/express/express.ui.update_selectize.html"
    },
    {
      "title": "express.ui.update_slider",
      "url": "api/express/express.ui.update_slider.html"
    },
    {
      "title": "express.ui.update_dark_mode",
      "url": "api/express/express.ui.update_dark_mode.html"
    },
    {
      "title": "express.ui.update_date",
      "url": "api/express/express.ui.update_date.html"
    },
    {
      "title": "express.ui.update_date_range",
      "url": "api/express/express.ui.update_date_range.html"
    },
    {
      "title": "express.ui.update_checkbox",
      "url": "api/express/express.ui.update_checkbox.html"
    },
    {
      "title": "express.ui.update_checkbox_group",
      "url": "api/express/express.ui.update_checkbox_group.html"
    },
    {
      "title": "express.ui.update_switch",
      "url": "api/express/express.ui.update_switch.html"
    },
    {
      "title": "express.ui.update_radio_buttons",
      "url": "api/express/express.ui.update_radio_buttons.html"
    },
    {
      "title": "express.ui.update_numeric",
      "url": "api/express/express.ui.update_numeric.html"
    },
    {
      "title": "express.ui.update_text",
      "url": "api/express/express.ui.update_text.html"
    },
    {
      "title": "express.ui.update_text_area",
      "url": "api/express/express.ui.update_text_area.html"
    },
    {
      "title": "express.ui.update_navs",
      "url": "api/express/express.ui.update_navs.html"
    },
    {
      "title": "express.ui.update_action_button",
      "url": "api/express/express.ui.update_action_button.html"
    },
    {
      "title": "express.ui.update_action_link",
      "url": "api/express/express.ui.update_action_link.html"
    },
    {
      "title": "express.ui.update_task_button",
      "url": "api/express/express.ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "express.ui.update_sidebar",
      "url": "api/express/express.ui.update_sidebar.html"
    },
    {
      "title": "express.ui.update_tooltip",
      "url": "api/express/express.ui.update_tooltip.html"
    },
    {
      "title": "express.ui.update_popover",
      "url": "api/express/express.ui.update_popover.html"
    },
    {
      "title": "express.ui.update_accordion",
      "url": "api/express/express.ui.update_accordion.html"
    },
    {
      "title": "express.ui.update_accordion_panel",
      "url": "api/express/express.ui.update_accordion_panel.html"
    },
    {
      "title": "express.ui.insert_accordion_panel",
      "url": "api/express/express.ui.insert_accordion_panel.html"
    },
    {
      "title": "express.ui.remove_accordion_panel",
      "url": "api/express/express.ui.remove_accordion_panel.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "express.ui.help_text",
      "url": "api/express/express.ui.help_text.html"
    },
    {
      "title": "express.ui.notification_show",
      "url": "api/express/express.ui.notification_show.html"
    },
    {
      "title": "express.ui.notification_remove",
      "url": "api/express/express.ui.notification_remove.html"
    },
    {
      "title": "express.ui.modal",
      "url": "api/express/express.ui.modal.html"
    },
    {
      "title": "express.ui.modal_show",
      "url": "api/express/express.ui.modal_show.html"
    },
    {
      "title": "express.ui.modal_remove",
      "url": "api/express/express.ui.modal_remove.html"
    },
    {
      "title": "express.ui.modal_button",
      "url": "api/express/express.ui.modal_button.html"
    },
    {
      "title": "express.ui.Progress",
      "url": "api/express/express.ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "express.module",
      "url": "api/express/express.module.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "express.ui.panel_absolute",
      "url": "api/express/express.ui.panel_absolute.html"
    },
    {
      "title": "express.ui.panel_fixed",
      "url": "api/express/express.ui.panel_fixed.html"
    },
    {
      "title": "express.ui.panel_title",
      "url": "api/express/express.ui.panel_title.html"
    },
    {
      "title": "express.ui.panel_well",
      "url": "api/express/express.ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "express.ui.input_file",
      "url": "api/express/express.ui.input_file.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "Dynamic UI"
    },
    {
      "title": "express.ui.panel_conditional",
      "url": "api/express/express.ui.panel_conditional.html"
    },
    {
      "title": "express.ui.insert_ui",
      "url": "api/express/express.ui.insert_ui.html"
    },
    {
      "title": "express.ui.remove_ui",
      "url": "api/express/express.ui.remove_ui.html"
    },
    {
      "title": "User Session"
    },
    {
      "title": "session.Session",
      "url": "api/express/session.Session.html"
    },
    {
      "title": "Client Data"
    },
    {
      "title": "session.ClientData",
      "url": "api/express/session.ClientData.html"
    },
    {
      "title": "UI as HTML"
    },
    {
      "title": "express.ui.Theme",
      "url": "api/express/express.ui.Theme.html"
    },
    {
      "title": "express.ui.markdown",
      "url": "api/express/express.ui.markdown.html"
    },
    {
      "title": "express.ui.include_css",
      "url": "api/express/express.ui.include_css.html"
    },
    {
      "title": "express.ui.include_js",
      "url": "api/express/express.ui.include_js.html"
    },
    {
      "title": "express.ui.HTML",
      "url": "api/express/express.ui.HTML.html"
    },
    {
      "title": "express.ui.tags",
      "url": "api/express/express.ui.tags.html"
    },
    {
      "title": "express.ui.TagList",
      "url": "api/express/express.ui.TagList.html"
    },
    {
      "title": "express.ui.busy_indicators.use",
      "url": "api/express/express.ui.busy_indicators.use.html"
    },
    {
      "title": "express.ui.busy_indicators.options",
      "url": "api/express/express.ui.busy_indicators.options.html"
    },
    {
      "title": "Application-level settings"
    },
    {
      "title": "express.app_opts",
      "url": "api/express/express.app_opts.html"
    },
    {
      "title": "Express developer tooling"
    },
    {
      "title": "express.is_express_app",
      "url": "api/express/express.is_express_app.html"
    },
    {
      "title": "express.wrap_express_app",
      "url": "api/express/express.wrap_express_app.html"
    }
  ]
}