{
  "metadata": {
    "title": "Custom JavaScript component – Shiny for Python",
    "description": "",
    "url": "docs/custom-component-one-off.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "🏗️ Extending",
        "Custom JavaScript component"
      ]
    },
    {
      "type": "h1",
      "text": "Custom JavaScript component"
    },
    {
      "type": "p",
      "text": "In this post, you will learn how to create a custom element and accompanying output binding in Shiny. This is useful if you want to create an output that is not currently in Shiny for your app."
    },
    {
      "type": "p",
      "text": "This post talks about making a one-off component for a given app. If you plan on reusing your component or distributing it for others to use, see the accompanying post on making a custom component package."
    },
    {
      "type": "p",
      "text": "The code shown here is simplified to get the point across, but before you use it in your own app, you should make sure to add error handling and other features to make it robust."
    },
    {
      "type": "h1",
      "text": "The problem"
    },
    {
      "type": "p",
      "text": "You found a new table library that you really want to use in your Shiny app. The library is Tabulator, which is a JavaScript library for making tables with data. But there’s a problem: there’s (currently) no way to easily use it from a Shiny app. To do this, we’ll need to write some Python code that will let us use the library from the Python side of Shiny, and wrap the library’s JavaScript code to make it talk to JavaScript side of Shiny."
    },
    {
      "type": "h1",
      "text": "The solution"
    },
    {
      "type": "p",
      "text": "To implement a custom Tabulator element for your app, you’ll need to write three things:"
    },
    {
      "type": "ol",
      "items": [
        "A JavaScript script that renders the element on the client side using the Tabulator library",
        "An output_tabulator() function for placing the element in your app’s UI",
        "A render_tabulator() decorator for passing table data to the JavaScript code rendering the element on the server side"
      ]
    },
    {
      "type": "h2",
      "text": "The JavaScript code"
    },
    {
      "type": "p",
      "text": "First things first: to use a custom JavaScript library we need to write… some JavaScript."
    },
    {
      "type": "p",
      "text": "To do this we will create a new folder called tabulator/ that has the following structure:"
    },
    {
      "type": "p",
      "text": "This example uses plain JavaScript with no build step. For an example using typescript and with a build-step see the accompanying article on making a custom component package."
    },
    {
      "type": "code",
      "text": "tabulator/\n  tabulator_esm.min.js\n  tabulator.min.css\n  tableComponent.js"
    },
    {
      "type": "p",
      "text": "Both tabulator_esm.min.js and tabulator.min.css are downloaded from tabulator’s website. tableComponent.js is the script that we will write that contains the code for rendering the table to our Shiny app."
    },
    {
      "type": "p",
      "text": "The code in this article will be abbreviated to show the relevant parts. If you want to see the full code, see the accompanying repo."
    },
    {
      "type": "p",
      "text": "To create an output binding in Shiny, we create a new instance of the Shiny.OutputBinding class."
    },
    {
      "type": "code",
      "text": "tableComponent.js"
    },
    {
      "type": "code",
      "text": "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    // Find element to render in\n    find(scope) { ... }\n\n    // Render output element in the found element\n    renderValue(el, payload) { ... }\n}\n\n// Register the binding\nShiny.outputBindings.register(\n  new TabulatorOutputBinding(),\n  \"shiny-tabulator-output\"\n);"
    },
    {
      "type": "p",
      "text": "This class has two methods that we need to implement: find() and renderValue(). The find() method is used to identify the element that will contain the rendered table. The renderValue() method is used to render the table in the element. After making that class we need to register it with Shiny so it can find and send data to instances of our output."
    },
    {
      "type": "h3",
      "text": "The find() method"
    },
    {
      "type": "p",
      "text": "Now that we have the scaffolding set up we can start by filling in the find method. This function is passed a scope object, which is a jQuery selection and should return the element you wish to render your output into."
    },
    {
      "type": "code",
      "text": "tableComponent.js"
    },
    {
      "type": "code",
      "text": "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) {\n        return scope.find(\".shiny-tabulator-output\");\n    }\n\n    renderValue(el, payload) {...}\n}\n\nShiny.outputBindings.register(...);"
    },
    {
      "type": "p",
      "text": "Note that we’re using the class \".shiny-tabulator-output\" here to mark the element that we want to render the table in. This is the same class that we will use in our output_tabulator() function in our app’s server code. You can use any valid CSS selector here, but it’s common to use a class name that descibes the output."
    },
    {
      "type": "h3",
      "text": "The renderValue() method"
    },
    {
      "type": "p",
      "text": "Next, we fill in the main logic for rendering our table in to the renderValue method. This method gets passed two arguments: el, which is an HTMLElement identified by our find function, and payload, which is the data that the server has provided from the render function (more on this soon)."
    },
    {
      "type": "code",
      "text": "tableComponent.js"
    },
    {
      "type": "code",
      "text": "// Import the Tabulator library\nimport { Tabulator } from \"./tabulator_esm.min.js\";\n\nclass TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) { ... }\n\n    renderValue(el, payload) {\n      // Unpack the info we get from the associated render function\n      const { columns, data, type_hints } = payload;\n\n      // Convert the column names to a format that Tabulator expects\n      const columnsDef = columns.map((col, i) => {\n        return {\n          title: col,\n          field: col,\n          hozAlign: type_hints[i] === \"numeric\" ? \"right\" : \"left\",\n        };\n      });\n\n      // Data comes in as a series of rows with each row having as many elements\n      // as there are columns in the data. We need to map this to a series of\n      // objects with keys corresponding to the column names.\n      function zipRowWithColumns(row) {\n        const obj = {};\n        row.forEach((val, i) => {\n          obj[columns[i]] = val;\n        });\n        return obj;\n      }\n\n      // Instantiate a new Tabulator table in the element.\n      // This will also destroy any existing table in the element\n      // so we don't have to worry about adding and removing tables.\n      new Tabulator(el, {\n        data: data.map(zipRowWithColumns),\n        layout: \"fitColumns\",\n        columns: columnsDef,\n      });\n    }\n}\n\nShiny.outputBindings.register(...);"
    },
    {
      "type": "p",
      "text": "The implementation of this function is not terribly important and draws directly from the tabulator docs."
    },
    {
      "type": "p",
      "text": "What matters is that we take our data, transform it in some way, and then instantiate our table with the new Tabulator(el, {...}) call. In this case we take data in the form of the rows of a passed data frame, the column names, and the types of those columns (this is determined by the render decorator), and construct a js object in the form of data = [{col1: foo1, col2: bar1, ...}, {col1: foo2, col2: bar2, ...}]. We also combine the column names and types to create the columnsDef object that Tabulator expects."
    },
    {
      "type": "p",
      "text": "Don’t worry too much about following this particular format because it will change depending on the component that you are wrapping."
    },
    {
      "type": "p",
      "text": "This code relies on the Shiny object existing in the JavaScript context, but you may want to wrap all the above code in an if (Shiny) statement so it only runs if the Shiny object exists. This is useful if you’re writing a component that might be used in a non-Shiny context because your code won’t error out trying to access the non-existant Shiny variable and break the document."
    },
    {
      "type": "code",
      "text": "tableComponent.js"
    },
    {
      "type": "code",
      "text": "if (Shiny) {\n    class TabulatorOutputBinding extends Shiny.OutputBinding { ... }\n\n    Shiny.outputBindings.register(...);\n}"
    },
    {
      "type": "p",
      "text": "To see the full JavaScript code, see tabulator/tableComponent.js in the accompanying repo."
    },
    {
      "type": "h2",
      "text": "The output_tabulator() function"
    },
    {
      "type": "p",
      "text": "Next we need an HTML element to target with our JavaScript code. When we set up the find method for our binding, we chose the class shiny-tabulator-output as the mark of a tabualtor output, so we need to add that class. We also need to allow the user to set the ID of the element so that Shiny knows which element to target with which output. By wrapping the id argument in resolve_id() we make sure it will work in the context of modules. We’ll also add a height argument so that the user can set the height of the table."
    },
    {
      "type": "code",
      "text": "app.py"
    },
    {
      "type": "code",
      "text": "from shiny import App, Inputs, ui\nfrom shiny.module import resolve_id\n\nfrom htmltools import HTMLDependency\n\ntabulator_dep = HTMLDependency(\n    \"tabulator\",\n    \"5.5.2\",\n    source={\"subdir\": \"tabulator\"},\n    script={\"src\": \"tableComponent.js\", \"type\": \"module\"},\n    stylesheet={\"href\": \"tabulator.min.css\"},\n    all_files=True,\n)\n\ndef output_tabulator(id, height=\"200px\"):\n    return ui.div(\n        tabulator_dep,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n        class_=\"shiny-tabulator-output\",\n        style=f\"height: {height}\",\n    )"
    },
    {
      "type": "p",
      "text": "We use the HTMLDependency function to bind up the assets needed for tabulator that we made in the previous step to make sure that they’re included in our app whenever the output_tabulator() function is called (but not more than once)."
    },
    {
      "type": "p",
      "text": "Note the use of all_files=True here. This makes it so we can do the ESM import of the Tabulator library. Otherwise tabulator_esm.min.js would not be hosted and the JS library wouldn’t be able to find it."
    },
    {
      "type": "p",
      "text": "Now, the output_tabulator() function can be called anywhere we want to render a table in our app."
    },
    {
      "type": "h2",
      "text": "The render_tabulator() decorator"
    },
    {
      "type": "p",
      "text": "Now we’ve got the client-side logic finished, we need to write a custom render decorator that sends our data into the component."
    },
    {
      "type": "p",
      "text": "A render function’s job is to take the result of calling the decorated function, transform it into the format our client-side code wants (in many cases this may be as simple as just returning the object unchanged), and then returning that client-side friendly data which will be passed to our client’s renderValue() method."
    },
    {
      "type": "p",
      "text": "To do this we can leverage some tools provided by Shiny in the shiny.render.renderer subpackage."
    },
    {
      "type": "code",
      "text": "app.py"
    },
    {
      "type": "code",
      "text": "from shiny.render.renderer import Jsonifiable, Renderer\n\n\nclass render_tabulator(Renderer[pd.DataFrame]):\n    \"\"\"\n    Render a pandas dataframe as a tabulator table.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the tabulator renderer\n        \"\"\"\n        return ui.output_tabulator(self.output_name)\n\n    async def transform(self, value: pd.DataFrame) -> Jsonifiable:\n        \"\"\"\n        Transform a pandas dataframe into a JSONifiable object that can be\n        passed to the tabulator HTML dependency.\n        \"\"\"\n        if not isinstance(value, pd.DataFrame):\n            # Throw an error if the value is not a dataframe\n            raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n\n        # Get data from dataframe as a list of lists where each inner list is a\n        # row, column names as array of strings and types of each column as an\n        # array of strings\n        return {\n            \"data\": value.values.tolist(),\n            \"columns\": value.columns.tolist(),\n            \"type_hints\": value.dtypes.astype(str).tolist(),\n        }"
    },
    {
      "type": "p",
      "text": "In the code above we use types so that we can get some type checking in our IDE, but these are not required."
    },
    {
      "type": "p",
      "text": "An implementation of Renderer produces a class which is intended to be used as a decorator, which is why a render_* naming convention is recommended. An implementation requires at least 3 things: (1) auto_output_ui, (2) either a transform or render function, and (3) an value type for the Renderer class."
    },
    {
      "type": "p",
      "text": "Here, the value type we’ve used is pd.DataFrame, which helps users know if they’ve returned a suitable object in their render function."
    },
    {
      "type": "p",
      "text": "The auto_output_ui() method is used to generate the UI for the output if the renderer were to be used in Express mode. In this case we just use the output_tabulator() function we wrote earlier."
    },
    {
      "type": "p",
      "text": "Finally, renderers use either the transform(self, value: IT) or render(self) methods to retrieve and transform the result of an output value function into an object that can be sent to the client. render_tabulator’s transform method returns a dictionary of data (which is JSON-like, e.g. Jsonifiable) to be passed to the client side. The transform method is called when the output value function returns a non-None value. If the value is None, the render method quits early, returning None."
    },
    {
      "type": "p",
      "text": "It is required by Shiny Renderer that the transform be async. This allows for asynchronous transformations to occur even if the output value function is synchronous. By providing an async function, Renderer can then handle either an async or sync function provided by the user."
    },
    {
      "type": "p",
      "text": "When first transforming an output value, we check to make sure that the value returned by the function is a dataframe. If it’s not, we throw an error. This is not required, but it’s good practice to do so."
    },
    {
      "type": "code",
      "text": "...\nif not isinstance(value, pd.DataFrame):\n    # Throw an error if the value is not a dataframe\n    raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n..."
    },
    {
      "type": "p",
      "text": "Finally, we return a dictionary of data that we want to pass to the client side. In this case we return the data as a list of lists, the column names as an array of strings, and the types of each column as an array of strings using methods provided by pandas."
    },
    {
      "type": "code",
      "text": "...\nreturn {\n    \"data\": value.values.tolist(),\n    \"columns\": value.columns.tolist(),\n    \"type_hints\": value.dtypes.astype(str).tolist(),\n}\n..."
    },
    {
      "type": "p",
      "text": "This returned value is then what gets sent to the client side and is available in the payload argument of the renderValue() method of our TabulatorOutputBinding class."
    },
    {
      "type": "h1",
      "text": "The result"
    },
    {
      "type": "p",
      "text": "Now we have all the components neccesary to use our tabulator output component. Here’s an app that uses it to render some number of rows of the indomitable mtcars dataset."
    },
    {
      "type": "ul",
      "items": [
        "Express",
        "Core"
      ]
    },
    {
      "type": "code",
      "text": "from pathlib import Path\nimport pandas as pd\nfrom shiny.express import input, ui\n\n# Code for the custom output\n...\n\n# App code\nui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10)\n\n@render_tabulator\ndef tabulatorTable():\n    return pd.read_csv(Path(__file__).parent / \"mtcars.csv\").head(input.n())"
    },
    {
      "type": "code",
      "text": "app.py"
    },
    {
      "type": "code",
      "text": "from pathlib import Path\nimport pandas as pd\nfrom shiny import App, Inputs, ui\n\n# Code for the custom output: output_tabulator and render_tabulator\n...\n\n# App code\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10),\n    output_tabulator(\"tabulatorTable\"),\n)\n\n\ndef server(input: Inputs):\n    @render_tabulator\n    def tabulatorTable():\n        csv_file = Path(__file__).parent / \"mtcars.csv\"\n        return pd.read_csv(csv_file).head(input.n())\n\n\napp = App(app_ui, server)"
    },
    {
      "type": "p",
      "text": "Which results in the following app:"
    },
    {
      "type": "p",
      "text": "To see the full app script, see app.py in the accompanying repo for this post here."
    }
  ],
  "code_examples": [
    "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    // Find element to render in\n    find(scope) { ... }\n\n    // Render output element in the found element\n    renderValue(el, payload) { ... }\n}\n\n// Register the binding\nShiny.outputBindings.register(\n  new TabulatorOutputBinding(),\n  \"shiny-tabulator-output\"\n);",
    "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    // Find element to render in\n    find(scope) { ... }\n\n    // Render output element in the found element\n    renderValue(el, payload) { ... }\n}\n\n// Register the binding\nShiny.outputBindings.register(\n  new TabulatorOutputBinding(),\n  \"shiny-tabulator-output\"\n);",
    "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) {\n        return scope.find(\".shiny-tabulator-output\");\n    }\n\n    renderValue(el, payload) {...}\n}\n\nShiny.outputBindings.register(...);",
    "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) {\n        return scope.find(\".shiny-tabulator-output\");\n    }\n\n    renderValue(el, payload) {...}\n}\n\nShiny.outputBindings.register(...);",
    "// Import the Tabulator library\nimport { Tabulator } from \"./tabulator_esm.min.js\";\n\nclass TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) { ... }\n\n    renderValue(el, payload) {\n      // Unpack the info we get from the associated render function\n      const { columns, data, type_hints } = payload;\n\n      // Convert the column names to a format that Tabulator expects\n      const columnsDef = columns.map((col, i) => {\n        return {\n          title: col,\n          field: col,\n          hozAlign: type_hints[i] === \"numeric\" ? \"right\" : \"left\",\n        };\n      });\n\n      // Data comes in as a series of rows with each row having as many elements\n      // as there are columns in the data. We need to map this to a series of\n      // objects with keys corresponding to the column names.\n      function zipRowWithColumns(row) {\n        const obj = {};\n        row.forEach((val, i) => {\n          obj[columns[i]] = val;\n        });\n        return obj;\n      }\n\n      // Instantiate a new Tabulator table in the element.\n      // This will also destroy any existing table in the element\n      // so we don't have to worry about adding and removing tables.\n      new Tabulator(el, {\n        data: data.map(zipRowWithColumns),\n        layout: \"fitColumns\",\n        columns: columnsDef,\n      });\n    }\n}\n\nShiny.outputBindings.register(...);",
    "// Import the Tabulator library\nimport { Tabulator } from \"./tabulator_esm.min.js\";\n\nclass TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) { ... }\n\n    renderValue(el, payload) {\n      // Unpack the info we get from the associated render function\n      const { columns, data, type_hints } = payload;\n\n      // Convert the column names to a format that Tabulator expects\n      const columnsDef = columns.map((col, i) => {\n        return {\n          title: col,\n          field: col,\n          hozAlign: type_hints[i] === \"numeric\" ? \"right\" : \"left\",\n        };\n      });\n\n      // Data comes in as a series of rows with each row having as many elements\n      // as there are columns in the data. We need to map this to a series of\n      // objects with keys corresponding to the column names.\n      function zipRowWithColumns(row) {\n        const obj = {};\n        row.forEach((val, i) => {\n          obj[columns[i]] = val;\n        });\n        return obj;\n      }\n\n      // Instantiate a new Tabulator table in the element.\n      // This will also destroy any existing table in the element\n      // so we don't have to worry about adding and removing tables.\n      new Tabulator(el, {\n        data: data.map(zipRowWithColumns),\n        layout: \"fitColumns\",\n        columns: columnsDef,\n      });\n    }\n}\n\nShiny.outputBindings.register(...);",
    "if (Shiny) {\n    class TabulatorOutputBinding extends Shiny.OutputBinding { ... }\n\n    Shiny.outputBindings.register(...);\n}",
    "if (Shiny) {\n    class TabulatorOutputBinding extends Shiny.OutputBinding { ... }\n\n    Shiny.outputBindings.register(...);\n}",
    "from shiny import App, Inputs, ui\nfrom shiny.module import resolve_id\n\nfrom htmltools import HTMLDependency\n\ntabulator_dep = HTMLDependency(\n    \"tabulator\",\n    \"5.5.2\",\n    source={\"subdir\": \"tabulator\"},\n    script={\"src\": \"tableComponent.js\", \"type\": \"module\"},\n    stylesheet={\"href\": \"tabulator.min.css\"},\n    all_files=True,\n)\n\ndef output_tabulator(id, height=\"200px\"):\n    return ui.div(\n        tabulator_dep,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n        class_=\"shiny-tabulator-output\",\n        style=f\"height: {height}\",\n    )",
    "from shiny import App, Inputs, ui\nfrom shiny.module import resolve_id\n\nfrom htmltools import HTMLDependency\n\ntabulator_dep = HTMLDependency(\n    \"tabulator\",\n    \"5.5.2\",\n    source={\"subdir\": \"tabulator\"},\n    script={\"src\": \"tableComponent.js\", \"type\": \"module\"},\n    stylesheet={\"href\": \"tabulator.min.css\"},\n    all_files=True,\n)\n\ndef output_tabulator(id, height=\"200px\"):\n    return ui.div(\n        tabulator_dep,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n        class_=\"shiny-tabulator-output\",\n        style=f\"height: {height}\",\n    )",
    "from shiny.render.renderer import Jsonifiable, Renderer\n\n\nclass render_tabulator(Renderer[pd.DataFrame]):\n    \"\"\"\n    Render a pandas dataframe as a tabulator table.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the tabulator renderer\n        \"\"\"\n        return ui.output_tabulator(self.output_name)\n\n    async def transform(self, value: pd.DataFrame) -> Jsonifiable:\n        \"\"\"\n        Transform a pandas dataframe into a JSONifiable object that can be\n        passed to the tabulator HTML dependency.\n        \"\"\"\n        if not isinstance(value, pd.DataFrame):\n            # Throw an error if the value is not a dataframe\n            raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n\n        # Get data from dataframe as a list of lists where each inner list is a\n        # row, column names as array of strings and types of each column as an\n        # array of strings\n        return {\n            \"data\": value.values.tolist(),\n            \"columns\": value.columns.tolist(),\n            \"type_hints\": value.dtypes.astype(str).tolist(),\n        }",
    "from shiny.render.renderer import Jsonifiable, Renderer\n\n\nclass render_tabulator(Renderer[pd.DataFrame]):\n    \"\"\"\n    Render a pandas dataframe as a tabulator table.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the tabulator renderer\n        \"\"\"\n        return ui.output_tabulator(self.output_name)\n\n    async def transform(self, value: pd.DataFrame) -> Jsonifiable:\n        \"\"\"\n        Transform a pandas dataframe into a JSONifiable object that can be\n        passed to the tabulator HTML dependency.\n        \"\"\"\n        if not isinstance(value, pd.DataFrame):\n            # Throw an error if the value is not a dataframe\n            raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n\n        # Get data from dataframe as a list of lists where each inner list is a\n        # row, column names as array of strings and types of each column as an\n        # array of strings\n        return {\n            \"data\": value.values.tolist(),\n            \"columns\": value.columns.tolist(),\n            \"type_hints\": value.dtypes.astype(str).tolist(),\n        }",
    "...\nif not isinstance(value, pd.DataFrame):\n    # Throw an error if the value is not a dataframe\n    raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n...",
    "...\nif not isinstance(value, pd.DataFrame):\n    # Throw an error if the value is not a dataframe\n    raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n...",
    "...\nreturn {\n    \"data\": value.values.tolist(),\n    \"columns\": value.columns.tolist(),\n    \"type_hints\": value.dtypes.astype(str).tolist(),\n}\n...",
    "...\nreturn {\n    \"data\": value.values.tolist(),\n    \"columns\": value.columns.tolist(),\n    \"type_hints\": value.dtypes.astype(str).tolist(),\n}\n...",
    "from pathlib import Path\nimport pandas as pd\nfrom shiny.express import input, ui\n\n# Code for the custom output\n...\n\n# App code\nui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10)\n\n@render_tabulator\ndef tabulatorTable():\n    return pd.read_csv(Path(__file__).parent / \"mtcars.csv\").head(input.n())",
    "from pathlib import Path\nimport pandas as pd\nfrom shiny.express import input, ui\n\n# Code for the custom output\n...\n\n# App code\nui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10)\n\n@render_tabulator\ndef tabulatorTable():\n    return pd.read_csv(Path(__file__).parent / \"mtcars.csv\").head(input.n())",
    "from pathlib import Path\nimport pandas as pd\nfrom shiny import App, Inputs, ui\n\n# Code for the custom output: output_tabulator and render_tabulator\n...\n\n# App code\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10),\n    output_tabulator(\"tabulatorTable\"),\n)\n\n\ndef server(input: Inputs):\n    @render_tabulator\n    def tabulatorTable():\n        csv_file = Path(__file__).parent / \"mtcars.csv\"\n        return pd.read_csv(csv_file).head(input.n())\n\n\napp = App(app_ui, server)",
    "from pathlib import Path\nimport pandas as pd\nfrom shiny import App, Inputs, ui\n\n# Code for the custom output: output_tabulator and render_tabulator\n...\n\n# App code\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10),\n    output_tabulator(\"tabulatorTable\"),\n)\n\n\ndef server(input: Inputs):\n    @render_tabulator\n    def tabulatorTable():\n        csv_file = Path(__file__).parent / \"mtcars.csv\"\n        return pd.read_csv(csv_file).head(input.n())\n\n\napp = App(app_ui, server)",
    "\n\n\n\nOur app with custom Tabulator component.\n\n\n"
  ],
  "toc": [
    {
      "title": "The problem",
      "url": "docs/#the-problem"
    },
    {
      "title": "The solution",
      "url": "docs/#the-solution"
    },
    {
      "title": "The JavaScript code",
      "url": "docs/#the-javascript-code"
    },
    {
      "title": "The find() method",
      "url": "docs/#the-find-method"
    },
    {
      "title": "The renderValue() method",
      "url": "docs/#the-rendervalue-method"
    },
    {
      "title": "The output_tabulator() function",
      "url": "docs/#the-output_tabulator-function"
    },
    {
      "title": "The render_tabulator() decorator",
      "url": "docs/#the-render_tabulator-decorator"
    },
    {
      "title": "The result",
      "url": "docs/#the-result"
    },
    {
      "title": "📌 Essentials"
    },
    {
      "title": "Overview",
      "url": "docs/overview.html"
    },
    {
      "title": "User interfaces",
      "url": "docs/user-interfaces.html"
    },
    {
      "title": "🤖 Generative AI"
    },
    {
      "title": "Get inspired",
      "url": "docs/genai-inspiration.html"
    },
    {
      "title": "Chatbots",
      "url": "docs/genai-chatbots.html"
    },
    {
      "title": "Streaming",
      "url": "docs/genai-stream.html"
    },
    {
      "title": "Tool calling",
      "url": "docs/genai-tools.html"
    },
    {
      "title": "Structured data",
      "url": "docs/genai-structured-data.html"
    },
    {
      "title": "RAG",
      "url": "docs/genai-rag.html"
    },
    {
      "title": "🎨 User interfaces"
    },
    {
      "title": "Overview",
      "url": "docs/ui-overview.html"
    },
    {
      "title": "Jupyter Widgets",
      "url": "docs/jupyter-widgets.html"
    },
    {
      "title": "Dynamic UI",
      "url": "docs/ui-dynamic.html"
    },
    {
      "title": "UI as HTML",
      "url": "docs/ui-html.html"
    },
    {
      "title": "Customizing UI",
      "url": "docs/ui-customize.html"
    },
    {
      "title": "⚡ Reactivity"
    },
    {
      "title": "Foundations",
      "url": "docs/reactive-foundations.html"
    },
    {
      "title": "Patterns",
      "url": "docs/reactive-patterns.html"
    },
    {
      "title": "Mutable objects",
      "url": "docs/reactive-mutable.html"
    },
    {
      "title": "📝 Syntax modes"
    },
    {
      "title": "Express vs. Core",
      "url": "docs/express-vs-core.html"
    },
    {
      "title": "Choosing a syntax",
      "url": "docs/express-or-core.html"
    },
    {
      "title": "Express in depth",
      "url": "docs/express-in-depth.html"
    },
    {
      "title": "Transition to Core",
      "url": "docs/express-to-core.html"
    },
    {
      "title": "📦 Modules"
    },
    {
      "title": "Shiny Modules",
      "url": "docs/modules.html"
    },
    {
      "title": "Module Communication",
      "url": "docs/module-communication.html"
    },
    {
      "title": "🧪 Testing"
    },
    {
      "title": "Unit testing",
      "url": "docs/unit-testing.html"
    },
    {
      "title": "End-to-End Testing Your App",
      "url": "docs/end-to-end-testing.html"
    },
    {
      "title": "🏗️ Extending"
    },
    {
      "title": "Custom JavaScript component",
      "url": "docs/custom-component-one-off.html"
    },
    {
      "title": "Custom components package",
      "url": "docs/custom-components-pkg.html"
    },
    {
      "title": "📊 Comparisons"
    },
    {
      "title": "Streamlit",
      "url": "docs/comp-streamlit.html"
    },
    {
      "title": "Shiny for R",
      "url": "docs/comp-r-shiny.html"
    },
    {
      "title": "🧩 Miscellaneous"
    },
    {
      "title": "Non-blocking operations",
      "url": "docs/nonblocking.html"
    },
    {
      "title": "Routing",
      "url": "docs/routing.html"
    }
  ]
}