{
  "metadata": {
    "title": "Shiny Components â€“ Shiny for Python",
    "description": "",
    "url": "components/"
  },
  "content": [
    {
      "type": "h2",
      "text": "Shiny Components"
    },
    {
      "type": "p",
      "text": "Inputs, outputs and display messages to make your data interactive on every device. Add these components to Shiny Layouts to give your app a navbar, sidebar, cards and more."
    },
    {
      "type": "h2",
      "text": "Inputs"
    },
    {
      "type": "p",
      "text": "Inputs allow users to interact with the webpage by clicking a button, entering text, selecting an option, and more."
    },
    {
      "type": "h2",
      "text": "Outputs"
    },
    {
      "type": "p",
      "text": "Outputs create a spot on the webpage to display results from the server, such as text, tables, plots, and more."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center px-4 flex-column\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"uiElement\"),\n    {\"class\": \"vh-100 d-flex flex-column pt-4 px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def uiElement():\n        if input.show_slider():\n            return ui.input_slider(\"slider\", \"\", min=1, max=10, value=5)\n\napp = App(app_ui, server)"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text_verbatim(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center flex-column px-4\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)"
    },
    {
      "type": "h2",
      "text": "Display Messages"
    },
    {
      "type": "p",
      "text": "Provide feedback to your user with notifications, progress bars, and confirmation modals."
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, reactive, ui\nfrom pathlib import Path\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n## file: app.py\nimport asyncio\nfrom pathlib import Path\n\nfrom shiny import App, reactive, render, ui\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }"
    },
    {
      "type": "code",
      "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"tooltip\", \"Show tooltip\", class_=\"btn-primary\"),\n        {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n        \"A tooltip message\",  \n        id=\"btn_tooltip\",  \n        placement=\"top\",  \n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)"
    }
  ],
  "code_examples": [
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center px-4 flex-column\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center px-4 flex-column\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"uiElement\"),\n    {\"class\": \"vh-100 d-flex flex-column pt-4 px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def uiElement():\n        if input.show_slider():\n            return ui.input_slider(\"slider\", \"\", min=1, max=10, value=5)\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"uiElement\"),\n    {\"class\": \"vh-100 d-flex flex-column pt-4 px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def uiElement():\n        if input.show_slider():\n            return ui.input_slider(\"slider\", \"\", min=1, max=10, value=5)\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text_verbatim(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center flex-column px-4\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text_verbatim(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center flex-column px-4\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, reactive, ui\nfrom pathlib import Path\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, reactive, ui\nfrom pathlib import Path\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n## file: app.py\nimport asyncio\nfrom pathlib import Path\n\nfrom shiny import App, reactive, render, ui\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n## file: app.py\nimport asyncio\nfrom pathlib import Path\n\nfrom shiny import App, reactive, render, ui\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"tooltip\", \"Show tooltip\", class_=\"btn-primary\"),\n        {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n        \"A tooltip message\",  \n        id=\"btn_tooltip\",  \n        placement=\"top\",  \n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
    "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"tooltip\", \"Show tooltip\", class_=\"btn-primary\"),\n        {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n        \"A tooltip message\",  \n        id=\"btn_tooltip\",  \n        placement=\"top\",  \n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)"
  ],
  "toc": []
}