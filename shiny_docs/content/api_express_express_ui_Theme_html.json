{
  "metadata": {
    "title": "express.ui.theme – Shiny for Python",
    "description": "",
    "url": "api/express/express.ui.Theme.html"
  },
  "content": [
    {
      "type": "ol",
      "items": [
        "UI as HTML",
        "express.ui.Theme"
      ]
    },
    {
      "type": "h1",
      "text": "express.ui.Theme"
    },
    {
      "type": "code",
      "text": "express.ui.Theme(self, preset=None, name=None, include_paths=None)"
    },
    {
      "type": "p",
      "text": "Create a custom Shiny theme."
    },
    {
      "type": "p",
      "text": "The Theme class allows you to create a custom Shiny theme by providing custom Sass code. The theme can be based on one of the available presets, such as \"shiny\" or \"bootstrap\", or a Bootswatch theme. Use the .add_*() methods can be chained together to add custom Sass functions, defaults, mixins, and rules."
    },
    {
      "type": "p",
      "text": "Pass the Theme object directly to the theme argument of any Shiny page function, such as page_sidebar or page_navbar. In Shiny Express apps, use the theme argument of page_opts to set the app theme."
    },
    {
      "type": "p",
      "text": "Note: Compiling custom themes requires the libsass package, which is not installed by default with Shiny. Use pip install libsass or pip install \"shiny[theme]\" to install it."
    },
    {
      "type": "p",
      "text": "Customized themes are compiled to CSS when the theme is used. The Theme class caches the compiled CSS so that it's only compiled for the first user to load your app, but you can speed up app loading (and avoid the runtime libsass dependency) by pre-compiling the theme CSS and saving it to a file. To do this, use the .to_css() method to render the theme to a single minified CSS string."
    },
    {
      "type": "code",
      "text": "my_theme.py"
    },
    {
      "type": "code",
      "text": "from pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())"
    },
    {
      "type": "p",
      "text": "Run this script with python my_theme.py to generate the CSS file. Once saved to a file, the CSS can be used in any Shiny app by passing the file path to the theme argument instead of the Theme object."
    },
    {
      "type": "code",
      "text": "app.py"
    },
    {
      "type": "code",
      "text": "from pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)"
    },
    {
      "type": "h2",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The name of the preset to use as a base. \"shiny\" is the default theme for Shiny apps and \"bootstrap\" uses standard Bootstrap 5 styling. Bootswatch theme presets are also available. Use Theme.available_presets() to see the full list."
    },
    {
      "type": "p",
      "text": "A custom name for the theme. If not provided, the preset name will be used."
    },
    {
      "type": "p",
      "text": "Additional paths to include when looking for Sass files used in @import statements in the theme. This can be a single path as a string or pathlib.Path, or a list of paths. The paths should point to directories containing additional Sass files that the theme depends on."
    },
    {
      "type": "h2",
      "text": "Raises"
    },
    {
      "type": "p",
      "text": "If the preset is not a valid theme preset."
    },
    {
      "type": "h2",
      "text": "Methods"
    },
    {
      "type": "h3",
      "text": "add_defaults"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.add_defaults(*args, **kwargs)"
    },
    {
      "type": "p",
      "text": "Add custom default values to the theme."
    },
    {
      "type": "p",
      "text": "Sass code added via this method will be placed before the default values of the theme preset, allowing you to override or extend the default values."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "Sass code, as a single or multiple strings, containing default value declarations to add."
    },
    {
      "type": "p",
      "text": "Keyword arguments containing default value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_defaults(primary_color=\"#ff0000\") is equivalent to .add_defaults(\"$primary-color: #ff0000 !default;\")."
    },
    {
      "type": "h3",
      "text": "add_functions"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.add_functions(*args)"
    },
    {
      "type": "p",
      "text": "Add custom Sass functions to the theme."
    },
    {
      "type": "p",
      "text": "Sass code added via this method will be placed after the function declarations from the theme preset, allowing you to override or extend the default functions."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The Sass functions to add as a single or multiple strings."
    },
    {
      "type": "h3",
      "text": "add_mixins"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.add_mixins(*args, **kwargs)"
    },
    {
      "type": "p",
      "text": "Add custom Sass mixins to the theme."
    },
    {
      "type": "p",
      "text": "Sass code added via this method will be placed after the mixin declarations from the theme preset, allowing you to override or extend the default mixins."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "Sass code, as a single or multiple strings, containing mixins to add."
    },
    {
      "type": "p",
      "text": "Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_mixins(primary_color=\"#ff0000\") is equivalent to .add_mixins(\"$primary-color: #ff0000;\")."
    },
    {
      "type": "h3",
      "text": "add_rules"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.add_rules(*args, **kwargs)"
    },
    {
      "type": "p",
      "text": "Add custom Sass rules to the theme."
    },
    {
      "type": "p",
      "text": "Sass code added via this method will be placed after the rule declarations from the theme preset, allowing you to override or extend the default rules."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "Sass code, as a single or multiple strings, containing rules to add."
    },
    {
      "type": "p",
      "text": "Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_rules(primary_color=\"#ff0000\") is equivalent to .add_rules(\"$primary-color: #ff0000;\")."
    },
    {
      "type": "h3",
      "text": "add_sass_layer_file"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.add_sass_layer_file(path)"
    },
    {
      "type": "p",
      "text": "Add a Sass layer file to the theme."
    },
    {
      "type": "p",
      "text": "This method reads a special .scss file formatted with layer boundary comments to denote regions of functions, defaults, mixins, and rules. It then splits the file into these constituent pieces and adds them to the appropriate layers of the theme."
    },
    {
      "type": "p",
      "text": "The theme file should contain at least one of the following boundary comments:"
    },
    {
      "type": "code",
      "text": "/*-- scss:uses --*/\n/*-- scss:functions --*/\n/*-- scss:defaults --*/\n/*-- scss:mixins --*/\n/*-- scss:rules --*/"
    },
    {
      "type": "p",
      "text": "Each layer, once extracted, is added to the theme using the corresponding add_ method, e.g. the scss:rules layer is added via .add_rules()."
    },
    {
      "type": "p",
      "text": "Layer types can appear more than once in the .scss file. They are coalesced into a single layer by order of appearance and then added as a block via their corresponding add_ method."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The path to the .scss file to be added."
    },
    {
      "type": "h4",
      "text": "Raises"
    },
    {
      "type": "p",
      "text": "If the .scss file doesn’t contain at least one valid region decorator."
    },
    {
      "type": "h3",
      "text": "add_uses"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.add_uses(*args)"
    },
    {
      "type": "p",
      "text": "Add custom Sass \"uses\" declarations to the theme."
    },
    {
      "type": "p",
      "text": "Sass code added via this method will be placed before the function declarations from the theme preset, allowing you to add Sass code that appears before any other Sass code in the theme layer."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "The Sass functions to add as a single or multiple strings."
    },
    {
      "type": "h3",
      "text": "available_presets"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.available_presets()"
    },
    {
      "type": "p",
      "text": "Get a list of available theme presets."
    },
    {
      "type": "h3",
      "text": "from_brand"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.from_brand(brand)"
    },
    {
      "type": "p",
      "text": "Create a custom Shiny theme from a _brand.yml"
    },
    {
      "type": "p",
      "text": "Creates a custom Shiny theme for your brand using brand.yml, a single YAML file that describes the brand's color and typography. Learn more about writing a _brand.yml file for your brand at the brand.yml homepage."
    },
    {
      "type": "p",
      "text": "As a simple example, suppose your brand guidelines include a color palette with custom orange and black colors. The orange is used as the primary accent color and the black for all text. For typography, the brand also uses Roboto and Roboto Mono from Google Fonts for text and monospace-styled text, respectively. Here's a _brand.yml file for this brand:"
    },
    {
      "type": "code",
      "text": "_brand.yml"
    },
    {
      "type": "code",
      "text": "meta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono"
    },
    {
      "type": "p",
      "text": "You can store the _brand.yml file next to your Shiny app.py or, for larger projects, in a parent folder. To use a theme generated from the _brand.yml file, call from_brand on __file__ and pass the result to the theme argument of page_opts (Shiny Express) or the theme argument of shiny.express.ui.page_* functions, like page_sidebar."
    },
    {
      "type": "code",
      "text": "app.py"
    },
    {
      "type": "code",
      "text": "from shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\""
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A brand_yml.Brand instance, or a path to help locate _brand.yml. For a path, you can pass __file__ or a directory containing the _brand.yml or a path directly to the _brand.yml file."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "A shiny.express.ui.Theme instance with a custom Shiny theme created from the brand guidelines (see brand_yml.Brand)."
    },
    {
      "type": "h3",
      "text": "to_css"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.to_css(compile_args=None)"
    },
    {
      "type": "p",
      "text": "Compile the theme to CSS and return the result as a string."
    },
    {
      "type": "h4",
      "text": "Parameters"
    },
    {
      "type": "p",
      "text": "A dictionary of keyword arguments to pass to sass.compile()."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The compiled CSS for the theme. The value is cached such that previously compiled themes are returned immediately. Adding additional custom Sass code or changing the preset will invalidate the cache."
    },
    {
      "type": "h3",
      "text": "to_sass"
    },
    {
      "type": "code",
      "text": "express.ui.Theme.to_sass()"
    },
    {
      "type": "p",
      "text": "Returns the custom theme as a single Sass string."
    },
    {
      "type": "h4",
      "text": "Returns"
    },
    {
      "type": "p",
      "text": "The custom theme as a single Sass string."
    }
  ],
  "code_examples": [
    "express.ui.Theme(self, preset=None, name=None, include_paths=None)",
    "express.ui.Theme(self, preset=None, name=None, include_paths=None)",
    "from pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())",
    "from pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())",
    "from pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)",
    "from pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)",
    "express.ui.Theme.add_defaults(*args, **kwargs)",
    "express.ui.Theme.add_defaults(*args, **kwargs)",
    "express.ui.Theme.add_functions(*args)",
    "express.ui.Theme.add_functions(*args)",
    "express.ui.Theme.add_mixins(*args, **kwargs)",
    "express.ui.Theme.add_mixins(*args, **kwargs)",
    "express.ui.Theme.add_rules(*args, **kwargs)",
    "express.ui.Theme.add_rules(*args, **kwargs)",
    "express.ui.Theme.add_sass_layer_file(path)",
    "express.ui.Theme.add_sass_layer_file(path)",
    "/*-- scss:uses --*/\n/*-- scss:functions --*/\n/*-- scss:defaults --*/\n/*-- scss:mixins --*/\n/*-- scss:rules --*/",
    "/*-- scss:uses --*/\n/*-- scss:functions --*/\n/*-- scss:defaults --*/\n/*-- scss:mixins --*/\n/*-- scss:rules --*/",
    "express.ui.Theme.add_uses(*args)",
    "express.ui.Theme.add_uses(*args)",
    "express.ui.Theme.available_presets()",
    "express.ui.Theme.available_presets()",
    "express.ui.Theme.from_brand(brand)",
    "express.ui.Theme.from_brand(brand)",
    "meta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono",
    "meta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono",
    "from shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
    "from shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
    "express.ui.Theme.to_css(compile_args=None)",
    "express.ui.Theme.to_css(compile_args=None)",
    "express.ui.Theme.to_sass()",
    "express.ui.Theme.to_sass()"
  ],
  "toc": [
    {
      "title": "express.ui.Theme",
      "url": "api/express/#shiny.express.ui.Theme"
    },
    {
      "title": "Parameters",
      "url": "api/express/#parameters"
    },
    {
      "title": "Raises",
      "url": "api/express/#raises"
    },
    {
      "title": "Methods",
      "url": "api/express/#methods"
    },
    {
      "title": "add_defaults",
      "url": "api/express/#shiny.express.ui.Theme.add_defaults"
    },
    {
      "title": "add_functions",
      "url": "api/express/#shiny.express.ui.Theme.add_functions"
    },
    {
      "title": "add_mixins",
      "url": "api/express/#shiny.express.ui.Theme.add_mixins"
    },
    {
      "title": "add_rules",
      "url": "api/express/#shiny.express.ui.Theme.add_rules"
    },
    {
      "title": "add_sass_layer_file",
      "url": "api/express/#shiny.express.ui.Theme.add_sass_layer_file"
    },
    {
      "title": "add_uses",
      "url": "api/express/#shiny.express.ui.Theme.add_uses"
    },
    {
      "title": "available_presets",
      "url": "api/express/#shiny.express.ui.Theme.available_presets"
    },
    {
      "title": "from_brand",
      "url": "api/express/#shiny.express.ui.Theme.from_brand"
    },
    {
      "title": "to_css",
      "url": "api/express/#shiny.express.ui.Theme.to_css"
    },
    {
      "title": "to_sass",
      "url": "api/express/#shiny.express.ui.Theme.to_sass"
    },
    {
      "title": "Shiny Express API",
      "url": "api/express/index.html"
    },
    {
      "title": "Input components"
    },
    {
      "title": "express.ui.input_select",
      "url": "api/express/express.ui.input_select.html"
    },
    {
      "title": "express.ui.input_selectize",
      "url": "api/express/express.ui.input_selectize.html"
    },
    {
      "title": "express.ui.input_slider",
      "url": "api/express/express.ui.input_slider.html"
    },
    {
      "title": "express.ui.input_dark_mode",
      "url": "api/express/express.ui.input_dark_mode.html"
    },
    {
      "title": "express.ui.input_date",
      "url": "api/express/express.ui.input_date.html"
    },
    {
      "title": "express.ui.input_date_range",
      "url": "api/express/express.ui.input_date_range.html"
    },
    {
      "title": "express.ui.input_checkbox",
      "url": "api/express/express.ui.input_checkbox.html"
    },
    {
      "title": "express.ui.input_checkbox_group",
      "url": "api/express/express.ui.input_checkbox_group.html"
    },
    {
      "title": "express.ui.input_switch",
      "url": "api/express/express.ui.input_switch.html"
    },
    {
      "title": "express.ui.input_radio_buttons",
      "url": "api/express/express.ui.input_radio_buttons.html"
    },
    {
      "title": "express.ui.input_numeric",
      "url": "api/express/express.ui.input_numeric.html"
    },
    {
      "title": "express.ui.input_text",
      "url": "api/express/express.ui.input_text.html"
    },
    {
      "title": "express.ui.input_text_area",
      "url": "api/express/express.ui.input_text_area.html"
    },
    {
      "title": "express.ui.input_password",
      "url": "api/express/express.ui.input_password.html"
    },
    {
      "title": "express.ui.input_action_button",
      "url": "api/express/express.ui.input_action_button.html"
    },
    {
      "title": "express.ui.input_action_link",
      "url": "api/express/express.ui.input_action_link.html"
    },
    {
      "title": "express.ui.input_task_button",
      "url": "api/express/express.ui.input_task_button.html"
    },
    {
      "title": "Output components"
    },
    {
      "title": "express.render.plot",
      "url": "api/express/express.render.plot.html"
    },
    {
      "title": "express.render.table",
      "url": "api/express/express.render.table.html"
    },
    {
      "title": "express.render.DataTable",
      "url": "api/express/express.render.DataTable.html"
    },
    {
      "title": "express.render.data_frame",
      "url": "api/express/express.render.data_frame.html"
    },
    {
      "title": "express.render.DataGrid",
      "url": "api/express/express.render.DataGrid.html"
    },
    {
      "title": "express.render.text",
      "url": "api/express/express.render.text.html"
    },
    {
      "title": "express.render.ui",
      "url": "api/express/express.render.ui.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "express.render.image",
      "url": "api/express/express.render.image.html"
    },
    {
      "title": "express.render.express",
      "url": "api/express/express.render.express.html"
    },
    {
      "title": "Layouts and other UI tools"
    },
    {
      "title": "express.ui.page_opts",
      "url": "api/express/express.ui.page_opts.html"
    },
    {
      "title": "express.ui.sidebar",
      "url": "api/express/express.ui.sidebar.html"
    },
    {
      "title": "express.ui.layout_columns",
      "url": "api/express/express.ui.layout_columns.html"
    },
    {
      "title": "express.ui.layout_column_wrap",
      "url": "api/express/express.ui.layout_column_wrap.html"
    },
    {
      "title": "express.ui.card",
      "url": "api/express/express.ui.card.html"
    },
    {
      "title": "express.ui.card_header",
      "url": "api/express/express.ui.card_header.html"
    },
    {
      "title": "express.ui.card_footer",
      "url": "api/express/express.ui.card_footer.html"
    },
    {
      "title": "express.ui.value_box",
      "url": "api/express/express.ui.value_box.html"
    },
    {
      "title": "express.ui.value_box_theme",
      "url": "api/express/express.ui.value_box_theme.html"
    },
    {
      "title": "express.ui.popover",
      "url": "api/express/express.ui.popover.html"
    },
    {
      "title": "express.ui.tooltip",
      "url": "api/express/express.ui.tooltip.html"
    },
    {
      "title": "express.ui.accordion",
      "url": "api/express/express.ui.accordion.html"
    },
    {
      "title": "express.ui.accordion_panel",
      "url": "api/express/express.ui.accordion_panel.html"
    },
    {
      "title": "express.ui.layout_sidebar",
      "url": "api/express/express.ui.layout_sidebar.html"
    },
    {
      "title": "Navigate multiple panels"
    },
    {
      "title": "express.ui.nav_panel",
      "url": "api/express/express.ui.nav_panel.html"
    },
    {
      "title": "express.ui.navset_card_underline",
      "url": "api/express/express.ui.navset_card_underline.html"
    },
    {
      "title": "express.ui.navset_card_tab",
      "url": "api/express/express.ui.navset_card_tab.html"
    },
    {
      "title": "express.ui.navset_card_pill",
      "url": "api/express/express.ui.navset_card_pill.html"
    },
    {
      "title": "express.ui.nav_spacer",
      "url": "api/express/express.ui.nav_spacer.html"
    },
    {
      "title": "express.ui.nav_menu",
      "url": "api/express/express.ui.nav_menu.html"
    },
    {
      "title": "express.ui.nav_control",
      "url": "api/express/express.ui.nav_control.html"
    },
    {
      "title": "express.ui.navset_bar",
      "url": "api/express/express.ui.navset_bar.html"
    },
    {
      "title": "express.ui.navset_tab",
      "url": "api/express/express.ui.navset_tab.html"
    },
    {
      "title": "express.ui.navset_pill",
      "url": "api/express/express.ui.navset_pill.html"
    },
    {
      "title": "express.ui.navset_underline",
      "url": "api/express/express.ui.navset_underline.html"
    },
    {
      "title": "express.ui.navset_pill_list",
      "url": "api/express/express.ui.navset_pill_list.html"
    },
    {
      "title": "express.ui.navset_hidden",
      "url": "api/express/express.ui.navset_hidden.html"
    },
    {
      "title": "express.ui.navbar_options",
      "url": "api/express/express.ui.navbar_options.html"
    },
    {
      "title": "Chat interface"
    },
    {
      "title": "express.ui.Chat",
      "url": "api/express/express.ui.Chat.html"
    },
    {
      "title": "Streaming markdown"
    },
    {
      "title": "express.ui.MarkdownStream",
      "url": "api/express/express.ui.MarkdownStream.html"
    },
    {
      "title": "Reactive programming"
    },
    {
      "title": "reactive.calc",
      "url": "api/express/reactive.calc.html"
    },
    {
      "title": "reactive.effect",
      "url": "api/express/reactive.effect.html"
    },
    {
      "title": "reactive.value",
      "url": "api/express/reactive.value.html"
    },
    {
      "title": "reactive.event",
      "url": "api/express/reactive.event.html"
    },
    {
      "title": "reactive.isolate",
      "url": "api/express/reactive.isolate.html"
    },
    {
      "title": "reactive.invalidate_later",
      "url": "api/express/reactive.invalidate_later.html"
    },
    {
      "title": "reactive.extended_task",
      "url": "api/express/reactive.extended_task.html"
    },
    {
      "title": "reactive.flush",
      "url": "api/express/reactive.flush.html"
    },
    {
      "title": "reactive.poll",
      "url": "api/express/reactive.poll.html"
    },
    {
      "title": "reactive.file_reader",
      "url": "api/express/reactive.file_reader.html"
    },
    {
      "title": "reactive.lock",
      "url": "api/express/reactive.lock.html"
    },
    {
      "title": "req",
      "url": "api/express/req.html"
    },
    {
      "title": "Reusable Express code"
    },
    {
      "title": "express.ui.hold",
      "url": "api/express/express.ui.hold.html"
    },
    {
      "title": "express.expressify",
      "url": "api/express/express.expressify.html"
    },
    {
      "title": "Update inputs"
    },
    {
      "title": "express.ui.update_select",
      "url": "api/express/express.ui.update_select.html"
    },
    {
      "title": "express.ui.update_selectize",
      "url": "api/express/express.ui.update_selectize.html"
    },
    {
      "title": "express.ui.update_slider",
      "url": "api/express/express.ui.update_slider.html"
    },
    {
      "title": "express.ui.update_dark_mode",
      "url": "api/express/express.ui.update_dark_mode.html"
    },
    {
      "title": "express.ui.update_date",
      "url": "api/express/express.ui.update_date.html"
    },
    {
      "title": "express.ui.update_date_range",
      "url": "api/express/express.ui.update_date_range.html"
    },
    {
      "title": "express.ui.update_checkbox",
      "url": "api/express/express.ui.update_checkbox.html"
    },
    {
      "title": "express.ui.update_checkbox_group",
      "url": "api/express/express.ui.update_checkbox_group.html"
    },
    {
      "title": "express.ui.update_switch",
      "url": "api/express/express.ui.update_switch.html"
    },
    {
      "title": "express.ui.update_radio_buttons",
      "url": "api/express/express.ui.update_radio_buttons.html"
    },
    {
      "title": "express.ui.update_numeric",
      "url": "api/express/express.ui.update_numeric.html"
    },
    {
      "title": "express.ui.update_text",
      "url": "api/express/express.ui.update_text.html"
    },
    {
      "title": "express.ui.update_text_area",
      "url": "api/express/express.ui.update_text_area.html"
    },
    {
      "title": "express.ui.update_navs",
      "url": "api/express/express.ui.update_navs.html"
    },
    {
      "title": "express.ui.update_action_button",
      "url": "api/express/express.ui.update_action_button.html"
    },
    {
      "title": "express.ui.update_action_link",
      "url": "api/express/express.ui.update_action_link.html"
    },
    {
      "title": "express.ui.update_task_button",
      "url": "api/express/express.ui.update_task_button.html"
    },
    {
      "title": "Update UI Layouts"
    },
    {
      "title": "express.ui.update_sidebar",
      "url": "api/express/express.ui.update_sidebar.html"
    },
    {
      "title": "express.ui.update_tooltip",
      "url": "api/express/express.ui.update_tooltip.html"
    },
    {
      "title": "express.ui.update_popover",
      "url": "api/express/express.ui.update_popover.html"
    },
    {
      "title": "express.ui.update_accordion",
      "url": "api/express/express.ui.update_accordion.html"
    },
    {
      "title": "express.ui.update_accordion_panel",
      "url": "api/express/express.ui.update_accordion_panel.html"
    },
    {
      "title": "express.ui.insert_accordion_panel",
      "url": "api/express/express.ui.insert_accordion_panel.html"
    },
    {
      "title": "express.ui.remove_accordion_panel",
      "url": "api/express/express.ui.remove_accordion_panel.html"
    },
    {
      "title": "Display messages"
    },
    {
      "title": "express.ui.help_text",
      "url": "api/express/express.ui.help_text.html"
    },
    {
      "title": "express.ui.notification_show",
      "url": "api/express/express.ui.notification_show.html"
    },
    {
      "title": "express.ui.notification_remove",
      "url": "api/express/express.ui.notification_remove.html"
    },
    {
      "title": "express.ui.modal",
      "url": "api/express/express.ui.modal.html"
    },
    {
      "title": "express.ui.modal_show",
      "url": "api/express/express.ui.modal_show.html"
    },
    {
      "title": "express.ui.modal_remove",
      "url": "api/express/express.ui.modal_remove.html"
    },
    {
      "title": "express.ui.modal_button",
      "url": "api/express/express.ui.modal_button.html"
    },
    {
      "title": "express.ui.Progress",
      "url": "api/express/express.ui.Progress.html"
    },
    {
      "title": "Modules"
    },
    {
      "title": "express.module",
      "url": "api/express/express.module.html"
    },
    {
      "title": "UI panels"
    },
    {
      "title": "express.ui.panel_absolute",
      "url": "api/express/express.ui.panel_absolute.html"
    },
    {
      "title": "express.ui.panel_fixed",
      "url": "api/express/express.ui.panel_fixed.html"
    },
    {
      "title": "express.ui.panel_title",
      "url": "api/express/express.ui.panel_title.html"
    },
    {
      "title": "express.ui.panel_well",
      "url": "api/express/express.ui.panel_well.html"
    },
    {
      "title": "Uploads & downloads"
    },
    {
      "title": "express.ui.input_file",
      "url": "api/express/express.ui.input_file.html"
    },
    {
      "title": "express.render.download",
      "url": "api/express/express.render.download.html"
    },
    {
      "title": "Dynamic UI"
    },
    {
      "title": "express.ui.panel_conditional",
      "url": "api/express/express.ui.panel_conditional.html"
    },
    {
      "title": "express.ui.insert_ui",
      "url": "api/express/express.ui.insert_ui.html"
    },
    {
      "title": "express.ui.remove_ui",
      "url": "api/express/express.ui.remove_ui.html"
    },
    {
      "title": "User Session"
    },
    {
      "title": "session.Session",
      "url": "api/express/session.Session.html"
    },
    {
      "title": "Client Data"
    },
    {
      "title": "session.ClientData",
      "url": "api/express/session.ClientData.html"
    },
    {
      "title": "UI as HTML"
    },
    {
      "title": "express.ui.Theme",
      "url": "api/express/express.ui.Theme.html"
    },
    {
      "title": "express.ui.markdown",
      "url": "api/express/express.ui.markdown.html"
    },
    {
      "title": "express.ui.include_css",
      "url": "api/express/express.ui.include_css.html"
    },
    {
      "title": "express.ui.include_js",
      "url": "api/express/express.ui.include_js.html"
    },
    {
      "title": "express.ui.HTML",
      "url": "api/express/express.ui.HTML.html"
    },
    {
      "title": "express.ui.tags",
      "url": "api/express/express.ui.tags.html"
    },
    {
      "title": "express.ui.TagList",
      "url": "api/express/express.ui.TagList.html"
    },
    {
      "title": "express.ui.busy_indicators.use",
      "url": "api/express/express.ui.busy_indicators.use.html"
    },
    {
      "title": "express.ui.busy_indicators.options",
      "url": "api/express/express.ui.busy_indicators.options.html"
    },
    {
      "title": "Application-level settings"
    },
    {
      "title": "express.app_opts",
      "url": "api/express/express.app_opts.html"
    },
    {
      "title": "Express developer tooling"
    },
    {
      "title": "express.is_express_app",
      "url": "api/express/express.is_express_app.html"
    },
    {
      "title": "express.wrap_express_app",
      "url": "api/express/express.wrap_express_app.html"
    }
  ]
}